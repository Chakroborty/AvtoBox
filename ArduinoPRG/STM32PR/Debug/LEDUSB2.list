
LEDUSB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ddc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008ee8  08008ee8  00018ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f54  08008f54  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08008f54  08008f54  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f54  08008f54  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f54  08008f54  00018f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f58  08008f58  00018f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08008f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a8  20000184  080090e0  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  080090e0  0002142c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d6a  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032d2  00000000  00000000  00032f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00036230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d86  00000000  00000000  000373f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a310  00000000  00000000  0003817e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156f2  00000000  00000000  0005248e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e569  00000000  00000000  00067b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004980  00000000  00000000  000f60ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000faa6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	08008ed0 	.word	0x08008ed0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	08008ed0 	.word	0x08008ed0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb8a 	bl	8000868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f88a 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9b8 	bl	80004cc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f008 f9d2 	bl	8008504 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000160:	f000 f8de 	bl	8000320 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000164:	f000 f912 	bl	800038c <MX_TIM1_Init>
  PA4 -LE
  PA5 -SCK
  PA6 -MISO
  PA7 -MOSI
*/
	  	  if (priznak == 1)
 8000168:	4b38      	ldr	r3, [pc, #224]	; (800024c <main+0x100>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d168      	bne.n	8000242 <main+0xf6>
	{
	  		switch(spi_func[0])
 8000170:	4b37      	ldr	r3, [pc, #220]	; (8000250 <main+0x104>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	2b04      	cmp	r3, #4
 8000176:	d84e      	bhi.n	8000216 <main+0xca>
 8000178:	a201      	add	r2, pc, #4	; (adr r2, 8000180 <main+0x34>)
 800017a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800017e:	bf00      	nop
 8000180:	08000195 	.word	0x08000195
 8000184:	080001bb 	.word	0x080001bb
 8000188:	080001d9 	.word	0x080001d9
 800018c:	080001fb 	.word	0x080001fb
 8000190:	0800020d 	.word	0x0800020d
	 { case 0:
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000194:	2200      	movs	r2, #0
 8000196:	2110      	movs	r1, #16
 8000198:	482e      	ldr	r0, [pc, #184]	; (8000254 <main+0x108>)
 800019a:	f000 fe7d 	bl	8000e98 <HAL_GPIO_WritePin>
	  	//HAL_Delay(10);
		//SPI1->CR1|= SPI_CR1_SPE;
/******************************************************************/
	  	HAL_SPI_Transmit(&hspi1,spi_OUT,NBUTE[0],100);
 800019e:	4b2e      	ldr	r3, [pc, #184]	; (8000258 <main+0x10c>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	b29a      	uxth	r2, r3
 80001a4:	2364      	movs	r3, #100	; 0x64
 80001a6:	492d      	ldr	r1, [pc, #180]	; (800025c <main+0x110>)
 80001a8:	482d      	ldr	r0, [pc, #180]	; (8000260 <main+0x114>)
 80001aa:	f003 f913 	bl	80033d4 <HAL_SPI_Transmit>
/******************************************************************/
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80001ae:	2201      	movs	r2, #1
 80001b0:	2110      	movs	r1, #16
 80001b2:	4828      	ldr	r0, [pc, #160]	; (8000254 <main+0x108>)
 80001b4:	f000 fe70 	bl	8000e98 <HAL_GPIO_WritePin>
		// HAL_SPI_DeInit(hspi);
		//SPI1->CR1 &= ~SPI_CR1_SPE;                       //Disable the SPI1  by setting the SPE bit to 0
		break;
 80001b8:	e040      	b.n	800023c <main+0xf0>
		case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80001ba:	2201      	movs	r2, #1
 80001bc:	2108      	movs	r1, #8
 80001be:	4825      	ldr	r0, [pc, #148]	; (8000254 <main+0x108>)
 80001c0:	f000 fe6a 	bl	8000e98 <HAL_GPIO_WritePin>
				delay(500);
 80001c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001c8:	f000 f9f6 	bl	80005b8 <delay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);break;
 80001cc:	2200      	movs	r2, #0
 80001ce:	2108      	movs	r1, #8
 80001d0:	4820      	ldr	r0, [pc, #128]	; (8000254 <main+0x108>)
 80001d2:	f000 fe61 	bl	8000e98 <HAL_GPIO_WritePin>
 80001d6:	e031      	b.n	800023c <main+0xf0>
		case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001de:	481d      	ldr	r0, [pc, #116]	; (8000254 <main+0x108>)
 80001e0:	f000 fe5a 	bl	8000e98 <HAL_GPIO_WritePin>
				delay(500);
 80001e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e8:	f000 f9e6 	bl	80005b8 <delay>
		        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);break;
 80001ec:	2200      	movs	r2, #0
 80001ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001f2:	4818      	ldr	r0, [pc, #96]	; (8000254 <main+0x108>)
 80001f4:	f000 fe50 	bl	8000e98 <HAL_GPIO_WritePin>
 80001f8:	e020      	b.n	800023c <main+0xf0>
		case 3: TIM1->CCR1 = spi_OUT[4];
 80001fa:	4b18      	ldr	r3, [pc, #96]	; (800025c <main+0x110>)
 80001fc:	791a      	ldrb	r2, [r3, #4]
 80001fe:	4b19      	ldr	r3, [pc, #100]	; (8000264 <main+0x118>)
 8000200:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);break;
 8000202:	2100      	movs	r1, #0
 8000204:	4818      	ldr	r0, [pc, #96]	; (8000268 <main+0x11c>)
 8000206:	f003 fb77 	bl	80038f8 <HAL_TIM_PWM_Start>
 800020a:	e017      	b.n	800023c <main+0xf0>
				//setPWM(100);
		case 4:	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);	          break;
 800020c:	2100      	movs	r1, #0
 800020e:	4816      	ldr	r0, [pc, #88]	; (8000268 <main+0x11c>)
 8000210:	f003 fc14 	bl	8003a3c <HAL_TIM_PWM_Stop>
 8000214:	e012      	b.n	800023c <main+0xf0>
		default:HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	2110      	movs	r1, #16
 800021a:	480e      	ldr	r0, [pc, #56]	; (8000254 <main+0x108>)
 800021c:	f000 fe3c 	bl	8000e98 <HAL_GPIO_WritePin>
			//SPI1->CR1|= SPI_CR1_SPE;
/******************************************************************/
	  			HAL_SPI_Transmit(&hspi1,spi_OUT,NBUTE[0],100);
 8000220:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <main+0x10c>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	b29a      	uxth	r2, r3
 8000226:	2364      	movs	r3, #100	; 0x64
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <main+0x110>)
 800022a:	480d      	ldr	r0, [pc, #52]	; (8000260 <main+0x114>)
 800022c:	f003 f8d2 	bl	80033d4 <HAL_SPI_Transmit>
/******************************************************************/
	  			//SPI1->CR1 &= ~SPI_CR1_SPE;                       //Disable the SPI1  by setting the SPE bit to 0
	  			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2110      	movs	r1, #16
 8000234:	4807      	ldr	r0, [pc, #28]	; (8000254 <main+0x108>)
 8000236:	f000 fe2f 	bl	8000e98 <HAL_GPIO_WritePin>
	  	break;
 800023a:	bf00      	nop
	 }
		priznak = 0;
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <main+0x100>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
	}
    //SPI_I2S_SendData(SPI1, 0x80F1);
   HAL_Delay(5);
 8000242:	2005      	movs	r0, #5
 8000244:	f000 fb72 	bl	800092c <HAL_Delay>
	  	  if (priznak == 1)
 8000248:	e78e      	b.n	8000168 <main+0x1c>
 800024a:	bf00      	nop
 800024c:	200001ad 	.word	0x200001ad
 8000250:	200001a8 	.word	0x200001a8
 8000254:	40010800 	.word	0x40010800
 8000258:	200001ac 	.word	0x200001ac
 800025c:	200001a0 	.word	0x200001a0
 8000260:	200001b0 	.word	0x200001b0
 8000264:	40012c00 	.word	0x40012c00
 8000268:	20000208 	.word	0x20000208

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b094      	sub	sp, #80	; 0x50
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f008 fdee 	bl	8008e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029c:	2301      	movs	r3, #1
 800029e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 fb6e 	bl	80029a4 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ce:	f000 f987 	bl	80005e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	2302      	movs	r3, #2
 80002d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 fdda 	bl	8002ea8 <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002fa:	f000 f971 	bl	80005e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002fe:	2310      	movs	r3, #16
 8000300:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f002 ff29 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000314:	f000 f964 	bl	80005e0 <Error_Handler>
  }
}
 8000318:	bf00      	nop
 800031a:	3750      	adds	r7, #80	; 0x50
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000324:	4b17      	ldr	r3, [pc, #92]	; (8000384 <MX_SPI1_Init+0x64>)
 8000326:	4a18      	ldr	r2, [pc, #96]	; (8000388 <MX_SPI1_Init+0x68>)
 8000328:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800032a:	4b16      	ldr	r3, [pc, #88]	; (8000384 <MX_SPI1_Init+0x64>)
 800032c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000330:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_SPI1_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_SPI1_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_SPI1_Init+0x64>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_SPI1_Init+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_SPI1_Init+0x64>)
 800034c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000350:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_SPI1_Init+0x64>)
 8000354:	2220      	movs	r2, #32
 8000356:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <MX_SPI1_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_SPI1_Init+0x64>)
 8000360:	2200      	movs	r2, #0
 8000362:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <MX_SPI1_Init+0x64>)
 8000366:	2200      	movs	r2, #0
 8000368:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_SPI1_Init+0x64>)
 800036c:	220a      	movs	r2, #10
 800036e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_SPI1_Init+0x64>)
 8000372:	f002 ffab 	bl	80032cc <HAL_SPI_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800037c:	f000 f930 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	200001b0 	.word	0x200001b0
 8000388:	40013000 	.word	0x40013000

0800038c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b096      	sub	sp, #88	; 0x58
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000392:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]
 80003ba:	615a      	str	r2, [r3, #20]
 80003bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2220      	movs	r2, #32
 80003c2:	2100      	movs	r1, #0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f008 fd49 	bl	8008e5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003ca:	4b3e      	ldr	r3, [pc, #248]	; (80004c4 <MX_TIM1_Init+0x138>)
 80003cc:	4a3e      	ldr	r2, [pc, #248]	; (80004c8 <MX_TIM1_Init+0x13c>)
 80003ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80003d0:	4b3c      	ldr	r3, [pc, #240]	; (80004c4 <MX_TIM1_Init+0x138>)
 80003d2:	2247      	movs	r2, #71	; 0x47
 80003d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d6:	4b3b      	ldr	r3, [pc, #236]	; (80004c4 <MX_TIM1_Init+0x138>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80003dc:	4b39      	ldr	r3, [pc, #228]	; (80004c4 <MX_TIM1_Init+0x138>)
 80003de:	2263      	movs	r2, #99	; 0x63
 80003e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e2:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <MX_TIM1_Init+0x138>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003e8:	4b36      	ldr	r3, [pc, #216]	; (80004c4 <MX_TIM1_Init+0x138>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ee:	4b35      	ldr	r3, [pc, #212]	; (80004c4 <MX_TIM1_Init+0x138>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003f4:	4833      	ldr	r0, [pc, #204]	; (80004c4 <MX_TIM1_Init+0x138>)
 80003f6:	f003 f9d7 	bl	80037a8 <HAL_TIM_Base_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000400:	f000 f8ee 	bl	80005e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000408:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800040a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800040e:	4619      	mov	r1, r3
 8000410:	482c      	ldr	r0, [pc, #176]	; (80004c4 <MX_TIM1_Init+0x138>)
 8000412:	f003 fd41 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800041c:	f000 f8e0 	bl	80005e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000420:	4828      	ldr	r0, [pc, #160]	; (80004c4 <MX_TIM1_Init+0x138>)
 8000422:	f003 fa10 	bl	8003846 <HAL_TIM_PWM_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800042c:	f000 f8d8 	bl	80005e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000438:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800043c:	4619      	mov	r1, r3
 800043e:	4821      	ldr	r0, [pc, #132]	; (80004c4 <MX_TIM1_Init+0x138>)
 8000440:	f004 f8c2 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800044a:	f000 f8c9 	bl	80005e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800044e:	2360      	movs	r3, #96	; 0x60
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 200;
 8000452:	23c8      	movs	r3, #200	; 0xc8
 8000454:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000456:	2300      	movs	r3, #0
 8000458:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800045a:	2300      	movs	r3, #0
 800045c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000462:	2300      	movs	r3, #0
 8000464:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000466:	2300      	movs	r3, #0
 8000468:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800046a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800046e:	2200      	movs	r2, #0
 8000470:	4619      	mov	r1, r3
 8000472:	4814      	ldr	r0, [pc, #80]	; (80004c4 <MX_TIM1_Init+0x138>)
 8000474:	f003 fc4e 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800047e:	f000 f8af 	bl	80005e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800049a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	4619      	mov	r1, r3
 80004a4:	4807      	ldr	r0, [pc, #28]	; (80004c4 <MX_TIM1_Init+0x138>)
 80004a6:	f004 f8ed 	bl	8004684 <HAL_TIMEx_ConfigBreakDeadTime>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80004b0:	f000 f896 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004b4:	4803      	ldr	r0, [pc, #12]	; (80004c4 <MX_TIM1_Init+0x138>)
 80004b6:	f000 f93b 	bl	8000730 <HAL_TIM_MspPostInit>

}
 80004ba:	bf00      	nop
 80004bc:	3758      	adds	r7, #88	; 0x58
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000208 	.word	0x20000208
 80004c8:	40012c00 	.word	0x40012c00

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e0:	4b32      	ldr	r3, [pc, #200]	; (80005ac <MX_GPIO_Init+0xe0>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a31      	ldr	r2, [pc, #196]	; (80005ac <MX_GPIO_Init+0xe0>)
 80004e6:	f043 0310 	orr.w	r3, r3, #16
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <MX_GPIO_Init+0xe0>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0310 	and.w	r3, r3, #16
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f8:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <MX_GPIO_Init+0xe0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a2b      	ldr	r2, [pc, #172]	; (80005ac <MX_GPIO_Init+0xe0>)
 80004fe:	f043 0320 	orr.w	r3, r3, #32
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b29      	ldr	r3, [pc, #164]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0320 	and.w	r3, r3, #32
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b26      	ldr	r3, [pc, #152]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a25      	ldr	r2, [pc, #148]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_GPIO_Init+0xe0>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052e:	4820      	ldr	r0, [pc, #128]	; (80005b0 <MX_GPIO_Init+0xe4>)
 8000530:	f000 fcb2 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_10, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 6181 	mov.w	r1, #1032	; 0x408
 800053a:	481e      	ldr	r0, [pc, #120]	; (80005b4 <MX_GPIO_Init+0xe8>)
 800053c:	f000 fcac 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2110      	movs	r1, #16
 8000544:	481b      	ldr	r0, [pc, #108]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000546:	f000 fca7 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800054a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	2301      	movs	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2302      	movs	r3, #2
 800055a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	4813      	ldr	r0, [pc, #76]	; (80005b0 <MX_GPIO_Init+0xe4>)
 8000564:	f000 fb14 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000568:	2318      	movs	r3, #24
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000574:	2301      	movs	r3, #1
 8000576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4619      	mov	r1, r3
 800057e:	480d      	ldr	r0, [pc, #52]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000580:	f000 fb06 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2302      	movs	r3, #2
 8000594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <MX_GPIO_Init+0xe8>)
 800059e:	f000 faf7 	bl	8000b90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005a2:	bf00      	nop
 80005a4:	3720      	adds	r7, #32
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40011000 	.word	0x40011000
 80005b4:	40010800 	.word	0x40010800

080005b8 <delay>:

/* USER CODE BEGIN 4 */
void delay(uint32_t time_delay)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for(i = 0; i < time_delay; i++);
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e002      	b.n	80005cc <delay+0x14>
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	3301      	adds	r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d3f8      	bcc.n	80005c6 <delay+0xe>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <Error_Handler+0x8>
	...

080005ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_MspInit+0x5c>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4a14      	ldr	r2, [pc, #80]	; (8000648 <HAL_MspInit+0x5c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6193      	str	r3, [r2, #24]
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_MspInit+0x5c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_MspInit+0x5c>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <HAL_MspInit+0x5c>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_MspInit+0x5c>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_MspInit+0x60>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_MspInit+0x60>)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000
 800064c:	40010000 	.word	0x40010000

08000650 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <HAL_SPI_MspInit+0x88>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d12f      	bne.n	80006d0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <HAL_SPI_MspInit+0x8c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a19      	ldr	r2, [pc, #100]	; (80006dc <HAL_SPI_MspInit+0x8c>)
 8000676:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_SPI_MspInit+0x8c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <HAL_SPI_MspInit+0x8c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_SPI_MspInit+0x8c>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <HAL_SPI_MspInit+0x8c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006a0:	23a0      	movs	r3, #160	; 0xa0
 80006a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <HAL_SPI_MspInit+0x90>)
 80006b4:	f000 fa6c 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <HAL_SPI_MspInit+0x90>)
 80006cc:	f000 fa60 	bl	8000b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40013000 	.word	0x40013000
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010800 	.word	0x40010800

080006e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <HAL_TIM_Base_MspInit+0x44>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d113      	bne.n	800071e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <HAL_TIM_Base_MspInit+0x48>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4a0c      	ldr	r2, [pc, #48]	; (800072c <HAL_TIM_Base_MspInit+0x48>)
 80006fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000700:	6193      	str	r3, [r2, #24]
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <HAL_TIM_Base_MspInit+0x48>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2019      	movs	r0, #25
 8000714:	f000 fa05 	bl	8000b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000718:	2019      	movs	r0, #25
 800071a:	f000 fa1e 	bl	8000b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40012c00 	.word	0x40012c00
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a10      	ldr	r2, [pc, #64]	; (800078c <HAL_TIM_MspPostInit+0x5c>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d118      	bne.n	8000782 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_TIM_MspPostInit+0x60>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <HAL_TIM_MspPostInit+0x60>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_TIM_MspPostInit+0x60>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000772:	2301      	movs	r3, #1
 8000774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <HAL_TIM_MspPostInit+0x64>)
 800077e:	f000 fa07 	bl	8000b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000782:	bf00      	nop
 8000784:	3720      	adds	r7, #32
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40012c00 	.word	0x40012c00
 8000790:	40021000 	.word	0x40021000
 8000794:	40010800 	.word	0x40010800

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007de:	f000 f889 	bl	80008f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007ee:	f000 fc90 	bl	8001112 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000f1c 	.word	0x20000f1c

080007fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <TIM1_UP_IRQHandler+0x10>)
 8000802:	f003 f97f 	bl	8003b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000208 	.word	0x20000208

08000810 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800081c:	f7ff fff8 	bl	8000810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000822:	490c      	ldr	r1, [pc, #48]	; (8000854 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000824:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a09      	ldr	r2, [pc, #36]	; (800085c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000838:	4c09      	ldr	r4, [pc, #36]	; (8000860 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000846:	f008 fb11 	bl	8008e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084a:	f7ff fc7f 	bl	800014c <main>
  bx lr
 800084e:	4770      	bx	lr
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000858:	08008f5c 	.word	0x08008f5c
  ldr r2, =_sbss
 800085c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000860:	2000142c 	.word	0x2000142c

08000864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_2_IRQHandler>
	...

08000868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_Init+0x28>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_Init+0x28>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 f947 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087e:	200f      	movs	r0, #15
 8000880:	f000 f808 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000884:	f7ff feb2 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40022000 	.word	0x40022000

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x54>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x58>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f95f 	bl	8000b76 <HAL_SYSTICK_Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e00e      	b.n	80008e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d80a      	bhi.n	80008de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f000 f927 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <HAL_InitTick+0x5c>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	e000      	b.n	80008e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000010 	.word	0x20000010
 80008f0:	2000000c 	.word	0x2000000c

080008f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x1c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x20>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <HAL_IncTick+0x20>)
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	20000010 	.word	0x20000010
 8000914:	20000250 	.word	0x20000250

08000918 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <HAL_GetTick+0x10>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	20000250 	.word	0x20000250

0800092c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000934:	f7ff fff0 	bl	8000918 <HAL_GetTick>
 8000938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000944:	d005      	beq.n	8000952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_Delay+0x44>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4413      	add	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000952:	bf00      	nop
 8000954:	f7ff ffe0 	bl	8000918 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8f7      	bhi.n	8000954 <HAL_Delay+0x28>
  {
  }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000010 	.word	0x20000010

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db0b      	blt.n	8000a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 021f 	and.w	r2, r3, #31
 80009f0:	4906      	ldr	r1, [pc, #24]	; (8000a0c <__NVIC_EnableIRQ+0x34>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	2001      	movs	r0, #1
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	; (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff90 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff2d 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff42 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff90 	bl	8000a64 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5f 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff35 	bl	80009d8 <__NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffa2 	bl	8000ac8 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b08b      	sub	sp, #44	; 0x2c
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba2:	e169      	b.n	8000e78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 8158 	bne.w	8000e72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4a9a      	ldr	r2, [pc, #616]	; (8000e30 <HAL_GPIO_Init+0x2a0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d05e      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bcc:	4a98      	ldr	r2, [pc, #608]	; (8000e30 <HAL_GPIO_Init+0x2a0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d875      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bd2:	4a98      	ldr	r2, [pc, #608]	; (8000e34 <HAL_GPIO_Init+0x2a4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d058      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bd8:	4a96      	ldr	r2, [pc, #600]	; (8000e34 <HAL_GPIO_Init+0x2a4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d86f      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bde:	4a96      	ldr	r2, [pc, #600]	; (8000e38 <HAL_GPIO_Init+0x2a8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d052      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000be4:	4a94      	ldr	r2, [pc, #592]	; (8000e38 <HAL_GPIO_Init+0x2a8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d869      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bea:	4a94      	ldr	r2, [pc, #592]	; (8000e3c <HAL_GPIO_Init+0x2ac>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d04c      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bf0:	4a92      	ldr	r2, [pc, #584]	; (8000e3c <HAL_GPIO_Init+0x2ac>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d863      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bf6:	4a92      	ldr	r2, [pc, #584]	; (8000e40 <HAL_GPIO_Init+0x2b0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d046      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bfc:	4a90      	ldr	r2, [pc, #576]	; (8000e40 <HAL_GPIO_Init+0x2b0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d85d      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000c02:	2b12      	cmp	r3, #18
 8000c04:	d82a      	bhi.n	8000c5c <HAL_GPIO_Init+0xcc>
 8000c06:	2b12      	cmp	r3, #18
 8000c08:	d859      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <HAL_GPIO_Init+0x80>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c8b 	.word	0x08000c8b
 8000c14:	08000c65 	.word	0x08000c65
 8000c18:	08000c77 	.word	0x08000c77
 8000c1c:	08000cb9 	.word	0x08000cb9
 8000c20:	08000cbf 	.word	0x08000cbf
 8000c24:	08000cbf 	.word	0x08000cbf
 8000c28:	08000cbf 	.word	0x08000cbf
 8000c2c:	08000cbf 	.word	0x08000cbf
 8000c30:	08000cbf 	.word	0x08000cbf
 8000c34:	08000cbf 	.word	0x08000cbf
 8000c38:	08000cbf 	.word	0x08000cbf
 8000c3c:	08000cbf 	.word	0x08000cbf
 8000c40:	08000cbf 	.word	0x08000cbf
 8000c44:	08000cbf 	.word	0x08000cbf
 8000c48:	08000cbf 	.word	0x08000cbf
 8000c4c:	08000cbf 	.word	0x08000cbf
 8000c50:	08000cbf 	.word	0x08000cbf
 8000c54:	08000c6d 	.word	0x08000c6d
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	4a79      	ldr	r2, [pc, #484]	; (8000e44 <HAL_GPIO_Init+0x2b4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d013      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c62:	e02c      	b.n	8000cbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	623b      	str	r3, [r7, #32]
          break;
 8000c6a:	e029      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	3304      	adds	r3, #4
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	e024      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	3308      	adds	r3, #8
 8000c7c:	623b      	str	r3, [r7, #32]
          break;
 8000c7e:	e01f      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	330c      	adds	r3, #12
 8000c86:	623b      	str	r3, [r7, #32]
          break;
 8000c88:	e01a      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c92:	2304      	movs	r3, #4
 8000c94:	623b      	str	r3, [r7, #32]
          break;
 8000c96:	e013      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d105      	bne.n	8000cac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	611a      	str	r2, [r3, #16]
          break;
 8000caa:	e009      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cac:	2308      	movs	r3, #8
 8000cae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	615a      	str	r2, [r3, #20]
          break;
 8000cb6:	e003      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
          break;
 8000cbc:	e000      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          break;
 8000cbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2bff      	cmp	r3, #255	; 0xff
 8000cc4:	d801      	bhi.n	8000cca <HAL_GPIO_Init+0x13a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	e001      	b.n	8000cce <HAL_GPIO_Init+0x13e>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2bff      	cmp	r3, #255	; 0xff
 8000cd4:	d802      	bhi.n	8000cdc <HAL_GPIO_Init+0x14c>
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x152>
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3b08      	subs	r3, #8
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	210f      	movs	r1, #15
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	6a39      	ldr	r1, [r7, #32]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80b1 	beq.w	8000e72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d10:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a4c      	ldr	r2, [pc, #304]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b4a      	ldr	r3, [pc, #296]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d28:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <HAL_GPIO_Init+0x2bc>)
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a40      	ldr	r2, [pc, #256]	; (8000e50 <HAL_GPIO_Init+0x2c0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d013      	beq.n	8000d7c <HAL_GPIO_Init+0x1ec>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a3f      	ldr	r2, [pc, #252]	; (8000e54 <HAL_GPIO_Init+0x2c4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d00d      	beq.n	8000d78 <HAL_GPIO_Init+0x1e8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <HAL_GPIO_Init+0x2c8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x1e4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a3d      	ldr	r2, [pc, #244]	; (8000e5c <HAL_GPIO_Init+0x2cc>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d101      	bne.n	8000d70 <HAL_GPIO_Init+0x1e0>
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e006      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d70:	2304      	movs	r3, #4
 8000d72:	e004      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d74:	2302      	movs	r3, #2
 8000d76:	e002      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d80:	f002 0203 	and.w	r2, r2, #3
 8000d84:	0092      	lsls	r2, r2, #2
 8000d86:	4093      	lsls	r3, r2
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d8e:	492f      	ldr	r1, [pc, #188]	; (8000e4c <HAL_GPIO_Init+0x2bc>)
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3302      	adds	r3, #2
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000da8:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	492c      	ldr	r1, [pc, #176]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	608b      	str	r3, [r1, #8]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4928      	ldr	r1, [pc, #160]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dd0:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	4922      	ldr	r1, [pc, #136]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	60cb      	str	r3, [r1, #12]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	491e      	ldr	r1, [pc, #120]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	4918      	ldr	r1, [pc, #96]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4914      	ldr	r1, [pc, #80]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d021      	beq.n	8000e64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	490e      	ldr	r1, [pc, #56]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]
 8000e2c:	e021      	b.n	8000e72 <HAL_GPIO_Init+0x2e2>
 8000e2e:	bf00      	nop
 8000e30:	10320000 	.word	0x10320000
 8000e34:	10310000 	.word	0x10310000
 8000e38:	10220000 	.word	0x10220000
 8000e3c:	10210000 	.word	0x10210000
 8000e40:	10120000 	.word	0x10120000
 8000e44:	10110000 	.word	0x10110000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40010800 	.word	0x40010800
 8000e54:	40010c00 	.word	0x40010c00
 8000e58:	40011000 	.word	0x40011000
 8000e5c:	40011400 	.word	0x40011400
 8000e60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	4909      	ldr	r1, [pc, #36]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	3301      	adds	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f47f ae8e 	bne.w	8000ba4 <HAL_GPIO_Init+0x14>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	372c      	adds	r7, #44	; 0x2c
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40010400 	.word	0x40010400

08000e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eb4:	e003      	b.n	8000ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	041a      	lsls	r2, r3, #16
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	611a      	str	r2, [r3, #16]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	b08b      	sub	sp, #44	; 0x2c
 8000ecc:	af06      	add	r7, sp, #24
 8000ece:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e0f1      	b.n	80010be <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d106      	bne.n	8000ef4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f007 fd0a 	bl	8008908 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fc48 	bl	8004796 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	687e      	ldr	r6, [r7, #4]
 8000f0e:	466d      	mov	r5, sp
 8000f10:	f106 0410 	add.w	r4, r6, #16
 8000f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	602b      	str	r3, [r5, #0]
 8000f1c:	1d33      	adds	r3, r6, #4
 8000f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f20:	6838      	ldr	r0, [r7, #0]
 8000f22:	f003 fc12 	bl	800474a <USB_CoreInit>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d005      	beq.n	8000f38 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2202      	movs	r2, #2
 8000f30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e0c2      	b.n	80010be <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fc43 	bl	80047ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e040      	b.n	8000fcc <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	440b      	add	r3, r1
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	440b      	add	r3, r1
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	440b      	add	r3, r1
 8000f84:	3303      	adds	r3, #3
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	3338      	adds	r3, #56	; 0x38
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	440b      	add	r3, r1
 8000fac:	333c      	adds	r3, #60	; 0x3c
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	3340      	adds	r3, #64	; 0x40
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d3b9      	bcc.n	8000f4a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e044      	b.n	8001066 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	440b      	add	r3, r1
 8000fea:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	440b      	add	r3, r1
 8001000:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	440b      	add	r3, r1
 800102c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	440b      	add	r3, r1
 8001042:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	440b      	add	r3, r1
 8001058:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	3301      	adds	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	d3b5      	bcc.n	8000fdc <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	687e      	ldr	r6, [r7, #4]
 8001078:	466d      	mov	r5, sp
 800107a:	f106 0410 	add.w	r4, r6, #16
 800107e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001082:	6823      	ldr	r3, [r4, #0]
 8001084:	602b      	str	r3, [r5, #0]
 8001086:	1d33      	adds	r3, r6, #4
 8001088:	cb0e      	ldmia	r3, {r1, r2, r3}
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f003 fba9 	bl	80047e2 <USB_DevInit>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2202      	movs	r2, #2
 800109a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00d      	b.n	80010be <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f005 fe2b 	bl	8006d12 <USB_DevDisconnect>

  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_PCD_Start+0x16>
 80010d8:	2302      	movs	r3, #2
 80010da:	e016      	b.n	800110a <HAL_PCD_Start+0x44>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 fb3e 	bl	800476a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80010ee:	2101      	movs	r1, #1
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f007 fe7c 	bl	8008dee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 fdff 	bl	8006cfe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b088      	sub	sp, #32
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f005 fe01 	bl	8006d26 <USB_ReadInterrupts>
 8001124:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 fb1b 	bl	800176c <PCD_EP_ISR_Handler>

    return;
 8001136:	e119      	b.n	800136c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113e:	2b00      	cmp	r3, #0
 8001140:	d013      	beq.n	800116a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800114a:	b29a      	uxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001154:	b292      	uxth	r2, r2
 8001156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f007 fc4f 	bl	80089fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001160:	2100      	movs	r1, #0
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f905 	bl	8001372 <HAL_PCD_SetAddress>

    return;
 8001168:	e100      	b.n	800136c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00c      	beq.n	800118e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800117c:	b29a      	uxth	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001186:	b292      	uxth	r2, r2
 8001188:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800118c:	e0ee      	b.n	800136c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00c      	beq.n	80011b2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011aa:	b292      	uxth	r2, r2
 80011ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011b0:	e0dc      	b.n	800136c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d027      	beq.n	800120c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0204 	bic.w	r2, r2, #4
 80011ce:	b292      	uxth	r2, r2
 80011d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0208 	bic.w	r2, r2, #8
 80011e6:	b292      	uxth	r2, r2
 80011e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f007 fc3f 	bl	8008a70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001204:	b292      	uxth	r2, r2
 8001206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800120a:	e0af      	b.n	800136c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8083 	beq.w	800131e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	77fb      	strb	r3, [r7, #31]
 800121c:	e010      	b.n	8001240 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	7ffb      	ldrb	r3, [r7, #31]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	441a      	add	r2, r3
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	8812      	ldrh	r2, [r2, #0]
 800122e:	b292      	uxth	r2, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	3320      	adds	r3, #32
 8001234:	443b      	add	r3, r7
 8001236:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800123a:	7ffb      	ldrb	r3, [r7, #31]
 800123c:	3301      	adds	r3, #1
 800123e:	77fb      	strb	r3, [r7, #31]
 8001240:	7ffb      	ldrb	r3, [r7, #31]
 8001242:	2b07      	cmp	r3, #7
 8001244:	d9eb      	bls.n	800121e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800124e:	b29a      	uxth	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 0201 	orr.w	r2, r2, #1
 8001258:	b292      	uxth	r2, r2
 800125a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001266:	b29a      	uxth	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0201 	bic.w	r2, r2, #1
 8001270:	b292      	uxth	r2, r2
 8001272:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001276:	bf00      	nop
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001280:	b29b      	uxth	r3, r3
 8001282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f6      	beq.n	8001278 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001292:	b29a      	uxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800129c:	b292      	uxth	r2, r2
 800129e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	77fb      	strb	r3, [r7, #31]
 80012a6:	e00f      	b.n	80012c8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80012a8:	7ffb      	ldrb	r3, [r7, #31]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	4611      	mov	r1, r2
 80012b0:	7ffa      	ldrb	r2, [r7, #31]
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	440a      	add	r2, r1
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	3320      	adds	r3, #32
 80012ba:	443b      	add	r3, r7
 80012bc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80012c0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	3301      	adds	r3, #1
 80012c6:	77fb      	strb	r3, [r7, #31]
 80012c8:	7ffb      	ldrb	r3, [r7, #31]
 80012ca:	2b07      	cmp	r3, #7
 80012cc:	d9ec      	bls.n	80012a8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 0208 	orr.w	r2, r2, #8
 80012e0:	b292      	uxth	r2, r2
 80012e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012f8:	b292      	uxth	r2, r2
 80012fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001306:	b29a      	uxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0204 	orr.w	r2, r2, #4
 8001310:	b292      	uxth	r2, r2
 8001312:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f007 fb90 	bl	8008a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800131c:	e026      	b.n	800136c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00f      	beq.n	8001348 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001330:	b29a      	uxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800133a:	b292      	uxth	r2, r2
 800133c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f007 fb4e 	bl	80089e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001346:	e011      	b.n	800136c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00c      	beq.n	800136c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800135a:	b29a      	uxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001364:	b292      	uxth	r2, r2
 8001366:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800136a:	bf00      	nop
  }
}
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_PCD_SetAddress+0x1a>
 8001388:	2302      	movs	r3, #2
 800138a:	e013      	b.n	80013b4 <HAL_PCD_SetAddress+0x42>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	78fa      	ldrb	r2, [r7, #3]
 8001398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	78fa      	ldrb	r2, [r7, #3]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f005 fc97 	bl	8006cd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4603      	mov	r3, r0
 80013cc:	70fb      	strb	r3, [r7, #3]
 80013ce:	460b      	mov	r3, r1
 80013d0:	803b      	strh	r3, [r7, #0]
 80013d2:	4613      	mov	r3, r2
 80013d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da0e      	bge.n	8001400 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	705a      	strb	r2, [r3, #1]
 80013fe:	e00e      	b.n	800141e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	f003 0207 	and.w	r2, r3, #7
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	b2da      	uxtb	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800142a:	883a      	ldrh	r2, [r7, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	78ba      	ldrb	r2, [r7, #2]
 8001434:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001436:	78bb      	ldrb	r3, [r7, #2]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d102      	bne.n	8001442 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_PCD_EP_Open+0x94>
 800144c:	2302      	movs	r3, #2
 800144e:	e00e      	b.n	800146e <HAL_PCD_EP_Open+0xb2>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68f9      	ldr	r1, [r7, #12]
 800145e:	4618      	mov	r0, r3
 8001460:	f003 f9e0 	bl	8004824 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800146c:	7afb      	ldrb	r3, [r7, #11]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	460b      	mov	r3, r1
 8001480:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001486:	2b00      	cmp	r3, #0
 8001488:	da0e      	bge.n	80014a8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	705a      	strb	r2, [r3, #1]
 80014a6:	e00e      	b.n	80014c6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	f003 0207 	and.w	r2, r3, #7
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_PCD_EP_Close+0x6a>
 80014dc:	2302      	movs	r3, #2
 80014de:	e00e      	b.n	80014fe <HAL_PCD_EP_Close+0x88>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68f9      	ldr	r1, [r7, #12]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fd58 	bl	8004fa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	460b      	mov	r3, r1
 8001514:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001516:	7afb      	ldrb	r3, [r7, #11]
 8001518:	f003 0207 	and.w	r2, r3, #7
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2200      	movs	r2, #0
 8001544:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001546:	7afb      	ldrb	r3, [r7, #11]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	b2da      	uxtb	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6979      	ldr	r1, [r7, #20]
 8001558:	4618      	mov	r0, r3
 800155a:	f003 ff0f 	bl	800537c <USB_EPStartXfer>

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	f003 0207 	and.w	r2, r3, #7
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	440b      	add	r3, r1
 8001586:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	460b      	mov	r3, r1
 80015a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a6:	7afb      	ldrb	r3, [r7, #11]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2201      	movs	r2, #1
 80015e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6979      	ldr	r1, [r7, #20]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fec1 	bl	800537c <USB_EPStartXfer>

  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	f003 0207 	and.w	r2, r3, #7
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	d901      	bls.n	8001622 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e04c      	b.n	80016bc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001622:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001626:	2b00      	cmp	r3, #0
 8001628:	da0e      	bge.n	8001648 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	705a      	strb	r2, [r3, #1]
 8001646:	e00c      	b.n	8001662 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2201      	movs	r2, #1
 8001666:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	b2da      	uxtb	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_PCD_EP_SetStall+0x7e>
 800167e:	2302      	movs	r3, #2
 8001680:	e01c      	b.n	80016bc <HAL_PCD_EP_SetStall+0xb8>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68f9      	ldr	r1, [r7, #12]
 8001690:	4618      	mov	r0, r3
 8001692:	f005 fa24 	bl	8006ade <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	2b00      	cmp	r3, #0
 800169e:	d108      	bne.n	80016b2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80016aa:	4619      	mov	r1, r3
 80016ac:	4610      	mov	r0, r2
 80016ae:	f005 fb49 	bl	8006d44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	f003 020f 	and.w	r2, r3, #15
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d901      	bls.n	80016e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e040      	b.n	8001764 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da0e      	bge.n	8001708 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	705a      	strb	r2, [r3, #1]
 8001706:	e00e      	b.n	8001726 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	f003 0207 	and.w	r2, r3, #7
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	b2da      	uxtb	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_PCD_EP_ClrStall+0x82>
 8001742:	2302      	movs	r3, #2
 8001744:	e00e      	b.n	8001764 <HAL_PCD_EP_ClrStall+0xa0>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68f9      	ldr	r1, [r7, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f005 fa12 	bl	8006b7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b096      	sub	sp, #88	; 0x58
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001774:	e3bf      	b.n	8001ef6 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800177e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001782:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001790:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001794:	2b00      	cmp	r3, #0
 8001796:	f040 8179 	bne.w	8001a8c <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800179a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d152      	bne.n	800184c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b6:	81fb      	strh	r3, [r7, #14]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3328      	adds	r3, #40	; 0x28
 80017ce:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017d8:	b29b      	uxth	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	3302      	adds	r3, #2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	441a      	add	r2, r3
 8001806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001808:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800180a:	2100      	movs	r1, #0
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f007 f8ce 	bl	80089ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 836b 	beq.w	8001ef6 <PCD_EP_ISR_Handler+0x78a>
 8001820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b00      	cmp	r3, #0
 8001826:	f040 8366 	bne.w	8001ef6 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001836:	b2da      	uxtb	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	b292      	uxth	r2, r2
 800183e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800184a:	e354      	b.n	8001ef6 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001852:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800185e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001866:	2b00      	cmp	r3, #0
 8001868:	d034      	beq.n	80018d4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001872:	b29b      	uxth	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	3306      	adds	r3, #6
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	4413      	add	r3, r2
 8001888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001894:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80018a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80018a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	f005 fa9b 	bl	8006de4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018ba:	4013      	ands	r3, r2
 80018bc:	823b      	strh	r3, [r7, #16]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	8a3a      	ldrh	r2, [r7, #16]
 80018c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018c8:	b292      	uxth	r2, r2
 80018ca:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f007 f841 	bl	8008954 <HAL_PCD_SetupStageCallback>
 80018d2:	e310      	b.n	8001ef6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018d4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f280 830c 	bge.w	8001ef6 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018ea:	4013      	ands	r3, r2
 80018ec:	83fb      	strh	r3, [r7, #30]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	8bfa      	ldrh	r2, [r7, #30]
 80018f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018f8:	b292      	uxth	r2, r2
 80018fa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001904:	b29b      	uxth	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	3306      	adds	r3, #6
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	4413      	add	r3, r2
 800191a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001926:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d019      	beq.n	8001964 <PCD_EP_ISR_Handler+0x1f8>
 8001930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d015      	beq.n	8001964 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193e:	6959      	ldr	r1, [r3, #20]
 8001940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001942:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001946:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001948:	b29b      	uxth	r3, r3
 800194a:	f005 fa4b 	bl	8006de4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800194e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	441a      	add	r2, r3
 8001958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800195c:	2100      	movs	r1, #0
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f007 f80a 	bl	8008978 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800196e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 82bd 	bne.w	8001ef6 <PCD_EP_ISR_Handler+0x78a>
 800197c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001980:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001984:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001988:	f000 82b5 	beq.w	8001ef6 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800199a:	b29b      	uxth	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4413      	add	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	801a      	strh	r2, [r3, #0]
 80019bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b3e      	cmp	r3, #62	; 0x3e
 80019c2:	d91d      	bls.n	8001a00 <PCD_EP_ISR_Handler+0x294>
 80019c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	095b      	lsrs	r3, r3, #5
 80019ca:	647b      	str	r3, [r7, #68]	; 0x44
 80019cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <PCD_EP_ISR_Handler+0x272>
 80019d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019da:	3b01      	subs	r3, #1
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	029b      	lsls	r3, r3, #10
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	801a      	strh	r2, [r3, #0]
 80019fe:	e026      	b.n	8001a4e <PCD_EP_ISR_Handler+0x2e2>
 8001a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10a      	bne.n	8001a1e <PCD_EP_ISR_Handler+0x2b2>
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	801a      	strh	r2, [r3, #0]
 8001a1c:	e017      	b.n	8001a4e <PCD_EP_ISR_Handler+0x2e2>
 8001a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	647b      	str	r3, [r7, #68]	; 0x44
 8001a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <PCD_EP_ISR_Handler+0x2cc>
 8001a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a34:	3301      	adds	r3, #1
 8001a36:	647b      	str	r3, [r7, #68]	; 0x44
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	029b      	lsls	r3, r3, #10
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5e:	827b      	strh	r3, [r7, #18]
 8001a60:	8a7b      	ldrh	r3, [r7, #18]
 8001a62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a66:	827b      	strh	r3, [r7, #18]
 8001a68:	8a7b      	ldrh	r3, [r7, #18]
 8001a6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a6e:	827b      	strh	r3, [r7, #18]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	8a7b      	ldrh	r3, [r7, #18]
 8001a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	8013      	strh	r3, [r2, #0]
 8001a8a:	e234      	b.n	8001ef6 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001aa0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f280 80fc 	bge.w	8001ca2 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001adc:	b292      	uxth	r2, r2
 8001ade:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ae0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af8:	7b1b      	ldrb	r3, [r3, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d125      	bne.n	8001b4a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4413      	add	r3, r2
 8001b12:	3306      	adds	r3, #6
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b26:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001b2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8092 	beq.w	8001c58 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3a:	6959      	ldr	r1, [r3, #20]
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3e:	88da      	ldrh	r2, [r3, #6]
 8001b40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b44:	f005 f94e 	bl	8006de4 <USB_ReadPMA>
 8001b48:	e086      	b.n	8001c58 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4c:	78db      	ldrb	r3, [r3, #3]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d10a      	bne.n	8001b68 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b56:	461a      	mov	r2, r3
 8001b58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f9d9 	bl	8001f12 <HAL_PCD_EP_DB_Receive>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b66:	e077      	b.n	8001c58 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b82:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	441a      	add	r2, r3
 8001b94:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d024      	beq.n	8001c10 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001bf2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d02e      	beq.n	8001c58 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c00:	6959      	ldr	r1, [r3, #20]
 8001c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c04:	891a      	ldrh	r2, [r3, #8]
 8001c06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c0a:	f005 f8eb 	bl	8006de4 <USB_ReadPMA>
 8001c0e:	e023      	b.n	8001c58 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	3306      	adds	r3, #6
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c38:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001c3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4a:	6959      	ldr	r1, [r3, #20]
 8001c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4e:	895a      	ldrh	r2, [r3, #10]
 8001c50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c54:	f005 f8c6 	bl	8006de4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5a:	69da      	ldr	r2, [r3, #28]
 8001c5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c60:	441a      	add	r2, r3
 8001c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c64:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c6e:	441a      	add	r2, r3
 8001c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c72:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <PCD_EP_ISR_Handler+0x51c>
 8001c7c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d206      	bcs.n	8001c96 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f006 fe72 	bl	8008978 <HAL_PCD_DataOutStageCallback>
 8001c94:	e005      	b.n	8001ca2 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f003 fb6d 	bl	800537c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ca2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8123 	beq.w	8001ef6 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001cb0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	441a      	add	r2, r3
 8001cf0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d02:	78db      	ldrb	r3, [r3, #3]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	f040 80a2 	bne.w	8001e4e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d12:	7b1b      	ldrb	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8093 	beq.w	8001e40 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d046      	beq.n	8001db4 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d28:	785b      	ldrb	r3, [r3, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d126      	bne.n	8001d7c <PCD_EP_ISR_Handler+0x610>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	4413      	add	r3, r2
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
 8001d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	011a      	lsls	r2, r3, #4
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	4413      	add	r3, r2
 8001d50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d54:	623b      	str	r3, [r7, #32]
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	e061      	b.n	8001e40 <PCD_EP_ISR_Handler+0x6d4>
 8001d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7e:	785b      	ldrb	r3, [r3, #1]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d15d      	bne.n	8001e40 <PCD_EP_ISR_Handler+0x6d4>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d98:	4413      	add	r3, r2
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	011a      	lsls	r2, r3, #4
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	4413      	add	r3, r2
 8001da6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dae:	2200      	movs	r2, #0
 8001db0:	801a      	strh	r2, [r3, #0]
 8001db2:	e045      	b.n	8001e40 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbc:	785b      	ldrb	r3, [r3, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d126      	bne.n	8001e10 <PCD_EP_ISR_Handler+0x6a4>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd6:	4413      	add	r3, r2
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	011a      	lsls	r2, r3, #4
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	4413      	add	r3, r2
 8001de4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
 8001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	801a      	strh	r2, [r3, #0]
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	801a      	strh	r2, [r3, #0]
 8001e0e:	e017      	b.n	8001e40 <PCD_EP_ISR_Handler+0x6d4>
 8001e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e12:	785b      	ldrb	r3, [r3, #1]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d113      	bne.n	8001e40 <PCD_EP_ISR_Handler+0x6d4>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e26:	4413      	add	r3, r2
 8001e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	011a      	lsls	r2, r3, #4
 8001e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e32:	4413      	add	r3, r2
 8001e34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f006 fdb1 	bl	80089ae <HAL_PCD_DataInStageCallback>
 8001e4c:	e053      	b.n	8001ef6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d146      	bne.n	8001ee8 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d907      	bls.n	8001ea2 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e9a:	1ad2      	subs	r2, r2, r3
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9e:	619a      	str	r2, [r3, #24]
 8001ea0:	e002      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d106      	bne.n	8001ebe <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f006 fd79 	bl	80089ae <HAL_PCD_DataInStageCallback>
 8001ebc:	e01b      	b.n	8001ef6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ec6:	441a      	add	r2, r3
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eca:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ed4:	441a      	add	r2, r3
 8001ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 fa4b 	bl	800537c <USB_EPStartXfer>
 8001ee6:	e006      	b.n	8001ef6 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ee8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eec:	461a      	mov	r2, r3
 8001eee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f91b 	bl	800212c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f6ff ac37 	blt.w	8001776 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3758      	adds	r7, #88	; 0x58
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b088      	sub	sp, #32
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d07e      	beq.n	8002028 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f52:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	699a      	ldr	r2, [r3, #24]
 8001f58:	8b7b      	ldrh	r3, [r7, #26]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d306      	bcc.n	8001f6c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	8b7b      	ldrh	r3, [r7, #26]
 8001f64:	1ad2      	subs	r2, r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	619a      	str	r2, [r3, #24]
 8001f6a:	e002      	b.n	8001f72 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d123      	bne.n	8001fc2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f94:	833b      	strh	r3, [r7, #24]
 8001f96:	8b3b      	ldrh	r3, [r7, #24]
 8001f98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f9c:	833b      	strh	r3, [r7, #24]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	441a      	add	r2, r3
 8001fac:	8b3b      	ldrh	r3, [r7, #24]
 8001fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01f      	beq.n	800200c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe6:	82fb      	strh	r3, [r7, #22]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	441a      	add	r2, r3
 8001ff6:	8afb      	ldrh	r3, [r7, #22]
 8001ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002004:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002008:	b29b      	uxth	r3, r3
 800200a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800200c:	8b7b      	ldrh	r3, [r7, #26]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8087 	beq.w	8002122 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	6959      	ldr	r1, [r3, #20]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	891a      	ldrh	r2, [r3, #8]
 8002020:	8b7b      	ldrh	r3, [r7, #26]
 8002022:	f004 fedf 	bl	8006de4 <USB_ReadPMA>
 8002026:	e07c      	b.n	8002122 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002030:	b29b      	uxth	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	3306      	adds	r3, #6
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	4413      	add	r3, r2
 8002046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002050:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	8b7b      	ldrh	r3, [r7, #26]
 8002058:	429a      	cmp	r2, r3
 800205a:	d306      	bcc.n	800206a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	699a      	ldr	r2, [r3, #24]
 8002060:	8b7b      	ldrh	r3, [r7, #26]
 8002062:	1ad2      	subs	r2, r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	619a      	str	r2, [r3, #24]
 8002068:	e002      	b.n	8002070 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d123      	bne.n	80020c0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800208e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002092:	83fb      	strh	r3, [r7, #30]
 8002094:	8bfb      	ldrh	r3, [r7, #30]
 8002096:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800209a:	83fb      	strh	r3, [r7, #30]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	441a      	add	r2, r3
 80020aa:	8bfb      	ldrh	r3, [r7, #30]
 80020ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020bc:	b29b      	uxth	r3, r3
 80020be:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d11f      	bne.n	800210a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e4:	83bb      	strh	r3, [r7, #28]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	441a      	add	r2, r3
 80020f4:	8bbb      	ldrh	r3, [r7, #28]
 80020f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002102:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002106:	b29b      	uxth	r3, r3
 8002108:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800210a:	8b7b      	ldrh	r3, [r7, #26]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	6959      	ldr	r1, [r3, #20]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	895a      	ldrh	r2, [r3, #10]
 800211c:	8b7b      	ldrh	r3, [r7, #26]
 800211e:	f004 fe61 	bl	8006de4 <USB_ReadPMA>
    }
  }

  return count;
 8002122:	8b7b      	ldrh	r3, [r7, #26]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3720      	adds	r7, #32
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b0a4      	sub	sp, #144	; 0x90
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 81dd 	beq.w	8002500 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214e:	b29b      	uxth	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	3302      	adds	r3, #2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800216e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800217a:	429a      	cmp	r2, r3
 800217c:	d907      	bls.n	800218e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002186:	1ad2      	subs	r2, r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	619a      	str	r2, [r3, #24]
 800218c:	e002      	b.n	8002194 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f040 80b9 	bne.w	8002310 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	785b      	ldrb	r3, [r3, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d126      	bne.n	80021f4 <HAL_PCD_EP_DB_Transmit+0xc8>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ba:	4413      	add	r3, r2
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	011a      	lsls	r2, r3, #4
 80021c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c6:	4413      	add	r3, r2
 80021c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d8:	b29a      	uxth	r2, r3
 80021da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021dc:	801a      	strh	r2, [r3, #0]
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	801a      	strh	r2, [r3, #0]
 80021f2:	e01a      	b.n	800222a <HAL_PCD_EP_DB_Transmit+0xfe>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	785b      	ldrb	r3, [r3, #1]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d116      	bne.n	800222a <HAL_PCD_EP_DB_Transmit+0xfe>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002210:	4413      	add	r3, r2
 8002212:	637b      	str	r3, [r7, #52]	; 0x34
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	011a      	lsls	r2, r3, #4
 800221a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221c:	4413      	add	r3, r2
 800221e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
 8002224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002226:	2200      	movs	r2, #0
 8002228:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d126      	bne.n	8002286 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002246:	b29b      	uxth	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4413      	add	r3, r2
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	011a      	lsls	r2, r3, #4
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	4413      	add	r3, r2
 800225a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	b29b      	uxth	r3, r3
 8002266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800226a:	b29a      	uxth	r2, r3
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	801a      	strh	r2, [r3, #0]
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800227a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800227e:	b29a      	uxth	r2, r3
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	801a      	strh	r2, [r3, #0]
 8002284:	e017      	b.n	80022b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	785b      	ldrb	r3, [r3, #1]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d113      	bne.n	80022b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002296:	b29b      	uxth	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	4413      	add	r3, r2
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	011a      	lsls	r2, r3, #4
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	4413      	add	r3, r2
 80022aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	2200      	movs	r2, #0
 80022b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	4619      	mov	r1, r3
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f006 fb76 	bl	80089ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 82fc 	beq.w	80028c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e8:	82fb      	strh	r3, [r7, #22]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	441a      	add	r2, r3
 80022f8:	8afb      	ldrh	r3, [r7, #22]
 80022fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230a:	b29b      	uxth	r3, r3
 800230c:	8013      	strh	r3, [r2, #0]
 800230e:	e2da      	b.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d021      	beq.n	800235e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002334:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	441a      	add	r2, r3
 8002346:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800234a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800234e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235a:	b29b      	uxth	r3, r3
 800235c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002364:	2b01      	cmp	r3, #1
 8002366:	f040 82ae 	bne.w	80028c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002372:	441a      	add	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002380:	441a      	add	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	6a1a      	ldr	r2, [r3, #32]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	429a      	cmp	r2, r3
 8002390:	d30b      	bcc.n	80023aa <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	6a1a      	ldr	r2, [r3, #32]
 800239e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023a2:	1ad2      	subs	r2, r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	621a      	str	r2, [r3, #32]
 80023a8:	e017      	b.n	80023da <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d108      	bne.n	80023c4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80023b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023c2:	e00a      	b.n	80023da <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2200      	movs	r2, #0
 80023d8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	785b      	ldrb	r3, [r3, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d165      	bne.n	80024ae <HAL_PCD_EP_DB_Transmit+0x382>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f6:	4413      	add	r3, r2
 80023f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	011a      	lsls	r2, r3, #4
 8002400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002402:	4413      	add	r3, r2
 8002404:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002408:	63bb      	str	r3, [r7, #56]	; 0x38
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002414:	b29a      	uxth	r2, r3
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	801a      	strh	r2, [r3, #0]
 800241a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800241e:	2b3e      	cmp	r3, #62	; 0x3e
 8002420:	d91d      	bls.n	800245e <HAL_PCD_EP_DB_Transmit+0x332>
 8002422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	64bb      	str	r3, [r7, #72]	; 0x48
 800242a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <HAL_PCD_EP_DB_Transmit+0x310>
 8002436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002438:	3b01      	subs	r3, #1
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	b29a      	uxth	r2, r3
 8002442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002444:	b29b      	uxth	r3, r3
 8002446:	029b      	lsls	r3, r3, #10
 8002448:	b29b      	uxth	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b29b      	uxth	r3, r3
 800244e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002456:	b29a      	uxth	r2, r3
 8002458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245a:	801a      	strh	r2, [r3, #0]
 800245c:	e044      	b.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800245e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <HAL_PCD_EP_DB_Transmit+0x350>
 8002466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002474:	b29a      	uxth	r2, r3
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	e035      	b.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800247c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	64bb      	str	r3, [r7, #72]	; 0x48
 8002484:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002492:	3301      	adds	r3, #1
 8002494:	64bb      	str	r3, [r7, #72]	; 0x48
 8002496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29a      	uxth	r2, r3
 800249c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800249e:	b29b      	uxth	r3, r3
 80024a0:	029b      	lsls	r3, r3, #10
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	801a      	strh	r2, [r3, #0]
 80024ac:	e01c      	b.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	785b      	ldrb	r3, [r3, #1]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d118      	bne.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	647b      	str	r3, [r7, #68]	; 0x44
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ca:	4413      	add	r3, r2
 80024cc:	647b      	str	r3, [r7, #68]	; 0x44
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	011a      	lsls	r2, r3, #4
 80024d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d6:	4413      	add	r3, r2
 80024d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024dc:	643b      	str	r3, [r7, #64]	; 0x40
 80024de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6959      	ldr	r1, [r3, #20]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	891a      	ldrh	r2, [r3, #8]
 80024f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f004 fc2e 	bl	8006d5a <USB_WritePMA>
 80024fe:	e1e2      	b.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002508:	b29b      	uxth	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	3306      	adds	r3, #6
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	4413      	add	r3, r2
 800251e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002528:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002534:	429a      	cmp	r2, r3
 8002536:	d307      	bcc.n	8002548 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	699a      	ldr	r2, [r3, #24]
 800253c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002540:	1ad2      	subs	r2, r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	619a      	str	r2, [r3, #24]
 8002546:	e002      	b.n	800254e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2200      	movs	r2, #0
 800254c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f040 80c0 	bne.w	80026d8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d126      	bne.n	80025ae <HAL_PCD_EP_DB_Transmit+0x482>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002574:	4413      	add	r3, r2
 8002576:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	011a      	lsls	r2, r3, #4
 800257e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002580:	4413      	add	r3, r2
 8002582:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002586:	67bb      	str	r3, [r7, #120]	; 0x78
 8002588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002592:	b29a      	uxth	r2, r3
 8002594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002596:	801a      	strh	r2, [r3, #0]
 8002598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	e01a      	b.n	80025e4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	785b      	ldrb	r3, [r3, #1]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d116      	bne.n	80025e4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	667b      	str	r3, [r7, #100]	; 0x64
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025ca:	4413      	add	r3, r2
 80025cc:	667b      	str	r3, [r7, #100]	; 0x64
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	011a      	lsls	r2, r3, #4
 80025d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d6:	4413      	add	r3, r2
 80025d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025dc:	663b      	str	r3, [r7, #96]	; 0x60
 80025de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025e0:	2200      	movs	r2, #0
 80025e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	677b      	str	r3, [r7, #116]	; 0x74
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d12b      	bne.n	800264a <HAL_PCD_EP_DB_Transmit+0x51e>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002600:	b29b      	uxth	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002606:	4413      	add	r3, r2
 8002608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	011a      	lsls	r2, r3, #4
 8002610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002612:	4413      	add	r3, r2
 8002614:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002618:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800261c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002628:	b29a      	uxth	r2, r3
 800262a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800262e:	801a      	strh	r2, [r3, #0]
 8002630:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800263c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002640:	b29a      	uxth	r2, r3
 8002642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002646:	801a      	strh	r2, [r3, #0]
 8002648:	e017      	b.n	800267a <HAL_PCD_EP_DB_Transmit+0x54e>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	785b      	ldrb	r3, [r3, #1]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d113      	bne.n	800267a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265a:	b29b      	uxth	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002660:	4413      	add	r3, r2
 8002662:	677b      	str	r3, [r7, #116]	; 0x74
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	011a      	lsls	r2, r3, #4
 800266a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800266c:	4413      	add	r3, r2
 800266e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002672:	673b      	str	r3, [r7, #112]	; 0x70
 8002674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002676:	2200      	movs	r2, #0
 8002678:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f006 f994 	bl	80089ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 811a 	bne.w	80028c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ac:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	441a      	add	r2, r3
 80026be:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80026c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	8013      	strh	r3, [r2, #0]
 80026d6:	e0f6      	b.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d121      	bne.n	8002726 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	441a      	add	r2, r3
 800270e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800271a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800271e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002722:	b29b      	uxth	r3, r3
 8002724:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800272c:	2b01      	cmp	r3, #1
 800272e:	f040 80ca 	bne.w	80028c6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800273a:	441a      	add	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	69da      	ldr	r2, [r3, #28]
 8002744:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002748:	441a      	add	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	6a1a      	ldr	r2, [r3, #32]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	429a      	cmp	r2, r3
 8002758:	d30b      	bcc.n	8002772 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	6a1a      	ldr	r2, [r3, #32]
 8002766:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800276a:	1ad2      	subs	r2, r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	621a      	str	r2, [r3, #32]
 8002770:	e017      	b.n	80027a2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d108      	bne.n	800278c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800277a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800277e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800278a:	e00a      	b.n	80027a2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2200      	movs	r2, #0
 8002798:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	657b      	str	r3, [r7, #84]	; 0x54
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	785b      	ldrb	r3, [r3, #1]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d165      	bne.n	800287c <HAL_PCD_EP_DB_Transmit+0x750>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027be:	b29b      	uxth	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c4:	4413      	add	r3, r2
 80027c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	011a      	lsls	r2, r3, #4
 80027ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d0:	4413      	add	r3, r2
 80027d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80027d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ec:	2b3e      	cmp	r3, #62	; 0x3e
 80027ee:	d91d      	bls.n	800282c <HAL_PCD_EP_DB_Transmit+0x700>
 80027f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80027f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <HAL_PCD_EP_DB_Transmit+0x6de>
 8002804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002806:	3b01      	subs	r3, #1
 8002808:	66bb      	str	r3, [r7, #104]	; 0x68
 800280a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b29a      	uxth	r2, r3
 8002810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002812:	b29b      	uxth	r3, r3
 8002814:	029b      	lsls	r3, r3, #10
 8002816:	b29b      	uxth	r3, r3
 8002818:	4313      	orrs	r3, r2
 800281a:	b29b      	uxth	r3, r3
 800281c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002824:	b29a      	uxth	r2, r3
 8002826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002828:	801a      	strh	r2, [r3, #0]
 800282a:	e041      	b.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x784>
 800282c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <HAL_PCD_EP_DB_Transmit+0x71e>
 8002834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800283e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002842:	b29a      	uxth	r2, r3
 8002844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002846:	801a      	strh	r2, [r3, #0]
 8002848:	e032      	b.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x784>
 800284a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	66bb      	str	r3, [r7, #104]	; 0x68
 8002852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_PCD_EP_DB_Transmit+0x738>
 800285e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002860:	3301      	adds	r3, #1
 8002862:	66bb      	str	r3, [r7, #104]	; 0x68
 8002864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29a      	uxth	r2, r3
 800286a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286c:	b29b      	uxth	r3, r3
 800286e:	029b      	lsls	r3, r3, #10
 8002870:	b29b      	uxth	r3, r3
 8002872:	4313      	orrs	r3, r2
 8002874:	b29a      	uxth	r2, r3
 8002876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	e019      	b.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x784>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d115      	bne.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288c:	b29b      	uxth	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002892:	4413      	add	r3, r2
 8002894:	657b      	str	r3, [r7, #84]	; 0x54
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	011a      	lsls	r2, r3, #4
 800289c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289e:	4413      	add	r3, r2
 80028a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028a4:	653b      	str	r3, [r7, #80]	; 0x50
 80028a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ae:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	6959      	ldr	r1, [r3, #20]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	895a      	ldrh	r2, [r3, #10]
 80028bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f004 fa4a 	bl	8006d5a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e0:	82bb      	strh	r3, [r7, #20]
 80028e2:	8abb      	ldrh	r3, [r7, #20]
 80028e4:	f083 0310 	eor.w	r3, r3, #16
 80028e8:	82bb      	strh	r3, [r7, #20]
 80028ea:	8abb      	ldrh	r3, [r7, #20]
 80028ec:	f083 0320 	eor.w	r3, r3, #32
 80028f0:	82bb      	strh	r3, [r7, #20]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	441a      	add	r2, r3
 8002900:	8abb      	ldrh	r3, [r7, #20]
 8002902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800290a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002912:	b29b      	uxth	r3, r3
 8002914:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3790      	adds	r7, #144	; 0x90
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	817b      	strh	r3, [r7, #10]
 800292e:	4613      	mov	r3, r2
 8002930:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002932:	897b      	ldrh	r3, [r7, #10]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4413      	add	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e009      	b.n	800296a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002956:	897a      	ldrh	r2, [r7, #10]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800296a:	893b      	ldrh	r3, [r7, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2200      	movs	r2, #0
 8002974:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	b29a      	uxth	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	80da      	strh	r2, [r3, #6]
 800297e:	e00b      	b.n	8002998 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2201      	movs	r2, #1
 8002984:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	b29a      	uxth	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	b29a      	uxth	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e272      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8087 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c4:	4b92      	ldr	r3, [pc, #584]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d00c      	beq.n	80029ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029d0:	4b8f      	ldr	r3, [pc, #572]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d112      	bne.n	8002a02 <HAL_RCC_OscConfig+0x5e>
 80029dc:	4b8c      	ldr	r3, [pc, #560]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e8:	d10b      	bne.n	8002a02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ea:	4b89      	ldr	r3, [pc, #548]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d06c      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x12c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d168      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e24c      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_OscConfig+0x76>
 8002a0c:	4b80      	ldr	r3, [pc, #512]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a7f      	ldr	r2, [pc, #508]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	e02e      	b.n	8002a78 <HAL_RCC_OscConfig+0xd4>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x98>
 8002a22:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a7a      	ldr	r2, [pc, #488]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b78      	ldr	r3, [pc, #480]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a77      	ldr	r2, [pc, #476]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e01d      	b.n	8002a78 <HAL_RCC_OscConfig+0xd4>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0xbc>
 8002a46:	4b72      	ldr	r3, [pc, #456]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a71      	ldr	r2, [pc, #452]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b6f      	ldr	r3, [pc, #444]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a6e      	ldr	r2, [pc, #440]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCC_OscConfig+0xd4>
 8002a60:	4b6b      	ldr	r3, [pc, #428]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a6a      	ldr	r2, [pc, #424]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b68      	ldr	r3, [pc, #416]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a67      	ldr	r2, [pc, #412]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fd ff4a 	bl	8000918 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a88:	f7fd ff46 	bl	8000918 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e200      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b5d      	ldr	r3, [pc, #372]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0xe4>
 8002aa6:	e014      	b.n	8002ad2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fd ff36 	bl	8000918 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7fd ff32 	bl	8000918 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1ec      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac2:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x10c>
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d063      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ade:	4b4c      	ldr	r3, [pc, #304]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aea:	4b49      	ldr	r3, [pc, #292]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d11c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x18c>
 8002af6:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b02:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x176>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e1c0      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1a:	4b3d      	ldr	r3, [pc, #244]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4939      	ldr	r1, [pc, #228]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	e03a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b38:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7fd feeb 	bl	8000918 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b46:	f7fd fee7 	bl	8000918 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1a1      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b58:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4927      	ldr	r1, [pc, #156]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fd feca 	bl	8000918 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b88:	f7fd fec6 	bl	8000918 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e180      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d03a      	beq.n	8002c28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d019      	beq.n	8002bee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bba:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc0:	f7fd feaa 	bl	8000918 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc8:	f7fd fea6 	bl	8000918 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e160      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002be6:	2001      	movs	r0, #1
 8002be8:	f000 fa9c 	bl	8003124 <RCC_Delay>
 8002bec:	e01c      	b.n	8002c28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf4:	f7fd fe90 	bl	8000918 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfa:	e00f      	b.n	8002c1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7fd fe8c 	bl	8000918 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d908      	bls.n	8002c1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e146      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	42420000 	.word	0x42420000
 8002c18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	4b92      	ldr	r3, [pc, #584]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e9      	bne.n	8002bfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80a6 	beq.w	8002d82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4b8b      	ldr	r3, [pc, #556]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10d      	bne.n	8002c62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4a87      	ldr	r2, [pc, #540]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c50:	61d3      	str	r3, [r2, #28]
 8002c52:	4b85      	ldr	r3, [pc, #532]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b82      	ldr	r3, [pc, #520]	; (8002e6c <HAL_RCC_OscConfig+0x4c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d118      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6e:	4b7f      	ldr	r3, [pc, #508]	; (8002e6c <HAL_RCC_OscConfig+0x4c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a7e      	ldr	r2, [pc, #504]	; (8002e6c <HAL_RCC_OscConfig+0x4c8>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7a:	f7fd fe4d 	bl	8000918 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c82:	f7fd fe49 	bl	8000918 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	; 0x64
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e103      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	4b75      	ldr	r3, [pc, #468]	; (8002e6c <HAL_RCC_OscConfig+0x4c8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x312>
 8002ca8:	4b6f      	ldr	r3, [pc, #444]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4a6e      	ldr	r2, [pc, #440]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6213      	str	r3, [r2, #32]
 8002cb4:	e02d      	b.n	8002d12 <HAL_RCC_OscConfig+0x36e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x334>
 8002cbe:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a69      	ldr	r2, [pc, #420]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6213      	str	r3, [r2, #32]
 8002cca:	4b67      	ldr	r3, [pc, #412]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a66      	ldr	r2, [pc, #408]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	f023 0304 	bic.w	r3, r3, #4
 8002cd4:	6213      	str	r3, [r2, #32]
 8002cd6:	e01c      	b.n	8002d12 <HAL_RCC_OscConfig+0x36e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d10c      	bne.n	8002cfa <HAL_RCC_OscConfig+0x356>
 8002ce0:	4b61      	ldr	r3, [pc, #388]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a60      	ldr	r2, [pc, #384]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	f043 0304 	orr.w	r3, r3, #4
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	4b5e      	ldr	r3, [pc, #376]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	4a5d      	ldr	r2, [pc, #372]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6213      	str	r3, [r2, #32]
 8002cf8:	e00b      	b.n	8002d12 <HAL_RCC_OscConfig+0x36e>
 8002cfa:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a5a      	ldr	r2, [pc, #360]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	6213      	str	r3, [r2, #32]
 8002d06:	4b58      	ldr	r3, [pc, #352]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4a57      	ldr	r2, [pc, #348]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	f023 0304 	bic.w	r3, r3, #4
 8002d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d015      	beq.n	8002d46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1a:	f7fd fdfd 	bl	8000918 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d20:	e00a      	b.n	8002d38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7fd fdf9 	bl	8000918 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e0b1      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d38:	4b4b      	ldr	r3, [pc, #300]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ee      	beq.n	8002d22 <HAL_RCC_OscConfig+0x37e>
 8002d44:	e014      	b.n	8002d70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7fd fde7 	bl	8000918 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fd fde3 	bl	8000918 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e09b      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	4b40      	ldr	r3, [pc, #256]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ee      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d105      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d76:	4b3c      	ldr	r3, [pc, #240]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	4a3b      	ldr	r2, [pc, #236]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8087 	beq.w	8002e9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d8c:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d061      	beq.n	8002e5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d146      	bne.n	8002e2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da0:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <HAL_RCC_OscConfig+0x4cc>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fd fdb7 	bl	8000918 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fd fdb3 	bl	8000918 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e06d      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d108      	bne.n	8002de8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	4921      	ldr	r1, [pc, #132]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de8:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a19      	ldr	r1, [r3, #32]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	491b      	ldr	r1, [pc, #108]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_RCC_OscConfig+0x4cc>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fd fd87 	bl	8000918 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7fd fd83 	bl	8000918 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e03d      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x46a>
 8002e2c:	e035      	b.n	8002e9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <HAL_RCC_OscConfig+0x4cc>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fd fd70 	bl	8000918 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fd fd6c 	bl	8000918 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e026      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x498>
 8002e5a:	e01e      	b.n	8002e9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e019      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_OscConfig+0x500>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000

08002ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0d0      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b6a      	ldr	r3, [pc, #424]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d910      	bls.n	8002eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b67      	ldr	r3, [pc, #412]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 0207 	bic.w	r2, r3, #7
 8002ed2:	4965      	ldr	r1, [pc, #404]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0b8      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f04:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a58      	ldr	r2, [pc, #352]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f1c:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a52      	ldr	r2, [pc, #328]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b50      	ldr	r3, [pc, #320]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	494d      	ldr	r1, [pc, #308]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d040      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d115      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e07f      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f66:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e073      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e06b      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4936      	ldr	r1, [pc, #216]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f98:	f7fd fcbe 	bl	8000918 <HAL_GetTick>
 8002f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa0:	f7fd fcba 	bl	8000918 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e053      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 020c 	and.w	r2, r3, #12
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d1eb      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d210      	bcs.n	8002ff8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 0207 	bic.w	r2, r3, #7
 8002fde:	4922      	ldr	r1, [pc, #136]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e032      	b.n	800305e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4916      	ldr	r1, [pc, #88]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	490e      	ldr	r1, [pc, #56]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003036:	f000 f821 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800303a:	4602      	mov	r2, r0
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	490a      	ldr	r1, [pc, #40]	; (8003070 <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	5ccb      	ldrb	r3, [r1, r3]
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	4a09      	ldr	r2, [pc, #36]	; (8003074 <HAL_RCC_ClockConfig+0x1cc>)
 8003050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1d0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fc1c 	bl	8000894 <HAL_InitTick>

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40022000 	.word	0x40022000
 800306c:	40021000 	.word	0x40021000
 8003070:	08008f30 	.word	0x08008f30
 8003074:	20000008 	.word	0x20000008
 8003078:	2000000c 	.word	0x2000000c

0800307c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003096:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <HAL_RCC_GetSysClockFreq+0x94>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x30>
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x36>
 80030aa:	e027      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ae:	613b      	str	r3, [r7, #16]
      break;
 80030b0:	e027      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	0c9b      	lsrs	r3, r3, #18
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	4a17      	ldr	r2, [pc, #92]	; (8003118 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_RCC_GetSysClockFreq+0x94>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	0c5b      	lsrs	r3, r3, #17
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	4a11      	ldr	r2, [pc, #68]	; (800311c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a0d      	ldr	r2, [pc, #52]	; (8003114 <HAL_RCC_GetSysClockFreq+0x98>)
 80030de:	fb03 f202 	mul.w	r2, r3, r2
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e004      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030f0:	fb02 f303 	mul.w	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	613b      	str	r3, [r7, #16]
      break;
 80030fa:	e002      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RCC_GetSysClockFreq+0x98>)
 80030fe:	613b      	str	r3, [r7, #16]
      break;
 8003100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003102:	693b      	ldr	r3, [r7, #16]
}
 8003104:	4618      	mov	r0, r3
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
 8003114:	007a1200 	.word	0x007a1200
 8003118:	08008f40 	.word	0x08008f40
 800311c:	08008f50 	.word	0x08008f50
 8003120:	003d0900 	.word	0x003d0900

08003124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <RCC_Delay+0x34>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <RCC_Delay+0x38>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0a5b      	lsrs	r3, r3, #9
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003140:	bf00      	nop
  }
  while (Delay --);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1e5a      	subs	r2, r3, #1
 8003146:	60fa      	str	r2, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f9      	bne.n	8003140 <RCC_Delay+0x1c>
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	20000008 	.word	0x20000008
 800315c:	10624dd3 	.word	0x10624dd3

08003160 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d07d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800317c:	2300      	movs	r3, #0
 800317e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003180:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318c:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4a4b      	ldr	r2, [pc, #300]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003196:	61d3      	str	r3, [r2, #28]
 8003198:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d118      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a42      	ldr	r2, [pc, #264]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c0:	f7fd fbaa 	bl	8000918 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c6:	e008      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c8:	f7fd fba6 	bl	8000918 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e06d      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031e6:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d02e      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	429a      	cmp	r2, r3
 8003202:	d027      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003204:	4b2e      	ldr	r3, [pc, #184]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800320e:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003214:	4b2c      	ldr	r3, [pc, #176]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800321a:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d014      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fd fb75 	bl	8000918 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fd fb71 	bl	8000918 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e036      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ee      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4917      	ldr	r1, [pc, #92]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003262:	4313      	orrs	r3, r2
 8003264:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003276:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	490b      	ldr	r1, [pc, #44]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	4904      	ldr	r1, [pc, #16]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40007000 	.word	0x40007000
 80032c8:	42420440 	.word	0x42420440

080032cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e076      	b.n	80033cc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ee:	d009      	beq.n	8003304 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	61da      	str	r2, [r3, #28]
 80032f6:	e005      	b.n	8003304 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd f996 	bl	8000650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	ea42 0103 	orr.w	r1, r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	0c1a      	lsrs	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f002 0204 	and.w	r2, r2, #4
 80033aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_SPI_Transmit+0x22>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e12d      	b.n	8003652 <HAL_SPI_Transmit+0x27e>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033fe:	f7fd fa8b 	bl	8000918 <HAL_GetTick>
 8003402:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b01      	cmp	r3, #1
 8003412:	d002      	beq.n	800341a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003414:	2302      	movs	r3, #2
 8003416:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003418:	e116      	b.n	8003648 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_SPI_Transmit+0x52>
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800342a:	e10d      	b.n	8003648 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2203      	movs	r2, #3
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	88fa      	ldrh	r2, [r7, #6]
 8003444:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003472:	d10f      	bne.n	8003494 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003482:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003492:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d007      	beq.n	80034b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ba:	d14f      	bne.n	800355c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_SPI_Transmit+0xf6>
 80034c4:	8afb      	ldrh	r3, [r7, #22]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d142      	bne.n	8003550 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	881a      	ldrh	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	1c9a      	adds	r2, r3, #2
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034ee:	e02f      	b.n	8003550 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d112      	bne.n	8003524 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	881a      	ldrh	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	1c9a      	adds	r2, r3, #2
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	86da      	strh	r2, [r3, #54]	; 0x36
 8003522:	e015      	b.n	8003550 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003524:	f7fd f9f8 	bl	8000918 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d803      	bhi.n	800353c <HAL_SPI_Transmit+0x168>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d102      	bne.n	8003542 <HAL_SPI_Transmit+0x16e>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800354e:	e07b      	b.n	8003648 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1ca      	bne.n	80034f0 <HAL_SPI_Transmit+0x11c>
 800355a:	e050      	b.n	80035fe <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_SPI_Transmit+0x196>
 8003564:	8afb      	ldrh	r3, [r7, #22]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d144      	bne.n	80035f4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	7812      	ldrb	r2, [r2, #0]
 8003576:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003590:	e030      	b.n	80035f4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b02      	cmp	r3, #2
 800359e:	d113      	bne.n	80035c8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	330c      	adds	r3, #12
 80035aa:	7812      	ldrb	r2, [r2, #0]
 80035ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80035c6:	e015      	b.n	80035f4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035c8:	f7fd f9a6 	bl	8000918 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d803      	bhi.n	80035e0 <HAL_SPI_Transmit+0x20c>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d102      	bne.n	80035e6 <HAL_SPI_Transmit+0x212>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80035f2:	e029      	b.n	8003648 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1c9      	bne.n	8003592 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f8b2 	bl	800376c <SPI_EndRxTxTransaction>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	77fb      	strb	r3, [r7, #31]
 800363e:	e003      	b.n	8003648 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003650:	7ffb      	ldrb	r3, [r7, #31]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800366c:	f7fd f954 	bl	8000918 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	4413      	add	r3, r2
 800367a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800367c:	f7fd f94c 	bl	8000918 <HAL_GetTick>
 8003680:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003682:	4b39      	ldr	r3, [pc, #228]	; (8003768 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	015b      	lsls	r3, r3, #5
 8003688:	0d1b      	lsrs	r3, r3, #20
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	fb02 f303 	mul.w	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003692:	e054      	b.n	800373e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d050      	beq.n	800373e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800369c:	f7fd f93c 	bl	8000918 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d902      	bls.n	80036b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d13d      	bne.n	800372e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ca:	d111      	bne.n	80036f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d4:	d004      	beq.n	80036e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036de:	d107      	bne.n	80036f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f8:	d10f      	bne.n	800371a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e017      	b.n	800375e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3b01      	subs	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4013      	ands	r3, r2
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	429a      	cmp	r2, r3
 800374c:	bf0c      	ite	eq
 800374e:	2301      	moveq	r3, #1
 8003750:	2300      	movne	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	429a      	cmp	r2, r3
 800375a:	d19b      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000008 	.word	0x20000008

0800376c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2200      	movs	r2, #0
 8003780:	2180      	movs	r1, #128	; 0x80
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff ff6a 	bl	800365c <SPI_WaitFlagStateUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	f043 0220 	orr.w	r2, r3, #32
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e000      	b.n	80037a0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e041      	b.n	800383e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fc ff88 	bl	80006e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f000 fc4a 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e041      	b.n	80038dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f839 	bl	80038e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f000 fbfb 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <HAL_TIM_PWM_Start+0x24>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e022      	b.n	8003962 <HAL_TIM_PWM_Start+0x6a>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b04      	cmp	r3, #4
 8003920:	d109      	bne.n	8003936 <HAL_TIM_PWM_Start+0x3e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e015      	b.n	8003962 <HAL_TIM_PWM_Start+0x6a>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d109      	bne.n	8003950 <HAL_TIM_PWM_Start+0x58>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e008      	b.n	8003962 <HAL_TIM_PWM_Start+0x6a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e05e      	b.n	8003a28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d104      	bne.n	800397a <HAL_TIM_PWM_Start+0x82>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003978:	e013      	b.n	80039a2 <HAL_TIM_PWM_Start+0xaa>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b04      	cmp	r3, #4
 800397e:	d104      	bne.n	800398a <HAL_TIM_PWM_Start+0x92>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003988:	e00b      	b.n	80039a2 <HAL_TIM_PWM_Start+0xaa>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d104      	bne.n	800399a <HAL_TIM_PWM_Start+0xa2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003998:	e003      	b.n	80039a2 <HAL_TIM_PWM_Start+0xaa>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2201      	movs	r2, #1
 80039a8:	6839      	ldr	r1, [r7, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fde8 	bl	8004580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1e      	ldr	r2, [pc, #120]	; (8003a30 <HAL_TIM_PWM_Start+0x138>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d107      	bne.n	80039ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <HAL_TIM_PWM_Start+0x138>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <HAL_TIM_PWM_Start+0xfa>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d009      	beq.n	80039f2 <HAL_TIM_PWM_Start+0xfa>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <HAL_TIM_PWM_Start+0x13c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_TIM_PWM_Start+0xfa>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <HAL_TIM_PWM_Start+0x140>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d111      	bne.n	8003a16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b06      	cmp	r3, #6
 8003a02:	d010      	beq.n	8003a26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a14:	e007      	b.n	8003a26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0201 	orr.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800

08003a3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	6839      	ldr	r1, [r7, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fd96 	bl	8004580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <HAL_TIM_PWM_Stop+0xc4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d117      	bne.n	8003a8e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <HAL_TIM_PWM_Stop+0x52>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	f240 4344 	movw	r3, #1092	; 0x444
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d107      	bne.n	8003a8e <HAL_TIM_PWM_Stop+0x52>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <HAL_TIM_PWM_Stop+0x82>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	f240 4344 	movw	r3, #1092	; 0x444
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d107      	bne.n	8003abe <HAL_TIM_PWM_Stop+0x82>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <HAL_TIM_PWM_Stop+0x92>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003acc:	e013      	b.n	8003af6 <HAL_TIM_PWM_Stop+0xba>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d104      	bne.n	8003ade <HAL_TIM_PWM_Stop+0xa2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003adc:	e00b      	b.n	8003af6 <HAL_TIM_PWM_Stop+0xba>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d104      	bne.n	8003aee <HAL_TIM_PWM_Stop+0xb2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aec:	e003      	b.n	8003af6 <HAL_TIM_PWM_Stop+0xba>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40012c00 	.word	0x40012c00

08003b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0202 	mvn.w	r2, #2
 8003b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa7f 	bl	800404a <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fa72 	bl	8004038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fa81 	bl	800405c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d122      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0204 	mvn.w	r2, #4
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa55 	bl	800404a <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fa48 	bl	8004038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fa57 	bl	800405c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d122      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d11b      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0208 	mvn.w	r2, #8
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2204      	movs	r2, #4
 8003bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fa2b 	bl	800404a <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fa1e 	bl	8004038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fa2d 	bl	800405c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d122      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d11b      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0210 	mvn.w	r2, #16
 8003c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2208      	movs	r2, #8
 8003c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fa01 	bl	800404a <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f9f4 	bl	8004038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fa03 	bl	800405c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0201 	mvn.w	r2, #1
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9cf 	bl	8004026 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	2b80      	cmp	r3, #128	; 0x80
 8003c94:	d10e      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d107      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fd42 	bl	8004738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d107      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f9c7 	bl	800406e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d10e      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d107      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0220 	mvn.w	r2, #32
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fd0d 	bl	8004726 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e0ae      	b.n	8003e90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	f200 809f 	bhi.w	8003e80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d7d 	.word	0x08003d7d
 8003d4c:	08003e81 	.word	0x08003e81
 8003d50:	08003e81 	.word	0x08003e81
 8003d54:	08003e81 	.word	0x08003e81
 8003d58:	08003dbd 	.word	0x08003dbd
 8003d5c:	08003e81 	.word	0x08003e81
 8003d60:	08003e81 	.word	0x08003e81
 8003d64:	08003e81 	.word	0x08003e81
 8003d68:	08003dff 	.word	0x08003dff
 8003d6c:	08003e81 	.word	0x08003e81
 8003d70:	08003e81 	.word	0x08003e81
 8003d74:	08003e81 	.word	0x08003e81
 8003d78:	08003e3f 	.word	0x08003e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f9de 	bl	8004144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0208 	orr.w	r2, r2, #8
 8003d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0204 	bic.w	r2, r2, #4
 8003da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6999      	ldr	r1, [r3, #24]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	619a      	str	r2, [r3, #24]
      break;
 8003dba:	e064      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fa24 	bl	8004210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6999      	ldr	r1, [r3, #24]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	619a      	str	r2, [r3, #24]
      break;
 8003dfc:	e043      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fa6d 	bl	80042e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0208 	orr.w	r2, r2, #8
 8003e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0204 	bic.w	r2, r2, #4
 8003e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69d9      	ldr	r1, [r3, #28]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	61da      	str	r2, [r3, #28]
      break;
 8003e3c:	e023      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69d9      	ldr	r1, [r3, #28]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	021a      	lsls	r2, r3, #8
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	61da      	str	r2, [r3, #28]
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	75fb      	strb	r3, [r7, #23]
      break;
 8003e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIM_ConfigClockSource+0x1c>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e0b4      	b.n	800401e <HAL_TIM_ConfigClockSource+0x186>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eec:	d03e      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0xd4>
 8003eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef2:	f200 8087 	bhi.w	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efa:	f000 8086 	beq.w	800400a <HAL_TIM_ConfigClockSource+0x172>
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f02:	d87f      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b70      	cmp	r3, #112	; 0x70
 8003f06:	d01a      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0xa6>
 8003f08:	2b70      	cmp	r3, #112	; 0x70
 8003f0a:	d87b      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b60      	cmp	r3, #96	; 0x60
 8003f0e:	d050      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f10:	2b60      	cmp	r3, #96	; 0x60
 8003f12:	d877      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b50      	cmp	r3, #80	; 0x50
 8003f16:	d03c      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0xfa>
 8003f18:	2b50      	cmp	r3, #80	; 0x50
 8003f1a:	d873      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d058      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003f20:	2b40      	cmp	r3, #64	; 0x40
 8003f22:	d86f      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b30      	cmp	r3, #48	; 0x30
 8003f26:	d064      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	2b30      	cmp	r3, #48	; 0x30
 8003f2a:	d86b      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d060      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d867      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d05c      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d05a      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f3c:	e062      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f4e:	f000 faf8 	bl	8004542 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	609a      	str	r2, [r3, #8]
      break;
 8003f6a:	e04f      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f7c:	f000 fae1 	bl	8004542 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f8e:	609a      	str	r2, [r3, #8]
      break;
 8003f90:	e03c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f000 fa58 	bl	8004454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2150      	movs	r1, #80	; 0x50
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 faaf 	bl	800450e <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e02c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f000 fa76 	bl	80044b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2160      	movs	r1, #96	; 0x60
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fa9f 	bl	800450e <TIM_ITRx_SetConfig>
      break;
 8003fd0:	e01c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f000 fa38 	bl	8004454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2140      	movs	r1, #64	; 0x40
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fa8f 	bl	800450e <TIM_ITRx_SetConfig>
      break;
 8003ff0:	e00c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f000 fa86 	bl	800450e <TIM_ITRx_SetConfig>
      break;
 8004002:	e003      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      break;
 8004008:	e000      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800400a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr

0800406e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr

08004080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a29      	ldr	r2, [pc, #164]	; (8004138 <TIM_Base_SetConfig+0xb8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_Base_SetConfig+0x30>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d007      	beq.n	80040b0 <TIM_Base_SetConfig+0x30>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a26      	ldr	r2, [pc, #152]	; (800413c <TIM_Base_SetConfig+0xbc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0x30>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a25      	ldr	r2, [pc, #148]	; (8004140 <TIM_Base_SetConfig+0xc0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d108      	bne.n	80040c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a1c      	ldr	r2, [pc, #112]	; (8004138 <TIM_Base_SetConfig+0xb8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00b      	beq.n	80040e2 <TIM_Base_SetConfig+0x62>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d0:	d007      	beq.n	80040e2 <TIM_Base_SetConfig+0x62>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a19      	ldr	r2, [pc, #100]	; (800413c <TIM_Base_SetConfig+0xbc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <TIM_Base_SetConfig+0x62>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a18      	ldr	r2, [pc, #96]	; (8004140 <TIM_Base_SetConfig+0xc0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d108      	bne.n	80040f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a07      	ldr	r2, [pc, #28]	; (8004138 <TIM_Base_SetConfig+0xb8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d103      	bne.n	8004128 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	615a      	str	r2, [r3, #20]
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800

08004144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f023 0201 	bic.w	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 0302 	bic.w	r3, r3, #2
 800418c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a1c      	ldr	r2, [pc, #112]	; (800420c <TIM_OC1_SetConfig+0xc8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10c      	bne.n	80041ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0308 	bic.w	r3, r3, #8
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f023 0304 	bic.w	r3, r3, #4
 80041b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a13      	ldr	r2, [pc, #76]	; (800420c <TIM_OC1_SetConfig+0xc8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d111      	bne.n	80041e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	621a      	str	r2, [r3, #32]
}
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40012c00 	.word	0x40012c00

08004210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f023 0210 	bic.w	r2, r3, #16
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0320 	bic.w	r3, r3, #32
 800425a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a1d      	ldr	r2, [pc, #116]	; (80042e0 <TIM_OC2_SetConfig+0xd0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d10d      	bne.n	800428c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800428a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <TIM_OC2_SetConfig+0xd0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d113      	bne.n	80042bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800429a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr
 80042e0:	40012c00 	.word	0x40012c00

080042e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0303 	bic.w	r3, r3, #3
 800431a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800432c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <TIM_OC3_SetConfig+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d10d      	bne.n	800435e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800435c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <TIM_OC3_SetConfig+0xd0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d113      	bne.n	800438e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800436c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	621a      	str	r2, [r3, #32]
}
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40012c00 	.word	0x40012c00

080043b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	031b      	lsls	r3, r3, #12
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <TIM_OC4_SetConfig+0x98>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d109      	bne.n	800442c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800441e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	621a      	str	r2, [r3, #32]
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	40012c00 	.word	0x40012c00

08004454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f023 0201 	bic.w	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 030a 	bic.w	r3, r3, #10
 8004490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f023 0210 	bic.w	r2, r3, #16
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	031b      	lsls	r3, r3, #12
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004524:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	f043 0307 	orr.w	r3, r3, #7
 8004530:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	609a      	str	r2, [r3, #8]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004542:	b480      	push	{r7}
 8004544:	b087      	sub	sp, #28
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800455c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	021a      	lsls	r2, r3, #8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	431a      	orrs	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	4313      	orrs	r3, r2
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	609a      	str	r2, [r3, #8]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2201      	movs	r2, #1
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1a      	ldr	r2, [r3, #32]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	401a      	ands	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1a      	ldr	r2, [r3, #32]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	431a      	orrs	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045dc:	2302      	movs	r3, #2
 80045de:	e046      	b.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a16      	ldr	r2, [pc, #88]	; (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462c:	d009      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a12      	ldr	r2, [pc, #72]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a10      	ldr	r2, [pc, #64]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d10c      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4313      	orrs	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40000400 	.word	0x40000400
 8004680:	40000800 	.word	0x40000800

08004684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800469c:	2302      	movs	r3, #2
 800469e:	e03d      	b.n	800471c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr

08004726 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr

08004738 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr

0800474a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800474a:	b084      	sub	sp, #16
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	f107 0014 	add.w	r0, r7, #20
 8004758:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	b004      	add	sp, #16
 8004768:	4770      	bx	lr

0800476a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800476a:	b480      	push	{r7}
 800476c:	b085      	sub	sp, #20
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800477a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800477e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800479e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80047a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	4013      	ands	r3, r2
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr

080047ca <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047e2:	b084      	sub	sp, #16
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	f107 0014 	add.w	r0, r7, #20
 80047f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	b004      	add	sp, #16
 8004820:	4770      	bx	lr
	...

08004824 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004824:	b480      	push	{r7}
 8004826:	b09d      	sub	sp, #116	; 0x74
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	78db      	ldrb	r3, [r3, #3]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d81f      	bhi.n	8004896 <USB_ActivateEndpoint+0x72>
 8004856:	a201      	add	r2, pc, #4	; (adr r2, 800485c <USB_ActivateEndpoint+0x38>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	0800486d 	.word	0x0800486d
 8004860:	08004889 	.word	0x08004889
 8004864:	0800489f 	.word	0x0800489f
 8004868:	0800487b 	.word	0x0800487b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800486c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004874:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004878:	e012      	b.n	80048a0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800487a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800487e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004882:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004886:	e00b      	b.n	80048a0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004888:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800488c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004890:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004894:	e004      	b.n	80048a0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800489c:	e000      	b.n	80048a0 <USB_ActivateEndpoint+0x7c>
      break;
 800489e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80048ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048be:	b29b      	uxth	r3, r3
 80048c0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d8:	b29a      	uxth	r2, r3
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80048f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004904:	b29b      	uxth	r3, r3
 8004906:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	7b1b      	ldrb	r3, [r3, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f040 8178 	bne.w	8004c02 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	785b      	ldrb	r3, [r3, #1]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 8084 	beq.w	8004a24 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004926:	b29b      	uxth	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	4413      	add	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	011a      	lsls	r2, r3, #4
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	88db      	ldrh	r3, [r3, #6]
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	b29b      	uxth	r3, r3
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	827b      	strh	r3, [r7, #18]
 800495e:	8a7b      	ldrh	r3, [r7, #18]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01b      	beq.n	80049a0 <USB_ActivateEndpoint+0x17c>
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	823b      	strh	r3, [r7, #16]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	8a3b      	ldrh	r3, [r7, #16]
 800498c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004998:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800499c:	b29b      	uxth	r3, r3
 800499e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	78db      	ldrb	r3, [r3, #3]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d020      	beq.n	80049ea <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049be:	81bb      	strh	r3, [r7, #12]
 80049c0:	89bb      	ldrh	r3, [r7, #12]
 80049c2:	f083 0320 	eor.w	r3, r3, #32
 80049c6:	81bb      	strh	r3, [r7, #12]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	441a      	add	r2, r3
 80049d2:	89bb      	ldrh	r3, [r7, #12]
 80049d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	8013      	strh	r3, [r2, #0]
 80049e8:	e2d5      	b.n	8004f96 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a00:	81fb      	strh	r3, [r7, #14]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	89fb      	ldrh	r3, [r7, #14]
 8004a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8013      	strh	r3, [r2, #0]
 8004a22:	e2b8      	b.n	8004f96 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	633b      	str	r3, [r7, #48]	; 0x30
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	4413      	add	r3, r2
 8004a36:	633b      	str	r3, [r7, #48]	; 0x30
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	011a      	lsls	r2, r3, #4
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	88db      	ldrh	r3, [r3, #6]
 8004a4c:	085b      	lsrs	r3, r3, #1
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	4413      	add	r3, r2
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	011a      	lsls	r2, r3, #4
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	4413      	add	r3, r2
 8004a76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	801a      	strh	r2, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b3e      	cmp	r3, #62	; 0x3e
 8004a92:	d91d      	bls.n	8004ad0 <USB_ActivateEndpoint+0x2ac>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <USB_ActivateEndpoint+0x28a>
 8004aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	029b      	lsls	r3, r3, #10
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	4313      	orrs	r3, r2
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	801a      	strh	r2, [r3, #0]
 8004ace:	e026      	b.n	8004b1e <USB_ActivateEndpoint+0x2fa>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <USB_ActivateEndpoint+0x2ca>
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	801a      	strh	r2, [r3, #0]
 8004aec:	e017      	b.n	8004b1e <USB_ActivateEndpoint+0x2fa>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <USB_ActivateEndpoint+0x2e4>
 8004b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b04:	3301      	adds	r3, #1
 8004b06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	029b      	lsls	r3, r3, #10
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	4313      	orrs	r3, r2
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d01b      	beq.n	8004b6e <USB_ActivateEndpoint+0x34a>
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4c:	843b      	strh	r3, [r7, #32]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	8c3b      	ldrh	r3, [r7, #32]
 8004b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d124      	bne.n	8004bc0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8c:	83bb      	strh	r3, [r7, #28]
 8004b8e:	8bbb      	ldrh	r3, [r7, #28]
 8004b90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b94:	83bb      	strh	r3, [r7, #28]
 8004b96:	8bbb      	ldrh	r3, [r7, #28]
 8004b98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b9c:	83bb      	strh	r3, [r7, #28]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	8bbb      	ldrh	r3, [r7, #28]
 8004baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	8013      	strh	r3, [r2, #0]
 8004bbe:	e1ea      	b.n	8004f96 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	83fb      	strh	r3, [r7, #30]
 8004bd8:	8bfb      	ldrh	r3, [r7, #30]
 8004bda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bde:	83fb      	strh	r3, [r7, #30]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	441a      	add	r2, r3
 8004bea:	8bfb      	ldrh	r3, [r7, #30]
 8004bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]
 8004c00:	e1c9      	b.n	8004f96 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	78db      	ldrb	r3, [r3, #3]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d11e      	bne.n	8004c48 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c20:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	8013      	strh	r3, [r2, #0]
 8004c46:	e01d      	b.n	8004c84 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	441a      	add	r2, r3
 8004c6c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c94:	4413      	add	r3, r2
 8004c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	011a      	lsls	r2, r3, #4
 8004c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	891b      	ldrh	r3, [r3, #8]
 8004cac:	085b      	lsrs	r3, r3, #1
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cb6:	801a      	strh	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	657b      	str	r3, [r7, #84]	; 0x54
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc8:	4413      	add	r3, r2
 8004cca:	657b      	str	r3, [r7, #84]	; 0x54
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	011a      	lsls	r2, r3, #4
 8004cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004cda:	653b      	str	r3, [r7, #80]	; 0x50
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	895b      	ldrh	r3, [r3, #10]
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 8093 	bne.w	8004e1c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004d06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d01b      	beq.n	8004d4a <USB_ActivateEndpoint+0x526>
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d28:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	441a      	add	r2, r3
 8004d34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004d58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01b      	beq.n	8004d9a <USB_ActivateEndpoint+0x576>
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d78:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	441a      	add	r2, r3
 8004d84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004db2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004db4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004db8:	873b      	strh	r3, [r7, #56]	; 0x38
 8004dba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004dbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dc0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]
 8004e1a:	e0bc      	b.n	8004f96 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004e2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01d      	beq.n	8004e74 <USB_ActivateEndpoint+0x650>
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	441a      	add	r2, r3
 8004e5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004e84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01d      	beq.n	8004ecc <USB_ActivateEndpoint+0x6a8>
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	441a      	add	r2, r3
 8004eb4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	78db      	ldrb	r3, [r3, #3]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d024      	beq.n	8004f1e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004eee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ef2:	f083 0320 	eor.w	r3, r3, #32
 8004ef6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	441a      	add	r2, r3
 8004f04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	8013      	strh	r3, [r2, #0]
 8004f1c:	e01d      	b.n	8004f5a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	441a      	add	r2, r3
 8004f42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	441a      	add	r2, r3
 8004f7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004f96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3774      	adds	r7, #116	; 0x74
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b08d      	sub	sp, #52	; 0x34
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	7b1b      	ldrb	r3, [r3, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f040 808e 	bne.w	80050d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	785b      	ldrb	r3, [r3, #1]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d044      	beq.n	800504a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	81bb      	strh	r3, [r7, #12]
 8004fce:	89bb      	ldrh	r3, [r7, #12]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01b      	beq.n	8005010 <USB_DeactivateEndpoint+0x6c>
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	817b      	strh	r3, [r7, #10]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	441a      	add	r2, r3
 8004ffa:	897b      	ldrh	r3, [r7, #10]
 8004ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005008:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800500c:	b29b      	uxth	r3, r3
 800500e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005026:	813b      	strh	r3, [r7, #8]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	441a      	add	r2, r3
 8005032:	893b      	ldrh	r3, [r7, #8]
 8005034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	b29b      	uxth	r3, r3
 8005046:	8013      	strh	r3, [r2, #0]
 8005048:	e192      	b.n	8005370 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	827b      	strh	r3, [r7, #18]
 8005058:	8a7b      	ldrh	r3, [r7, #18]
 800505a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01b      	beq.n	800509a <USB_DeactivateEndpoint+0xf6>
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005078:	823b      	strh	r3, [r7, #16]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	8a3b      	ldrh	r3, [r7, #16]
 8005086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b0:	81fb      	strh	r3, [r7, #14]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	441a      	add	r2, r3
 80050bc:	89fb      	ldrh	r3, [r7, #14]
 80050be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	8013      	strh	r3, [r2, #0]
 80050d2:	e14d      	b.n	8005370 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	785b      	ldrb	r3, [r3, #1]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f040 80a5 	bne.w	8005228 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	843b      	strh	r3, [r7, #32]
 80050ec:	8c3b      	ldrh	r3, [r7, #32]
 80050ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d01b      	beq.n	800512e <USB_DeactivateEndpoint+0x18a>
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510c:	83fb      	strh	r3, [r7, #30]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	441a      	add	r2, r3
 8005118:	8bfb      	ldrh	r3, [r7, #30]
 800511a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512a:	b29b      	uxth	r3, r3
 800512c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	83bb      	strh	r3, [r7, #28]
 800513c:	8bbb      	ldrh	r3, [r7, #28]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01b      	beq.n	800517e <USB_DeactivateEndpoint+0x1da>
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515c:	837b      	strh	r3, [r7, #26]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	441a      	add	r2, r3
 8005168:	8b7b      	ldrh	r3, [r7, #26]
 800516a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005176:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800517a:	b29b      	uxth	r3, r3
 800517c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005194:	833b      	strh	r3, [r7, #24]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	441a      	add	r2, r3
 80051a0:	8b3b      	ldrh	r3, [r7, #24]
 80051a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051cc:	82fb      	strh	r3, [r7, #22]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	441a      	add	r2, r3
 80051d8:	8afb      	ldrh	r3, [r7, #22]
 80051da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005204:	82bb      	strh	r3, [r7, #20]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	441a      	add	r2, r3
 8005210:	8abb      	ldrh	r3, [r7, #20]
 8005212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800521a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005222:	b29b      	uxth	r3, r3
 8005224:	8013      	strh	r3, [r2, #0]
 8005226:	e0a3      	b.n	8005370 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005236:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01b      	beq.n	8005278 <USB_DeactivateEndpoint+0x2d4>
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005274:	b29b      	uxth	r3, r3
 8005276:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005286:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01b      	beq.n	80052c8 <USB_DeactivateEndpoint+0x324>
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	441a      	add	r2, r3
 80052b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	441a      	add	r2, r3
 80052ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005316:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	441a      	add	r2, r3
 8005322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005334:	b29b      	uxth	r3, r3
 8005336:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800535c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536c:	b29b      	uxth	r3, r3
 800536e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3734      	adds	r7, #52	; 0x34
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b0c2      	sub	sp, #264	; 0x108
 8005380:	af00      	add	r7, sp, #0
 8005382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800538a:	6018      	str	r0, [r3, #0]
 800538c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005394:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800539a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	785b      	ldrb	r3, [r3, #1]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	f040 86b7 	bne.w	8006116 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80053a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d908      	bls.n	80053d6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80053c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053d4:	e007      	b.n	80053e6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80053d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80053e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	7b1b      	ldrb	r3, [r3, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d13a      	bne.n	800546c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80053f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6959      	ldr	r1, [r3, #20]
 8005402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	88da      	ldrh	r2, [r3, #6]
 800540e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005412:	b29b      	uxth	r3, r3
 8005414:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005418:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800541c:	6800      	ldr	r0, [r0, #0]
 800541e:	f001 fc9c 	bl	8006d5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543c:	b29b      	uxth	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	011a      	lsls	r2, r3, #4
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4413      	add	r3, r2
 8005458:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	f000 be1f 	b.w	80060aa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800546c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	78db      	ldrb	r3, [r3, #3]
 8005478:	2b02      	cmp	r3, #2
 800547a:	f040 8462 	bne.w	8005d42 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800547e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6a1a      	ldr	r2, [r3, #32]
 800548a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	429a      	cmp	r2, r3
 8005498:	f240 83df 	bls.w	8005c5a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800549c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80054c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	441a      	add	r2, r3
 80054e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80054e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80054f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005508:	1ad2      	subs	r2, r2, r3
 800550a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800550e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 81c7 	beq.w	80058cc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800553e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005542:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	633b      	str	r3, [r7, #48]	; 0x30
 800554a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	785b      	ldrb	r3, [r3, #1]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d177      	bne.n	800564a <USB_EPStartXfer+0x2ce>
 800555a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	62bb      	str	r3, [r7, #40]	; 0x28
 8005566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005574:	b29b      	uxth	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	4413      	add	r3, r2
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
 800557e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	011a      	lsls	r2, r3, #4
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	4413      	add	r3, r2
 8005590:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	b29b      	uxth	r3, r3
 800559c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055aa:	2b3e      	cmp	r3, #62	; 0x3e
 80055ac:	d921      	bls.n	80055f2 <USB_EPStartXfer+0x276>
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <USB_EPStartXfer+0x252>
 80055c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055c8:	3b01      	subs	r3, #1
 80055ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055d8:	b29b      	uxth	r3, r3
 80055da:	029b      	lsls	r3, r3, #10
 80055dc:	b29b      	uxth	r3, r3
 80055de:	4313      	orrs	r3, r2
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	e050      	b.n	8005694 <USB_EPStartXfer+0x318>
 80055f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <USB_EPStartXfer+0x294>
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005608:	b29a      	uxth	r2, r3
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	801a      	strh	r2, [r3, #0]
 800560e:	e041      	b.n	8005694 <USB_EPStartXfer+0x318>
 8005610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800561a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d004      	beq.n	8005630 <USB_EPStartXfer+0x2b4>
 8005626:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800562a:	3301      	adds	r3, #1
 800562c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29a      	uxth	r2, r3
 8005636:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800563a:	b29b      	uxth	r3, r3
 800563c:	029b      	lsls	r3, r3, #10
 800563e:	b29b      	uxth	r3, r3
 8005640:	4313      	orrs	r3, r2
 8005642:	b29a      	uxth	r2, r3
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	e024      	b.n	8005694 <USB_EPStartXfer+0x318>
 800564a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d11c      	bne.n	8005694 <USB_EPStartXfer+0x318>
 800565a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005668:	b29b      	uxth	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	4413      	add	r3, r2
 8005670:	633b      	str	r3, [r7, #48]	; 0x30
 8005672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	011a      	lsls	r2, r3, #4
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	4413      	add	r3, r2
 8005684:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568e:	b29a      	uxth	r2, r3
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	895b      	ldrh	r3, [r3, #10]
 80056a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6959      	ldr	r1, [r3, #20]
 80056b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80056be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056c2:	6800      	ldr	r0, [r0, #0]
 80056c4:	f001 fb49 	bl	8006d5a <USB_WritePMA>
            ep->xfer_buff += len;
 80056c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d8:	441a      	add	r2, r3
 80056da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80056e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6a1a      	ldr	r2, [r3, #32]
 80056f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d90f      	bls.n	8005722 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6a1a      	ldr	r2, [r3, #32]
 800570e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005712:	1ad2      	subs	r2, r2, r3
 8005714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	621a      	str	r2, [r3, #32]
 8005720:	e00e      	b.n	8005740 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2200      	movs	r2, #0
 800573e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d177      	bne.n	8005840 <USB_EPStartXfer+0x4c4>
 8005750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576a:	b29b      	uxth	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	4413      	add	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	011a      	lsls	r2, r3, #4
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	4413      	add	r3, r2
 8005786:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005796:	b29a      	uxth	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	801a      	strh	r2, [r3, #0]
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a0:	2b3e      	cmp	r3, #62	; 0x3e
 80057a2:	d921      	bls.n	80057e8 <USB_EPStartXfer+0x46c>
 80057a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <USB_EPStartXfer+0x448>
 80057ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057be:	3b01      	subs	r3, #1
 80057c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	029b      	lsls	r3, r3, #10
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	4313      	orrs	r3, r2
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	e056      	b.n	8005896 <USB_EPStartXfer+0x51a>
 80057e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <USB_EPStartXfer+0x48a>
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057fe:	b29a      	uxth	r2, r3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	e047      	b.n	8005896 <USB_EPStartXfer+0x51a>
 8005806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d004      	beq.n	8005826 <USB_EPStartXfer+0x4aa>
 800581c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005820:	3301      	adds	r3, #1
 8005822:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29a      	uxth	r2, r3
 800582c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005830:	b29b      	uxth	r3, r3
 8005832:	029b      	lsls	r3, r3, #10
 8005834:	b29b      	uxth	r3, r3
 8005836:	4313      	orrs	r3, r2
 8005838:	b29a      	uxth	r2, r3
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	e02a      	b.n	8005896 <USB_EPStartXfer+0x51a>
 8005840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d122      	bne.n	8005896 <USB_EPStartXfer+0x51a>
 8005850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005854:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	623b      	str	r3, [r7, #32]
 800585c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800586a:	b29b      	uxth	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	4413      	add	r3, r2
 8005872:	623b      	str	r3, [r7, #32]
 8005874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	011a      	lsls	r2, r3, #4
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	4413      	add	r3, r2
 8005886:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800588a:	61fb      	str	r3, [r7, #28]
 800588c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005890:	b29a      	uxth	r2, r3
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	891b      	ldrh	r3, [r3, #8]
 80058a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6959      	ldr	r1, [r3, #20]
 80058b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058c4:	6800      	ldr	r0, [r0, #0]
 80058c6:	f001 fa48 	bl	8006d5a <USB_WritePMA>
 80058ca:	e3ee      	b.n	80060aa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d177      	bne.n	80059cc <USB_EPStartXfer+0x650>
 80058dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80058e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fc:	4413      	add	r3, r2
 80058fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	011a      	lsls	r2, r3, #4
 800590e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005910:	4413      	add	r3, r2
 8005912:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005916:	647b      	str	r3, [r7, #68]	; 0x44
 8005918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005922:	b29a      	uxth	r2, r3
 8005924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592c:	2b3e      	cmp	r3, #62	; 0x3e
 800592e:	d921      	bls.n	8005974 <USB_EPStartXfer+0x5f8>
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <USB_EPStartXfer+0x5d4>
 8005946:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800594a:	3b01      	subs	r3, #1
 800594c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29a      	uxth	r2, r3
 8005956:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800595a:	b29b      	uxth	r3, r3
 800595c:	029b      	lsls	r3, r3, #10
 800595e:	b29b      	uxth	r3, r3
 8005960:	4313      	orrs	r3, r2
 8005962:	b29b      	uxth	r3, r3
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29a      	uxth	r2, r3
 800596e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	e056      	b.n	8005a22 <USB_EPStartXfer+0x6a6>
 8005974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <USB_EPStartXfer+0x616>
 800597c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598a:	b29a      	uxth	r2, r3
 800598c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598e:	801a      	strh	r2, [r3, #0]
 8005990:	e047      	b.n	8005a22 <USB_EPStartXfer+0x6a6>
 8005992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005996:	085b      	lsrs	r3, r3, #1
 8005998:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d004      	beq.n	80059b2 <USB_EPStartXfer+0x636>
 80059a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059ac:	3301      	adds	r3, #1
 80059ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059bc:	b29b      	uxth	r3, r3
 80059be:	029b      	lsls	r3, r3, #10
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	4313      	orrs	r3, r2
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	e02a      	b.n	8005a22 <USB_EPStartXfer+0x6a6>
 80059cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d122      	bne.n	8005a22 <USB_EPStartXfer+0x6a6>
 80059dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	653b      	str	r3, [r7, #80]	; 0x50
 80059e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fc:	4413      	add	r3, r2
 80059fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	011a      	lsls	r2, r3, #4
 8005a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a10:	4413      	add	r3, r2
 8005a12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	891b      	ldrh	r3, [r3, #8]
 8005a2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6959      	ldr	r1, [r3, #20]
 8005a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a50:	6800      	ldr	r0, [r0, #0]
 8005a52:	f001 f982 	bl	8006d5a <USB_WritePMA>
            ep->xfer_buff += len;
 8005a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a66:	441a      	add	r2, r3
 8005a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6a1a      	ldr	r2, [r3, #32]
 8005a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d90f      	bls.n	8005ab0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6a1a      	ldr	r2, [r3, #32]
 8005a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa0:	1ad2      	subs	r2, r2, r3
 8005aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	621a      	str	r2, [r3, #32]
 8005aae:	e00e      	b.n	8005ace <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8005ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d177      	bne.n	8005bda <USB_EPStartXfer+0x85e>
 8005aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0a:	4413      	add	r3, r2
 8005b0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	011a      	lsls	r2, r3, #4
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	4413      	add	r3, r2
 8005b20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
 8005b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b3c:	d921      	bls.n	8005b82 <USB_EPStartXfer+0x806>
 8005b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4c:	f003 031f 	and.w	r3, r3, #31
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d104      	bne.n	8005b5e <USB_EPStartXfer+0x7e2>
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	029b      	lsls	r3, r3, #10
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	e050      	b.n	8005c24 <USB_EPStartXfer+0x8a8>
 8005b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <USB_EPStartXfer+0x824>
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9c:	801a      	strh	r2, [r3, #0]
 8005b9e:	e041      	b.n	8005c24 <USB_EPStartXfer+0x8a8>
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <USB_EPStartXfer+0x844>
 8005bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bba:	3301      	adds	r3, #1
 8005bbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	e024      	b.n	8005c24 <USB_EPStartXfer+0x8a8>
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d11c      	bne.n	8005c24 <USB_EPStartXfer+0x8a8>
 8005bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfe:	4413      	add	r3, r2
 8005c00:	643b      	str	r3, [r7, #64]	; 0x40
 8005c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	011a      	lsls	r2, r3, #4
 8005c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c12:	4413      	add	r3, r2
 8005c14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	895b      	ldrh	r3, [r3, #10]
 8005c30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6959      	ldr	r1, [r3, #20]
 8005c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c52:	6800      	ldr	r0, [r0, #0]
 8005c54:	f001 f881 	bl	8006d5a <USB_WritePMA>
 8005c58:	e227      	b.n	80060aa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c90:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce6:	4413      	add	r3, r2
 8005ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	011a      	lsls	r2, r3, #4
 8005cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d00:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	891b      	ldrh	r3, [r3, #8]
 8005d18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6959      	ldr	r1, [r3, #20]
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d32:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d36:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d3a:	6800      	ldr	r0, [r0, #0]
 8005d3c:	f001 f80d 	bl	8006d5a <USB_WritePMA>
 8005d40:	e1b3      	b.n	80060aa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6a1a      	ldr	r2, [r3, #32]
 8005d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d52:	1ad2      	subs	r2, r2, r3
 8005d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 80c6 	beq.w	8005f14 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	673b      	str	r3, [r7, #112]	; 0x70
 8005d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d177      	bne.n	8005e94 <USB_EPStartXfer+0xb18>
 8005da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8005db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dc4:	4413      	add	r3, r2
 8005dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	011a      	lsls	r2, r3, #4
 8005dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dd8:	4413      	add	r3, r2
 8005dda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dde:	667b      	str	r3, [r7, #100]	; 0x64
 8005de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df4:	2b3e      	cmp	r3, #62	; 0x3e
 8005df6:	d921      	bls.n	8005e3c <USB_EPStartXfer+0xac0>
 8005df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d104      	bne.n	8005e18 <USB_EPStartXfer+0xa9c>
 8005e0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e12:	3b01      	subs	r3, #1
 8005e14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	029b      	lsls	r3, r3, #10
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	e050      	b.n	8005ede <USB_EPStartXfer+0xb62>
 8005e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <USB_EPStartXfer+0xade>
 8005e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	e041      	b.n	8005ede <USB_EPStartXfer+0xb62>
 8005e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <USB_EPStartXfer+0xafe>
 8005e70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e74:	3301      	adds	r3, #1
 8005e76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	029b      	lsls	r3, r3, #10
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	e024      	b.n	8005ede <USB_EPStartXfer+0xb62>
 8005e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	785b      	ldrb	r3, [r3, #1]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d11c      	bne.n	8005ede <USB_EPStartXfer+0xb62>
 8005ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eb8:	4413      	add	r3, r2
 8005eba:	673b      	str	r3, [r7, #112]	; 0x70
 8005ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	011a      	lsls	r2, r3, #4
 8005eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ecc:	4413      	add	r3, r2
 8005ece:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005edc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	895b      	ldrh	r3, [r3, #10]
 8005eea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6959      	ldr	r1, [r3, #20]
 8005efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f04:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f08:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f0c:	6800      	ldr	r0, [r0, #0]
 8005f0e:	f000 ff24 	bl	8006d5a <USB_WritePMA>
 8005f12:	e0ca      	b.n	80060aa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d177      	bne.n	8006014 <USB_EPStartXfer+0xc98>
 8005f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	461a      	mov	r2, r3
 8005f42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f44:	4413      	add	r3, r2
 8005f46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	011a      	lsls	r2, r3, #4
 8005f56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f58:	4413      	add	r3, r2
 8005f5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f74:	2b3e      	cmp	r3, #62	; 0x3e
 8005f76:	d921      	bls.n	8005fbc <USB_EPStartXfer+0xc40>
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7c:	095b      	lsrs	r3, r3, #5
 8005f7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d104      	bne.n	8005f98 <USB_EPStartXfer+0xc1c>
 8005f8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f92:	3b01      	subs	r3, #1
 8005f94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	029b      	lsls	r3, r3, #10
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	e05c      	b.n	8006076 <USB_EPStartXfer+0xcfa>
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <USB_EPStartXfer+0xc5e>
 8005fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd6:	801a      	strh	r2, [r3, #0]
 8005fd8:	e04d      	b.n	8006076 <USB_EPStartXfer+0xcfa>
 8005fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fde:	085b      	lsrs	r3, r3, #1
 8005fe0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d004      	beq.n	8005ffa <USB_EPStartXfer+0xc7e>
 8005ff0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006004:	b29b      	uxth	r3, r3
 8006006:	029b      	lsls	r3, r3, #10
 8006008:	b29b      	uxth	r3, r3
 800600a:	4313      	orrs	r3, r2
 800600c:	b29a      	uxth	r2, r3
 800600e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006010:	801a      	strh	r2, [r3, #0]
 8006012:	e030      	b.n	8006076 <USB_EPStartXfer+0xcfa>
 8006014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d128      	bne.n	8006076 <USB_EPStartXfer+0xcfa>
 8006024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006040:	b29b      	uxth	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006048:	4413      	add	r3, r2
 800604a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800604e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	011a      	lsls	r2, r3, #4
 800605c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006060:	4413      	add	r3, r2
 8006062:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800606a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606e:	b29a      	uxth	r2, r3
 8006070:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006074:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	891b      	ldrh	r3, [r3, #8]
 8006082:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6959      	ldr	r1, [r3, #20]
 8006092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006096:	b29b      	uxth	r3, r3
 8006098:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800609c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060a0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80060a4:	6800      	ldr	r0, [r0, #0]
 80060a6:	f000 fe58 	bl	8006d5a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80060aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d0:	817b      	strh	r3, [r7, #10]
 80060d2:	897b      	ldrh	r3, [r7, #10]
 80060d4:	f083 0310 	eor.w	r3, r3, #16
 80060d8:	817b      	strh	r3, [r7, #10]
 80060da:	897b      	ldrh	r3, [r7, #10]
 80060dc:	f083 0320 	eor.w	r3, r3, #32
 80060e0:	817b      	strh	r3, [r7, #10]
 80060e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	441a      	add	r2, r3
 80060fc:	897b      	ldrh	r3, [r7, #10]
 80060fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800610e:	b29b      	uxth	r3, r3
 8006110:	8013      	strh	r3, [r2, #0]
 8006112:	f000 bcde 	b.w	8006ad2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	7b1b      	ldrb	r3, [r3, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	f040 80bb 	bne.w	800629e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	699a      	ldr	r2, [r3, #24]
 8006134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	429a      	cmp	r2, r3
 8006142:	d917      	bls.n	8006174 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006164:	1ad2      	subs	r2, r2, r3
 8006166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	619a      	str	r2, [r3, #24]
 8006172:	e00e      	b.n	8006192 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2200      	movs	r2, #0
 8006190:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006196:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061b6:	4413      	add	r3, r2
 80061b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	011a      	lsls	r2, r3, #4
 80061ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061ce:	4413      	add	r3, r2
 80061d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f0:	2b3e      	cmp	r3, #62	; 0x3e
 80061f2:	d924      	bls.n	800623e <USB_EPStartXfer+0xec2>
 80061f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	2b00      	cmp	r3, #0
 8006208:	d104      	bne.n	8006214 <USB_EPStartXfer+0xe98>
 800620a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800620e:	3b01      	subs	r3, #1
 8006210:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29a      	uxth	r2, r3
 800621c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006220:	b29b      	uxth	r3, r3
 8006222:	029b      	lsls	r3, r3, #10
 8006224:	b29b      	uxth	r3, r3
 8006226:	4313      	orrs	r3, r2
 8006228:	b29b      	uxth	r3, r3
 800622a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006232:	b29a      	uxth	r2, r3
 8006234:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006238:	801a      	strh	r2, [r3, #0]
 800623a:	f000 bc10 	b.w	8006a5e <USB_EPStartXfer+0x16e2>
 800623e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10c      	bne.n	8006260 <USB_EPStartXfer+0xee4>
 8006246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006256:	b29a      	uxth	r2, r3
 8006258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800625c:	801a      	strh	r2, [r3, #0]
 800625e:	e3fe      	b.n	8006a5e <USB_EPStartXfer+0x16e2>
 8006260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006264:	085b      	lsrs	r3, r3, #1
 8006266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800626a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <USB_EPStartXfer+0xf04>
 8006276:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800627a:	3301      	adds	r3, #1
 800627c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29a      	uxth	r2, r3
 8006288:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800628c:	b29b      	uxth	r3, r3
 800628e:	029b      	lsls	r3, r3, #10
 8006290:	b29b      	uxth	r3, r3
 8006292:	4313      	orrs	r3, r2
 8006294:	b29a      	uxth	r2, r3
 8006296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	e3df      	b.n	8006a5e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800629e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	78db      	ldrb	r3, [r3, #3]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	f040 8218 	bne.w	80066e0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80062b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f040 809d 	bne.w	80063fc <USB_EPStartXfer+0x1080>
 80062c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062de:	b29b      	uxth	r3, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062e6:	4413      	add	r3, r2
 80062e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	011a      	lsls	r2, r3, #4
 80062fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062fe:	4413      	add	r3, r2
 8006300:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006308:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006314:	b29a      	uxth	r2, r3
 8006316:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800631a:	801a      	strh	r2, [r3, #0]
 800631c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	2b3e      	cmp	r3, #62	; 0x3e
 800632a:	d92b      	bls.n	8006384 <USB_EPStartXfer+0x1008>
 800632c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800633e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	2b00      	cmp	r3, #0
 8006350:	d104      	bne.n	800635c <USB_EPStartXfer+0xfe0>
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	3b01      	subs	r3, #1
 8006358:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800635c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b29a      	uxth	r2, r3
 8006364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006368:	b29b      	uxth	r3, r3
 800636a:	029b      	lsls	r3, r3, #10
 800636c:	b29b      	uxth	r3, r3
 800636e:	4313      	orrs	r3, r2
 8006370:	b29b      	uxth	r3, r3
 8006372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637a:	b29a      	uxth	r2, r3
 800637c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006380:	801a      	strh	r2, [r3, #0]
 8006382:	e070      	b.n	8006466 <USB_EPStartXfer+0x10ea>
 8006384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10c      	bne.n	80063ae <USB_EPStartXfer+0x1032>
 8006394:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063aa:	801a      	strh	r2, [r3, #0]
 80063ac:	e05b      	b.n	8006466 <USB_EPStartXfer+0x10ea>
 80063ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	085b      	lsrs	r3, r3, #1
 80063bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <USB_EPStartXfer+0x1062>
 80063d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d8:	3301      	adds	r3, #1
 80063da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	029b      	lsls	r3, r3, #10
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	4313      	orrs	r3, r2
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063f8:	801a      	strh	r2, [r3, #0]
 80063fa:	e034      	b.n	8006466 <USB_EPStartXfer+0x10ea>
 80063fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	785b      	ldrb	r3, [r3, #1]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d12c      	bne.n	8006466 <USB_EPStartXfer+0x10ea>
 800640c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800641a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006428:	b29b      	uxth	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006430:	4413      	add	r3, r2
 8006432:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	011a      	lsls	r2, r3, #4
 8006444:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006448:	4413      	add	r3, r2
 800644a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800644e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	b29a      	uxth	r2, r3
 8006460:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006464:	801a      	strh	r2, [r3, #0]
 8006466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	2b00      	cmp	r3, #0
 8006482:	f040 809d 	bne.w	80065c0 <USB_EPStartXfer+0x1244>
 8006486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064aa:	4413      	add	r3, r2
 80064ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	011a      	lsls	r2, r3, #4
 80064be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064c2:	4413      	add	r3, r2
 80064c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064d8:	b29a      	uxth	r2, r3
 80064da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064de:	801a      	strh	r2, [r3, #0]
 80064e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b3e      	cmp	r3, #62	; 0x3e
 80064ee:	d92b      	bls.n	8006548 <USB_EPStartXfer+0x11cc>
 80064f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 031f 	and.w	r3, r3, #31
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <USB_EPStartXfer+0x11a4>
 8006516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800651a:	3b01      	subs	r3, #1
 800651c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29a      	uxth	r2, r3
 8006528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652c:	b29b      	uxth	r3, r3
 800652e:	029b      	lsls	r3, r3, #10
 8006530:	b29b      	uxth	r3, r3
 8006532:	4313      	orrs	r3, r2
 8006534:	b29b      	uxth	r3, r3
 8006536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800653e:	b29a      	uxth	r2, r3
 8006540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006544:	801a      	strh	r2, [r3, #0]
 8006546:	e069      	b.n	800661c <USB_EPStartXfer+0x12a0>
 8006548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10c      	bne.n	8006572 <USB_EPStartXfer+0x11f6>
 8006558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006568:	b29a      	uxth	r2, r3
 800656a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800656e:	801a      	strh	r2, [r3, #0]
 8006570:	e054      	b.n	800661c <USB_EPStartXfer+0x12a0>
 8006572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d004      	beq.n	80065a2 <USB_EPStartXfer+0x1226>
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659c:	3301      	adds	r3, #1
 800659e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	029b      	lsls	r3, r3, #10
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	4313      	orrs	r3, r2
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	e02d      	b.n	800661c <USB_EPStartXfer+0x12a0>
 80065c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	785b      	ldrb	r3, [r3, #1]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d125      	bne.n	800661c <USB_EPStartXfer+0x12a0>
 80065d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065de:	b29b      	uxth	r3, r3
 80065e0:	461a      	mov	r2, r3
 80065e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065e6:	4413      	add	r3, r2
 80065e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80065ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	011a      	lsls	r2, r3, #4
 80065fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065fe:	4413      	add	r3, r2
 8006600:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006604:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	b29a      	uxth	r2, r3
 8006616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800661a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800661c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 8218 	beq.w	8006a5e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800662e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800664e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <USB_EPStartXfer+0x12ea>
 800665a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10d      	bne.n	8006682 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006666:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800666a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800666e:	2b00      	cmp	r3, #0
 8006670:	f040 81f5 	bne.w	8006a5e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006674:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	f040 81ee 	bne.w	8006a5e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	441a      	add	r2, r3
 80066c6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80066ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8013      	strh	r3, [r2, #0]
 80066de:	e1be      	b.n	8006a5e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80066e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	78db      	ldrb	r3, [r3, #3]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	f040 81b4 	bne.w	8006a5a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80066f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	429a      	cmp	r2, r3
 800670c:	d917      	bls.n	800673e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800670e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800671e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672e:	1ad2      	subs	r2, r2, r3
 8006730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	619a      	str	r2, [r3, #24]
 800673c:	e00e      	b.n	800675c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800673e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800674e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2200      	movs	r2, #0
 800675a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800675c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	2b00      	cmp	r3, #0
 800676a:	f040 8085 	bne.w	8006878 <USB_EPStartXfer+0x14fc>
 800676e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800677c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678a:	b29b      	uxth	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006792:	4413      	add	r3, r2
 8006794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	011a      	lsls	r2, r3, #4
 80067a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067aa:	4413      	add	r3, r2
 80067ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067c6:	801a      	strh	r2, [r3, #0]
 80067c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067cc:	2b3e      	cmp	r3, #62	; 0x3e
 80067ce:	d923      	bls.n	8006818 <USB_EPStartXfer+0x149c>
 80067d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d104      	bne.n	80067f0 <USB_EPStartXfer+0x1474>
 80067e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ea:	3b01      	subs	r3, #1
 80067ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	029b      	lsls	r3, r3, #10
 8006800:	b29b      	uxth	r3, r3
 8006802:	4313      	orrs	r3, r2
 8006804:	b29b      	uxth	r3, r3
 8006806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800680a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800680e:	b29a      	uxth	r2, r3
 8006810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006814:	801a      	strh	r2, [r3, #0]
 8006816:	e060      	b.n	80068da <USB_EPStartXfer+0x155e>
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10c      	bne.n	800683a <USB_EPStartXfer+0x14be>
 8006820:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006830:	b29a      	uxth	r2, r3
 8006832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006836:	801a      	strh	r2, [r3, #0]
 8006838:	e04f      	b.n	80068da <USB_EPStartXfer+0x155e>
 800683a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d004      	beq.n	800685a <USB_EPStartXfer+0x14de>
 8006850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006854:	3301      	adds	r3, #1
 8006856:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800685a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29a      	uxth	r2, r3
 8006862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006866:	b29b      	uxth	r3, r3
 8006868:	029b      	lsls	r3, r3, #10
 800686a:	b29b      	uxth	r3, r3
 800686c:	4313      	orrs	r3, r2
 800686e:	b29a      	uxth	r2, r3
 8006870:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006874:	801a      	strh	r2, [r3, #0]
 8006876:	e030      	b.n	80068da <USB_EPStartXfer+0x155e>
 8006878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d128      	bne.n	80068da <USB_EPStartXfer+0x155e>
 8006888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ac:	4413      	add	r3, r2
 80068ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80068b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	011a      	lsls	r2, r3, #4
 80068c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068c4:	4413      	add	r3, r2
 80068c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80068d8:	801a      	strh	r2, [r3, #0]
 80068da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 8085 	bne.w	8006a04 <USB_EPStartXfer+0x1688>
 80068fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006916:	b29b      	uxth	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800691e:	4413      	add	r3, r2
 8006920:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	011a      	lsls	r2, r3, #4
 8006932:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006936:	4413      	add	r3, r2
 8006938:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800693c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	b29b      	uxth	r3, r3
 8006948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800694c:	b29a      	uxth	r2, r3
 800694e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006958:	2b3e      	cmp	r3, #62	; 0x3e
 800695a:	d923      	bls.n	80069a4 <USB_EPStartXfer+0x1628>
 800695c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006960:	095b      	lsrs	r3, r3, #5
 8006962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	2b00      	cmp	r3, #0
 8006970:	d104      	bne.n	800697c <USB_EPStartXfer+0x1600>
 8006972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006976:	3b01      	subs	r3, #1
 8006978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800697c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	b29a      	uxth	r2, r3
 8006984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006988:	b29b      	uxth	r3, r3
 800698a:	029b      	lsls	r3, r3, #10
 800698c:	b29b      	uxth	r3, r3
 800698e:	4313      	orrs	r3, r2
 8006990:	b29b      	uxth	r3, r3
 8006992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800699a:	b29a      	uxth	r2, r3
 800699c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069a0:	801a      	strh	r2, [r3, #0]
 80069a2:	e05c      	b.n	8006a5e <USB_EPStartXfer+0x16e2>
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10c      	bne.n	80069c6 <USB_EPStartXfer+0x164a>
 80069ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069bc:	b29a      	uxth	r2, r3
 80069be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069c2:	801a      	strh	r2, [r3, #0]
 80069c4:	e04b      	b.n	8006a5e <USB_EPStartXfer+0x16e2>
 80069c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ca:	085b      	lsrs	r3, r3, #1
 80069cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <USB_EPStartXfer+0x166a>
 80069dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069e0:	3301      	adds	r3, #1
 80069e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	029b      	lsls	r3, r3, #10
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	4313      	orrs	r3, r2
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e02c      	b.n	8006a5e <USB_EPStartXfer+0x16e2>
 8006a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d124      	bne.n	8006a5e <USB_EPStartXfer+0x16e2>
 8006a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	011a      	lsls	r2, r3, #4
 8006a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a42:	4413      	add	r3, r2
 8006a44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a56:	801a      	strh	r2, [r3, #0]
 8006a58:	e001      	b.n	8006a5e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e03a      	b.n	8006ad4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a84:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006a88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006a94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a9c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	441a      	add	r2, r3
 8006aba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	785b      	ldrb	r3, [r3, #1]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d020      	beq.n	8006b32 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b06:	81bb      	strh	r3, [r7, #12]
 8006b08:	89bb      	ldrh	r3, [r7, #12]
 8006b0a:	f083 0310 	eor.w	r3, r3, #16
 8006b0e:	81bb      	strh	r3, [r7, #12]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	89bb      	ldrh	r3, [r7, #12]
 8006b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	8013      	strh	r3, [r2, #0]
 8006b30:	e01f      	b.n	8006b72 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b48:	81fb      	strh	r3, [r7, #14]
 8006b4a:	89fb      	ldrh	r3, [r7, #14]
 8006b4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b50:	81fb      	strh	r3, [r7, #14]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	441a      	add	r2, r3
 8006b5c:	89fb      	ldrh	r3, [r7, #14]
 8006b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr

08006b7e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b087      	sub	sp, #28
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	7b1b      	ldrb	r3, [r3, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f040 809d 	bne.w	8006ccc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d04c      	beq.n	8006c34 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	823b      	strh	r3, [r7, #16]
 8006ba8:	8a3b      	ldrh	r3, [r7, #16]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01b      	beq.n	8006bea <USB_EPClearStall+0x6c>
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc8:	81fb      	strh	r3, [r7, #14]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	441a      	add	r2, r3
 8006bd4:	89fb      	ldrh	r3, [r7, #14]
 8006bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	78db      	ldrb	r3, [r3, #3]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d06c      	beq.n	8006ccc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c08:	81bb      	strh	r3, [r7, #12]
 8006c0a:	89bb      	ldrh	r3, [r7, #12]
 8006c0c:	f083 0320 	eor.w	r3, r3, #32
 8006c10:	81bb      	strh	r3, [r7, #12]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	441a      	add	r2, r3
 8006c1c:	89bb      	ldrh	r3, [r7, #12]
 8006c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	8013      	strh	r3, [r2, #0]
 8006c32:	e04b      	b.n	8006ccc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	82fb      	strh	r3, [r7, #22]
 8006c42:	8afb      	ldrh	r3, [r7, #22]
 8006c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01b      	beq.n	8006c84 <USB_EPClearStall+0x106>
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	82bb      	strh	r3, [r7, #20]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	441a      	add	r2, r3
 8006c6e:	8abb      	ldrh	r3, [r7, #20]
 8006c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9a:	827b      	strh	r3, [r7, #18]
 8006c9c:	8a7b      	ldrh	r3, [r7, #18]
 8006c9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ca2:	827b      	strh	r3, [r7, #18]
 8006ca4:	8a7b      	ldrh	r3, [r7, #18]
 8006ca6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006caa:	827b      	strh	r3, [r7, #18]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	441a      	add	r2, r3
 8006cb6:	8a7b      	ldrh	r3, [r7, #18]
 8006cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr

08006cd8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006ce4:	78fb      	ldrb	r3, [r7, #3]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2280      	movs	r2, #128	; 0x80
 8006cee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr

08006d12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr

08006d26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006d38:	68fb      	ldr	r3, [r7, #12]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc80      	pop	{r7}
 8006d42:	4770      	bx	lr

08006d44 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr

08006d5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b08b      	sub	sp, #44	; 0x2c
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	4611      	mov	r1, r2
 8006d66:	461a      	mov	r2, r3
 8006d68:	460b      	mov	r3, r1
 8006d6a:	80fb      	strh	r3, [r7, #6]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d70:	88bb      	ldrh	r3, [r7, #4]
 8006d72:	3301      	adds	r3, #1
 8006d74:	085b      	lsrs	r3, r3, #1
 8006d76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d80:	88fb      	ldrh	r3, [r7, #6]
 8006d82:	005a      	lsls	r2, r3, #1
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d8c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
 8006d92:	e01e      	b.n	8006dd2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	021b      	lsls	r3, r3, #8
 8006da2:	b21a      	sxth	r2, r3
 8006da4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	b21b      	sxth	r3, r3
 8006dac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	8a7a      	ldrh	r2, [r7, #18]
 8006db2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	3302      	adds	r3, #2
 8006db8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	3302      	adds	r3, #2
 8006dbe:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1dd      	bne.n	8006d94 <USB_WritePMA+0x3a>
  }
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	372c      	adds	r7, #44	; 0x2c
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b08b      	sub	sp, #44	; 0x2c
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4611      	mov	r1, r2
 8006df0:	461a      	mov	r2, r3
 8006df2:	460b      	mov	r3, r1
 8006df4:	80fb      	strh	r3, [r7, #6]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006dfa:	88bb      	ldrh	r3, [r7, #4]
 8006dfc:	085b      	lsrs	r3, r3, #1
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	005a      	lsls	r2, r3, #1
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e16:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1c:	e01b      	b.n	8006e56 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	3302      	adds	r3, #2
 8006e2a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	3301      	adds	r3, #1
 8006e38:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	0a1b      	lsrs	r3, r3, #8
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	3301      	adds	r3, #1
 8006e48:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	3302      	adds	r3, #2
 8006e4e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	3b01      	subs	r3, #1
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e0      	bne.n	8006e1e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006e5c:	88bb      	ldrh	r3, [r7, #4]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	701a      	strb	r2, [r3, #0]
  }
}
 8006e78:	bf00      	nop
 8006e7a:	372c      	adds	r7, #44	; 0x2c
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bc80      	pop	{r7}
 8006e80:	4770      	bx	lr

08006e82 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	7c1b      	ldrb	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d115      	bne.n	8006ec6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	2181      	movs	r1, #129	; 0x81
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 fe67 	bl	8008b76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 fe5d 	bl	8008b76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006ec4:	e012      	b.n	8006eec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ec6:	2340      	movs	r3, #64	; 0x40
 8006ec8:	2202      	movs	r2, #2
 8006eca:	2181      	movs	r1, #129	; 0x81
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 fe52 	bl	8008b76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ed8:	2340      	movs	r3, #64	; 0x40
 8006eda:	2202      	movs	r2, #2
 8006edc:	2101      	movs	r1, #1
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 fe49 	bl	8008b76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006eec:	2308      	movs	r3, #8
 8006eee:	2203      	movs	r2, #3
 8006ef0:	2182      	movs	r1, #130	; 0x82
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 fe3f 	bl	8008b76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006efe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006f02:	f001 ff5f 	bl	8008dc4 <USBD_static_malloc>
 8006f06:	4602      	mov	r2, r0
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d102      	bne.n	8006f1e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	73fb      	strb	r3, [r7, #15]
 8006f1c:	e026      	b.n	8006f6c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f24:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	7c1b      	ldrb	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d109      	bne.n	8006f5c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f52:	2101      	movs	r1, #1
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 feff 	bl	8008d58 <USBD_LL_PrepareReceive>
 8006f5a:	e007      	b.n	8006f6c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f62:	2340      	movs	r3, #64	; 0x40
 8006f64:	2101      	movs	r1, #1
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 fef6 	bl	8008d58 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f86:	2181      	movs	r1, #129	; 0x81
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fe1a 	bl	8008bc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f94:	2101      	movs	r1, #1
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 fe13 	bl	8008bc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006fa4:	2182      	movs	r1, #130	; 0x82
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 fe0b 	bl	8008bc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00e      	beq.n	8006fda <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 ff05 	bl	8008ddc <USBD_static_free>
    pdev->pClassData = NULL;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800700a:	2b00      	cmp	r3, #0
 800700c:	d039      	beq.n	8007082 <USBD_CDC_Setup+0x9e>
 800700e:	2b20      	cmp	r3, #32
 8007010:	d17f      	bne.n	8007112 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	88db      	ldrh	r3, [r3, #6]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d029      	beq.n	800706e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	b25b      	sxtb	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	da11      	bge.n	8007048 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007030:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	88d2      	ldrh	r2, [r2, #6]
 8007036:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007038:	6939      	ldr	r1, [r7, #16]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	88db      	ldrh	r3, [r3, #6]
 800703e:	461a      	mov	r2, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 f9da 	bl	80083fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007046:	e06b      	b.n	8007120 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	785a      	ldrb	r2, [r3, #1]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	88db      	ldrh	r3, [r3, #6]
 8007056:	b2da      	uxtb	r2, r3
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800705e:	6939      	ldr	r1, [r7, #16]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	88db      	ldrh	r3, [r3, #6]
 8007064:	461a      	mov	r2, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 f9f5 	bl	8008456 <USBD_CtlPrepareRx>
      break;
 800706c:	e058      	b.n	8007120 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	7850      	ldrb	r0, [r2, #1]
 800707a:	2200      	movs	r2, #0
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	4798      	blx	r3
      break;
 8007080:	e04e      	b.n	8007120 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	785b      	ldrb	r3, [r3, #1]
 8007086:	2b0b      	cmp	r3, #11
 8007088:	d02e      	beq.n	80070e8 <USBD_CDC_Setup+0x104>
 800708a:	2b0b      	cmp	r3, #11
 800708c:	dc38      	bgt.n	8007100 <USBD_CDC_Setup+0x11c>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <USBD_CDC_Setup+0xb4>
 8007092:	2b0a      	cmp	r3, #10
 8007094:	d014      	beq.n	80070c0 <USBD_CDC_Setup+0xdc>
 8007096:	e033      	b.n	8007100 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d107      	bne.n	80070b2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80070a2:	f107 030c 	add.w	r3, r7, #12
 80070a6:	2202      	movs	r2, #2
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 f9a5 	bl	80083fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070b0:	e02e      	b.n	8007110 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 f936 	bl	8008326 <USBD_CtlError>
            ret = USBD_FAIL;
 80070ba:	2302      	movs	r3, #2
 80070bc:	75fb      	strb	r3, [r7, #23]
          break;
 80070be:	e027      	b.n	8007110 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d107      	bne.n	80070da <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80070ca:	f107 030f 	add.w	r3, r7, #15
 80070ce:	2201      	movs	r2, #1
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 f991 	bl	80083fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070d8:	e01a      	b.n	8007110 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f922 	bl	8008326 <USBD_CtlError>
            ret = USBD_FAIL;
 80070e2:	2302      	movs	r3, #2
 80070e4:	75fb      	strb	r3, [r7, #23]
          break;
 80070e6:	e013      	b.n	8007110 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d00d      	beq.n	800710e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 f916 	bl	8008326 <USBD_CtlError>
            ret = USBD_FAIL;
 80070fa:	2302      	movs	r3, #2
 80070fc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80070fe:	e006      	b.n	800710e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 f90f 	bl	8008326 <USBD_CtlError>
          ret = USBD_FAIL;
 8007108:	2302      	movs	r3, #2
 800710a:	75fb      	strb	r3, [r7, #23]
          break;
 800710c:	e000      	b.n	8007110 <USBD_CDC_Setup+0x12c>
          break;
 800710e:	bf00      	nop
      }
      break;
 8007110:	e006      	b.n	8007120 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 f906 	bl	8008326 <USBD_CtlError>
      ret = USBD_FAIL;
 800711a:	2302      	movs	r3, #2
 800711c:	75fb      	strb	r3, [r7, #23]
      break;
 800711e:	bf00      	nop
  }

  return ret;
 8007120:	7dfb      	ldrb	r3, [r7, #23]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007144:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800714c:	2b00      	cmp	r3, #0
 800714e:	d03a      	beq.n	80071c6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007150:	78fa      	ldrb	r2, [r7, #3]
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	440b      	add	r3, r1
 800715e:	331c      	adds	r3, #28
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d029      	beq.n	80071ba <USBD_CDC_DataIn+0x90>
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	331c      	adds	r3, #28
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	78f9      	ldrb	r1, [r7, #3]
 800717a:	68b8      	ldr	r0, [r7, #8]
 800717c:	460b      	mov	r3, r1
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	440b      	add	r3, r1
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	4403      	add	r3, r0
 8007186:	3338      	adds	r3, #56	; 0x38
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	fbb2 f1f3 	udiv	r1, r2, r3
 800718e:	fb01 f303 	mul.w	r3, r1, r3
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d110      	bne.n	80071ba <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007198:	78fa      	ldrb	r2, [r7, #3]
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	4613      	mov	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	331c      	adds	r3, #28
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80071ac:	78f9      	ldrb	r1, [r7, #3]
 80071ae:	2300      	movs	r3, #0
 80071b0:	2200      	movs	r2, #0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 fdad 	bl	8008d12 <USBD_LL_Transmit>
 80071b8:	e003      	b.n	80071c2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e000      	b.n	80071c8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80071c6:	2302      	movs	r3, #2
  }
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071e4:	78fb      	ldrb	r3, [r7, #3]
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fdd8 	bl	8008d9e <USBD_LL_GetRxDataSize>
 80071ee:	4602      	mov	r2, r0
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00d      	beq.n	800721c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007214:	4611      	mov	r1, r2
 8007216:	4798      	blx	r3

    return USBD_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	e000      	b.n	800721e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800721c:	2302      	movs	r3, #2
  }
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007234:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800723c:	2b00      	cmp	r3, #0
 800723e:	d015      	beq.n	800726c <USBD_CDC_EP0_RxReady+0x46>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007246:	2bff      	cmp	r3, #255	; 0xff
 8007248:	d010      	beq.n	800726c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007258:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007260:	b292      	uxth	r2, r2
 8007262:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	22ff      	movs	r2, #255	; 0xff
 8007268:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2243      	movs	r2, #67	; 0x43
 8007284:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007286:	4b03      	ldr	r3, [pc, #12]	; (8007294 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	2000009c 	.word	0x2000009c

08007298 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2243      	movs	r2, #67	; 0x43
 80072a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80072a6:	4b03      	ldr	r3, [pc, #12]	; (80072b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bc80      	pop	{r7}
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	20000058 	.word	0x20000058

080072b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2243      	movs	r2, #67	; 0x43
 80072c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80072c6:	4b03      	ldr	r3, [pc, #12]	; (80072d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bc80      	pop	{r7}
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	200000e0 	.word	0x200000e0

080072d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	220a      	movs	r2, #10
 80072e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80072e6:	4b03      	ldr	r3, [pc, #12]	; (80072f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bc80      	pop	{r7}
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20000014 	.word	0x20000014

080072f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007302:	2302      	movs	r3, #2
 8007304:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d005      	beq.n	8007318 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007338:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007342:	88fa      	ldrh	r2, [r7, #6]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	bc80      	pop	{r7}
 8007354:	4770      	bx	lr

08007356 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007356:	b480      	push	{r7}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007366:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr

0800737c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d017      	beq.n	80073c6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	7c1b      	ldrb	r3, [r3, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d109      	bne.n	80073b2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073a8:	2101      	movs	r1, #1
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fcd4 	bl	8008d58 <USBD_LL_PrepareReceive>
 80073b0:	e007      	b.n	80073c2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073b8:	2340      	movs	r3, #64	; 0x40
 80073ba:	2101      	movs	r1, #1
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 fccb 	bl	8008d58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	e000      	b.n	80073c8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80073c6:	2302      	movs	r3, #2
  }
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	4613      	mov	r3, r2
 80073dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80073e4:	2302      	movs	r3, #2
 80073e6:	e01a      	b.n	800741e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	79fa      	ldrb	r2, [r7, #7]
 8007414:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f001 fb38 	bl	8008a8c <USBD_LL_Init>

  return USBD_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d006      	beq.n	8007448 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
 8007446:	e001      	b.n	800744c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007448:	2302      	movs	r3, #2
 800744a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr

08007458 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 fb6d 	bl	8008b40 <USBD_LL_Start>

  return USBD_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	bc80      	pop	{r7}
 8007482:	4770      	bx	lr

08007484 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007490:	2302      	movs	r3, #2
 8007492:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00c      	beq.n	80074b8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	4611      	mov	r1, r2
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	4798      	blx	r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b082      	sub	sp, #8
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	78fa      	ldrb	r2, [r7, #3]
 80074d8:	4611      	mov	r1, r2
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3

  return USBD_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fed7 	bl	80082ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800750e:	461a      	mov	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800751c:	f003 031f 	and.w	r3, r3, #31
 8007520:	2b02      	cmp	r3, #2
 8007522:	d016      	beq.n	8007552 <USBD_LL_SetupStage+0x6a>
 8007524:	2b02      	cmp	r3, #2
 8007526:	d81c      	bhi.n	8007562 <USBD_LL_SetupStage+0x7a>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <USBD_LL_SetupStage+0x4a>
 800752c:	2b01      	cmp	r3, #1
 800752e:	d008      	beq.n	8007542 <USBD_LL_SetupStage+0x5a>
 8007530:	e017      	b.n	8007562 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f9ca 	bl	80078d4 <USBD_StdDevReq>
      break;
 8007540:	e01a      	b.n	8007578 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fa2c 	bl	80079a8 <USBD_StdItfReq>
      break;
 8007550:	e012      	b.n	8007578 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa6c 	bl	8007a38 <USBD_StdEPReq>
      break;
 8007560:	e00a      	b.n	8007578 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007568:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800756c:	b2db      	uxtb	r3, r3
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 fb45 	bl	8008c00 <USBD_LL_StallEP>
      break;
 8007576:	bf00      	nop
  }

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b086      	sub	sp, #24
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	460b      	mov	r3, r1
 800758c:	607a      	str	r2, [r7, #4]
 800758e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d14b      	bne.n	800762e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800759c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d134      	bne.n	8007612 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	68da      	ldr	r2, [r3, #12]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d919      	bls.n	80075e8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	1ad2      	subs	r2, r2, r3
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d203      	bcs.n	80075d6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	e002      	b.n	80075dc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075da:	b29b      	uxth	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 ff56 	bl	8008492 <USBD_CtlContinueRx>
 80075e6:	e038      	b.n	800765a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d105      	bne.n	800760a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 ff53 	bl	80084b6 <USBD_CtlSendStatus>
 8007610:	e023      	b.n	800765a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007618:	2b05      	cmp	r3, #5
 800761a:	d11e      	bne.n	800765a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007624:	2100      	movs	r1, #0
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f001 faea 	bl	8008c00 <USBD_LL_StallEP>
 800762c:	e015      	b.n	800765a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00d      	beq.n	8007656 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007640:	2b03      	cmp	r3, #3
 8007642:	d108      	bne.n	8007656 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	7afa      	ldrb	r2, [r7, #11]
 800764e:	4611      	mov	r1, r2
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	4798      	blx	r3
 8007654:	e001      	b.n	800765a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007656:	2302      	movs	r3, #2
 8007658:	e000      	b.n	800765c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	460b      	mov	r3, r1
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007672:	7afb      	ldrb	r3, [r7, #11]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d17f      	bne.n	8007778 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3314      	adds	r3, #20
 800767c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007684:	2b02      	cmp	r3, #2
 8007686:	d15c      	bne.n	8007742 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	429a      	cmp	r2, r3
 8007692:	d915      	bls.n	80076c0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	1ad2      	subs	r2, r2, r3
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	6879      	ldr	r1, [r7, #4]
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fec0 	bl	8008432 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076b2:	2300      	movs	r3, #0
 80076b4:	2200      	movs	r2, #0
 80076b6:	2100      	movs	r1, #0
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f001 fb4d 	bl	8008d58 <USBD_LL_PrepareReceive>
 80076be:	e04e      	b.n	800775e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	6912      	ldr	r2, [r2, #16]
 80076c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80076cc:	fb01 f202 	mul.w	r2, r1, r2
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d11c      	bne.n	8007710 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076de:	429a      	cmp	r2, r3
 80076e0:	d316      	bcc.n	8007710 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d20f      	bcs.n	8007710 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076f0:	2200      	movs	r2, #0
 80076f2:	2100      	movs	r1, #0
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 fe9c 	bl	8008432 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007702:	2300      	movs	r3, #0
 8007704:	2200      	movs	r2, #0
 8007706:	2100      	movs	r1, #0
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f001 fb25 	bl	8008d58 <USBD_LL_PrepareReceive>
 800770e:	e026      	b.n	800775e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00a      	beq.n	8007732 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007722:	2b03      	cmp	r3, #3
 8007724:	d105      	bne.n	8007732 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007732:	2180      	movs	r1, #128	; 0x80
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f001 fa63 	bl	8008c00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fece 	bl	80084dc <USBD_CtlReceiveStatus>
 8007740:	e00d      	b.n	800775e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007748:	2b04      	cmp	r3, #4
 800774a:	d004      	beq.n	8007756 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007752:	2b00      	cmp	r3, #0
 8007754:	d103      	bne.n	800775e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007756:	2180      	movs	r1, #128	; 0x80
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f001 fa51 	bl	8008c00 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007764:	2b01      	cmp	r3, #1
 8007766:	d11d      	bne.n	80077a4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fe81 	bl	8007470 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007776:	e015      	b.n	80077a4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00d      	beq.n	80077a0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800778a:	2b03      	cmp	r3, #3
 800778c:	d108      	bne.n	80077a0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	7afa      	ldrb	r2, [r7, #11]
 8007798:	4611      	mov	r1, r2
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	4798      	blx	r3
 800779e:	e001      	b.n	80077a4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077a0:	2302      	movs	r3, #2
 80077a2:	e000      	b.n	80077a6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b082      	sub	sp, #8
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077b6:	2340      	movs	r3, #64	; 0x40
 80077b8:	2200      	movs	r2, #0
 80077ba:	2100      	movs	r1, #0
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 f9da 	bl	8008b76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2240      	movs	r2, #64	; 0x40
 80077ce:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077d2:	2340      	movs	r3, #64	; 0x40
 80077d4:	2200      	movs	r2, #0
 80077d6:	2180      	movs	r1, #128	; 0x80
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f001 f9cc 	bl	8008b76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2240      	movs	r2, #64	; 0x40
 80077e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d009      	beq.n	8007826 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	6852      	ldr	r2, [r2, #4]
 800781e:	b2d2      	uxtb	r2, r2
 8007820:	4611      	mov	r1, r2
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4798      	blx	r3
  }

  return USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	460b      	mov	r3, r1
 800783a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	78fa      	ldrb	r2, [r7, #3]
 8007840:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	bc80      	pop	{r7}
 800784c:	4770      	bx	lr

0800784e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2204      	movs	r2, #4
 8007866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr

08007876 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007884:	2b04      	cmp	r3, #4
 8007886:	d105      	bne.n	8007894 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	bc80      	pop	{r7}
 800789e:	4770      	bx	lr

080078a0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d10b      	bne.n	80078ca <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d005      	beq.n	80078ca <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ea:	2b40      	cmp	r3, #64	; 0x40
 80078ec:	d005      	beq.n	80078fa <USBD_StdDevReq+0x26>
 80078ee:	2b40      	cmp	r3, #64	; 0x40
 80078f0:	d84f      	bhi.n	8007992 <USBD_StdDevReq+0xbe>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d009      	beq.n	800790a <USBD_StdDevReq+0x36>
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d14b      	bne.n	8007992 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	4798      	blx	r3
      break;
 8007908:	e048      	b.n	800799c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	785b      	ldrb	r3, [r3, #1]
 800790e:	2b09      	cmp	r3, #9
 8007910:	d839      	bhi.n	8007986 <USBD_StdDevReq+0xb2>
 8007912:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <USBD_StdDevReq+0x44>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	08007969 	.word	0x08007969
 800791c:	0800797d 	.word	0x0800797d
 8007920:	08007987 	.word	0x08007987
 8007924:	08007973 	.word	0x08007973
 8007928:	08007987 	.word	0x08007987
 800792c:	0800794b 	.word	0x0800794b
 8007930:	08007941 	.word	0x08007941
 8007934:	08007987 	.word	0x08007987
 8007938:	0800795f 	.word	0x0800795f
 800793c:	08007955 	.word	0x08007955
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f9dc 	bl	8007d00 <USBD_GetDescriptor>
          break;
 8007948:	e022      	b.n	8007990 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fb3f 	bl	8007fd0 <USBD_SetAddress>
          break;
 8007952:	e01d      	b.n	8007990 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fb7e 	bl	8008058 <USBD_SetConfig>
          break;
 800795c:	e018      	b.n	8007990 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fc07 	bl	8008174 <USBD_GetConfig>
          break;
 8007966:	e013      	b.n	8007990 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fc37 	bl	80081de <USBD_GetStatus>
          break;
 8007970:	e00e      	b.n	8007990 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fc65 	bl	8008244 <USBD_SetFeature>
          break;
 800797a:	e009      	b.n	8007990 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fc74 	bl	800826c <USBD_ClrFeature>
          break;
 8007984:	e004      	b.n	8007990 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fccc 	bl	8008326 <USBD_CtlError>
          break;
 800798e:	bf00      	nop
      }
      break;
 8007990:	e004      	b.n	800799c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fcc6 	bl	8008326 <USBD_CtlError>
      break;
 800799a:	bf00      	nop
  }

  return ret;
 800799c:	7bfb      	ldrb	r3, [r7, #15]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop

080079a8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079be:	2b40      	cmp	r3, #64	; 0x40
 80079c0:	d005      	beq.n	80079ce <USBD_StdItfReq+0x26>
 80079c2:	2b40      	cmp	r3, #64	; 0x40
 80079c4:	d82e      	bhi.n	8007a24 <USBD_StdItfReq+0x7c>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <USBD_StdItfReq+0x26>
 80079ca:	2b20      	cmp	r3, #32
 80079cc:	d12a      	bne.n	8007a24 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d4:	3b01      	subs	r3, #1
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d81d      	bhi.n	8007a16 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	889b      	ldrh	r3, [r3, #4]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d813      	bhi.n	8007a0c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	4798      	blx	r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	88db      	ldrh	r3, [r3, #6]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d110      	bne.n	8007a20 <USBD_StdItfReq+0x78>
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10d      	bne.n	8007a20 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fd56 	bl	80084b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a0a:	e009      	b.n	8007a20 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fc89 	bl	8008326 <USBD_CtlError>
          break;
 8007a14:	e004      	b.n	8007a20 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fc84 	bl	8008326 <USBD_CtlError>
          break;
 8007a1e:	e000      	b.n	8007a22 <USBD_StdItfReq+0x7a>
          break;
 8007a20:	bf00      	nop
      }
      break;
 8007a22:	e004      	b.n	8007a2e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fc7d 	bl	8008326 <USBD_CtlError>
      break;
 8007a2c:	bf00      	nop
  }

  return USBD_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	889b      	ldrh	r3, [r3, #4]
 8007a4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	d007      	beq.n	8007a68 <USBD_StdEPReq+0x30>
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	f200 8146 	bhi.w	8007cea <USBD_StdEPReq+0x2b2>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00a      	beq.n	8007a78 <USBD_StdEPReq+0x40>
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	f040 8141 	bne.w	8007cea <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	4798      	blx	r3
      break;
 8007a76:	e13d      	b.n	8007cf4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a80:	2b20      	cmp	r3, #32
 8007a82:	d10a      	bne.n	8007a9a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	4798      	blx	r3
 8007a92:	4603      	mov	r3, r0
 8007a94:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	e12d      	b.n	8007cf6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	785b      	ldrb	r3, [r3, #1]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d007      	beq.n	8007ab2 <USBD_StdEPReq+0x7a>
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	f300 811b 	bgt.w	8007cde <USBD_StdEPReq+0x2a6>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d072      	beq.n	8007b92 <USBD_StdEPReq+0x15a>
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d03a      	beq.n	8007b26 <USBD_StdEPReq+0xee>
 8007ab0:	e115      	b.n	8007cde <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d002      	beq.n	8007ac2 <USBD_StdEPReq+0x8a>
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d015      	beq.n	8007aec <USBD_StdEPReq+0xb4>
 8007ac0:	e02b      	b.n	8007b1a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00c      	beq.n	8007ae2 <USBD_StdEPReq+0xaa>
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b80      	cmp	r3, #128	; 0x80
 8007acc:	d009      	beq.n	8007ae2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 f894 	bl	8008c00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ad8:	2180      	movs	r1, #128	; 0x80
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 f890 	bl	8008c00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ae0:	e020      	b.n	8007b24 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fc1e 	bl	8008326 <USBD_CtlError>
              break;
 8007aea:	e01b      	b.n	8007b24 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	885b      	ldrh	r3, [r3, #2]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10e      	bne.n	8007b12 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00b      	beq.n	8007b12 <USBD_StdEPReq+0xda>
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	2b80      	cmp	r3, #128	; 0x80
 8007afe:	d008      	beq.n	8007b12 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	88db      	ldrh	r3, [r3, #6]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 f877 	bl	8008c00 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fccf 	bl	80084b6 <USBD_CtlSendStatus>

              break;
 8007b18:	e004      	b.n	8007b24 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fc02 	bl	8008326 <USBD_CtlError>
              break;
 8007b22:	bf00      	nop
          }
          break;
 8007b24:	e0e0      	b.n	8007ce8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d002      	beq.n	8007b36 <USBD_StdEPReq+0xfe>
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d015      	beq.n	8007b60 <USBD_StdEPReq+0x128>
 8007b34:	e026      	b.n	8007b84 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00c      	beq.n	8007b56 <USBD_StdEPReq+0x11e>
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	2b80      	cmp	r3, #128	; 0x80
 8007b40:	d009      	beq.n	8007b56 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 f85a 	bl	8008c00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b4c:	2180      	movs	r1, #128	; 0x80
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 f856 	bl	8008c00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b54:	e01c      	b.n	8007b90 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fbe4 	bl	8008326 <USBD_CtlError>
              break;
 8007b5e:	e017      	b.n	8007b90 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	885b      	ldrh	r3, [r3, #2]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d112      	bne.n	8007b8e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 f861 	bl	8008c3e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fc9a 	bl	80084b6 <USBD_CtlSendStatus>
              }
              break;
 8007b82:	e004      	b.n	8007b8e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fbcd 	bl	8008326 <USBD_CtlError>
              break;
 8007b8c:	e000      	b.n	8007b90 <USBD_StdEPReq+0x158>
              break;
 8007b8e:	bf00      	nop
          }
          break;
 8007b90:	e0aa      	b.n	8007ce8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d002      	beq.n	8007ba2 <USBD_StdEPReq+0x16a>
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d032      	beq.n	8007c06 <USBD_StdEPReq+0x1ce>
 8007ba0:	e097      	b.n	8007cd2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d007      	beq.n	8007bb8 <USBD_StdEPReq+0x180>
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	2b80      	cmp	r3, #128	; 0x80
 8007bac:	d004      	beq.n	8007bb8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fbb8 	bl	8008326 <USBD_CtlError>
                break;
 8007bb6:	e091      	b.n	8007cdc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	da0b      	bge.n	8007bd8 <USBD_StdEPReq+0x1a0>
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	3310      	adds	r3, #16
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	e00b      	b.n	8007bf0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	3304      	adds	r3, #4
 8007bf0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fbfb 	bl	80083fa <USBD_CtlSendData>
              break;
 8007c04:	e06a      	b.n	8007cdc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da11      	bge.n	8007c32 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	f003 020f 	and.w	r2, r3, #15
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	4613      	mov	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	440b      	add	r3, r1
 8007c20:	3318      	adds	r3, #24
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d117      	bne.n	8007c58 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fb7b 	bl	8008326 <USBD_CtlError>
                  break;
 8007c30:	e054      	b.n	8007cdc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	f003 020f 	and.w	r2, r3, #15
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d104      	bne.n	8007c58 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fb68 	bl	8008326 <USBD_CtlError>
                  break;
 8007c56:	e041      	b.n	8007cdc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	da0b      	bge.n	8007c78 <USBD_StdEPReq+0x240>
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	3310      	adds	r3, #16
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	4413      	add	r3, r2
 8007c74:	3304      	adds	r3, #4
 8007c76:	e00b      	b.n	8007c90 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	3304      	adds	r3, #4
 8007c90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <USBD_StdEPReq+0x266>
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
 8007c9a:	2b80      	cmp	r3, #128	; 0x80
 8007c9c:	d103      	bne.n	8007ca6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	e00e      	b.n	8007cc4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 ffe6 	bl	8008c7c <USBD_LL_IsStallEP>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	e002      	b.n	8007cc4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fb95 	bl	80083fa <USBD_CtlSendData>
              break;
 8007cd0:	e004      	b.n	8007cdc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fb26 	bl	8008326 <USBD_CtlError>
              break;
 8007cda:	bf00      	nop
          }
          break;
 8007cdc:	e004      	b.n	8007ce8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fb20 	bl	8008326 <USBD_CtlError>
          break;
 8007ce6:	bf00      	nop
      }
      break;
 8007ce8:	e004      	b.n	8007cf4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fb1a 	bl	8008326 <USBD_CtlError>
      break;
 8007cf2:	bf00      	nop
  }

  return ret;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	885b      	ldrh	r3, [r3, #2]
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	2b06      	cmp	r3, #6
 8007d22:	f200 8128 	bhi.w	8007f76 <USBD_GetDescriptor+0x276>
 8007d26:	a201      	add	r2, pc, #4	; (adr r2, 8007d2c <USBD_GetDescriptor+0x2c>)
 8007d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2c:	08007d49 	.word	0x08007d49
 8007d30:	08007d61 	.word	0x08007d61
 8007d34:	08007da1 	.word	0x08007da1
 8007d38:	08007f77 	.word	0x08007f77
 8007d3c:	08007f77 	.word	0x08007f77
 8007d40:	08007f17 	.word	0x08007f17
 8007d44:	08007f43 	.word	0x08007f43
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	7c12      	ldrb	r2, [r2, #16]
 8007d54:	f107 0108 	add.w	r1, r7, #8
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	60f8      	str	r0, [r7, #12]
      break;
 8007d5e:	e112      	b.n	8007f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	7c1b      	ldrb	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10d      	bne.n	8007d84 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	f107 0208 	add.w	r2, r7, #8
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	2202      	movs	r2, #2
 8007d80:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d82:	e100      	b.n	8007f86 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	f107 0208 	add.w	r2, r7, #8
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	701a      	strb	r2, [r3, #0]
      break;
 8007d9e:	e0f2      	b.n	8007f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	885b      	ldrh	r3, [r3, #2]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b05      	cmp	r3, #5
 8007da8:	f200 80ac 	bhi.w	8007f04 <USBD_GetDescriptor+0x204>
 8007dac:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <USBD_GetDescriptor+0xb4>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007dcd 	.word	0x08007dcd
 8007db8:	08007e01 	.word	0x08007e01
 8007dbc:	08007e35 	.word	0x08007e35
 8007dc0:	08007e69 	.word	0x08007e69
 8007dc4:	08007e9d 	.word	0x08007e9d
 8007dc8:	08007ed1 	.word	0x08007ed1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00b      	beq.n	8007df0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	7c12      	ldrb	r2, [r2, #16]
 8007de4:	f107 0108 	add.w	r1, r7, #8
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dee:	e091      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa97 	bl	8008326 <USBD_CtlError>
            err++;
 8007df8:	7afb      	ldrb	r3, [r7, #11]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfe:	e089      	b.n	8007f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	7c12      	ldrb	r2, [r2, #16]
 8007e18:	f107 0108 	add.w	r1, r7, #8
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e22:	e077      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fa7d 	bl	8008326 <USBD_CtlError>
            err++;
 8007e2c:	7afb      	ldrb	r3, [r7, #11]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	72fb      	strb	r3, [r7, #11]
          break;
 8007e32:	e06f      	b.n	8007f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	7c12      	ldrb	r2, [r2, #16]
 8007e4c:	f107 0108 	add.w	r1, r7, #8
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
 8007e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e56:	e05d      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa63 	bl	8008326 <USBD_CtlError>
            err++;
 8007e60:	7afb      	ldrb	r3, [r7, #11]
 8007e62:	3301      	adds	r3, #1
 8007e64:	72fb      	strb	r3, [r7, #11]
          break;
 8007e66:	e055      	b.n	8007f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	7c12      	ldrb	r2, [r2, #16]
 8007e80:	f107 0108 	add.w	r1, r7, #8
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
 8007e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e8a:	e043      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa49 	bl	8008326 <USBD_CtlError>
            err++;
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	3301      	adds	r3, #1
 8007e98:	72fb      	strb	r3, [r7, #11]
          break;
 8007e9a:	e03b      	b.n	8007f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	7c12      	ldrb	r2, [r2, #16]
 8007eb4:	f107 0108 	add.w	r1, r7, #8
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4798      	blx	r3
 8007ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ebe:	e029      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa2f 	bl	8008326 <USBD_CtlError>
            err++;
 8007ec8:	7afb      	ldrb	r3, [r7, #11]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ece:	e021      	b.n	8007f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	7c12      	ldrb	r2, [r2, #16]
 8007ee8:	f107 0108 	add.w	r1, r7, #8
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
 8007ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ef2:	e00f      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa15 	bl	8008326 <USBD_CtlError>
            err++;
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	3301      	adds	r3, #1
 8007f00:	72fb      	strb	r3, [r7, #11]
          break;
 8007f02:	e007      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fa0d 	bl	8008326 <USBD_CtlError>
          err++;
 8007f0c:	7afb      	ldrb	r3, [r7, #11]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007f12:	e038      	b.n	8007f86 <USBD_GetDescriptor+0x286>
 8007f14:	e037      	b.n	8007f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	7c1b      	ldrb	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d109      	bne.n	8007f32 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f26:	f107 0208 	add.w	r2, r7, #8
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4798      	blx	r3
 8007f2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f30:	e029      	b.n	8007f86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f9f6 	bl	8008326 <USBD_CtlError>
        err++;
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f40:	e021      	b.n	8007f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7c1b      	ldrb	r3, [r3, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10d      	bne.n	8007f66 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f52:	f107 0208 	add.w	r2, r7, #8
 8007f56:	4610      	mov	r0, r2
 8007f58:	4798      	blx	r3
 8007f5a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	2207      	movs	r2, #7
 8007f62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f64:	e00f      	b.n	8007f86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f9dc 	bl	8008326 <USBD_CtlError>
        err++;
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	3301      	adds	r3, #1
 8007f72:	72fb      	strb	r3, [r7, #11]
      break;
 8007f74:	e007      	b.n	8007f86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f9d4 	bl	8008326 <USBD_CtlError>
      err++;
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	3301      	adds	r3, #1
 8007f82:	72fb      	strb	r3, [r7, #11]
      break;
 8007f84:	bf00      	nop
  }

  if (err != 0U)
 8007f86:	7afb      	ldrb	r3, [r7, #11]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11c      	bne.n	8007fc6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007f8c:	893b      	ldrh	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d011      	beq.n	8007fb6 <USBD_GetDescriptor+0x2b6>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	88db      	ldrh	r3, [r3, #6]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00d      	beq.n	8007fb6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	88da      	ldrh	r2, [r3, #6]
 8007f9e:	893b      	ldrh	r3, [r7, #8]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	bf28      	it	cs
 8007fa4:	4613      	movcs	r3, r2
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007faa:	893b      	ldrh	r3, [r7, #8]
 8007fac:	461a      	mov	r2, r3
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fa22 	bl	80083fa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	88db      	ldrh	r3, [r3, #6]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d104      	bne.n	8007fc8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fa79 	bl	80084b6 <USBD_CtlSendStatus>
 8007fc4:	e000      	b.n	8007fc8 <USBD_GetDescriptor+0x2c8>
    return;
 8007fc6:	bf00      	nop
    }
  }
}
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop

08007fd0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	889b      	ldrh	r3, [r3, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d130      	bne.n	8008044 <USBD_SetAddress+0x74>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	88db      	ldrh	r3, [r3, #6]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d12c      	bne.n	8008044 <USBD_SetAddress+0x74>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	885b      	ldrh	r3, [r3, #2]
 8007fee:	2b7f      	cmp	r3, #127	; 0x7f
 8007ff0:	d828      	bhi.n	8008044 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	885b      	ldrh	r3, [r3, #2]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ffc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008004:	2b03      	cmp	r3, #3
 8008006:	d104      	bne.n	8008012 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f98b 	bl	8008326 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008010:	e01d      	b.n	800804e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	7bfa      	ldrb	r2, [r7, #15]
 8008016:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fe58 	bl	8008cd4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fa46 	bl	80084b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008038:	e009      	b.n	800804e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008042:	e004      	b.n	800804e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f96d 	bl	8008326 <USBD_CtlError>
  }
}
 800804c:	bf00      	nop
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	885b      	ldrh	r3, [r3, #2]
 8008066:	b2da      	uxtb	r2, r3
 8008068:	4b41      	ldr	r3, [pc, #260]	; (8008170 <USBD_SetConfig+0x118>)
 800806a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800806c:	4b40      	ldr	r3, [pc, #256]	; (8008170 <USBD_SetConfig+0x118>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d904      	bls.n	800807e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f955 	bl	8008326 <USBD_CtlError>
 800807c:	e075      	b.n	800816a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008084:	2b02      	cmp	r3, #2
 8008086:	d002      	beq.n	800808e <USBD_SetConfig+0x36>
 8008088:	2b03      	cmp	r3, #3
 800808a:	d023      	beq.n	80080d4 <USBD_SetConfig+0x7c>
 800808c:	e062      	b.n	8008154 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800808e:	4b38      	ldr	r3, [pc, #224]	; (8008170 <USBD_SetConfig+0x118>)
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d01a      	beq.n	80080cc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008096:	4b36      	ldr	r3, [pc, #216]	; (8008170 <USBD_SetConfig+0x118>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2203      	movs	r2, #3
 80080a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080a8:	4b31      	ldr	r3, [pc, #196]	; (8008170 <USBD_SetConfig+0x118>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff f9e8 	bl	8007484 <USBD_SetClassConfig>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d104      	bne.n	80080c4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f932 	bl	8008326 <USBD_CtlError>
            return;
 80080c2:	e052      	b.n	800816a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f9f6 	bl	80084b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080ca:	e04e      	b.n	800816a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f9f2 	bl	80084b6 <USBD_CtlSendStatus>
        break;
 80080d2:	e04a      	b.n	800816a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80080d4:	4b26      	ldr	r3, [pc, #152]	; (8008170 <USBD_SetConfig+0x118>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d112      	bne.n	8008102 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80080e4:	4b22      	ldr	r3, [pc, #136]	; (8008170 <USBD_SetConfig+0x118>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	461a      	mov	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80080ee:	4b20      	ldr	r3, [pc, #128]	; (8008170 <USBD_SetConfig+0x118>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7ff f9e4 	bl	80074c2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f9db 	bl	80084b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008100:	e033      	b.n	800816a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008102:	4b1b      	ldr	r3, [pc, #108]	; (8008170 <USBD_SetConfig+0x118>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d01d      	beq.n	800814c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff f9d2 	bl	80074c2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800811e:	4b14      	ldr	r3, [pc, #80]	; (8008170 <USBD_SetConfig+0x118>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008128:	4b11      	ldr	r3, [pc, #68]	; (8008170 <USBD_SetConfig+0x118>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff f9a8 	bl	8007484 <USBD_SetClassConfig>
 8008134:	4603      	mov	r3, r0
 8008136:	2b02      	cmp	r3, #2
 8008138:	d104      	bne.n	8008144 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f8f2 	bl	8008326 <USBD_CtlError>
            return;
 8008142:	e012      	b.n	800816a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f9b6 	bl	80084b6 <USBD_CtlSendStatus>
        break;
 800814a:	e00e      	b.n	800816a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f9b2 	bl	80084b6 <USBD_CtlSendStatus>
        break;
 8008152:	e00a      	b.n	800816a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f8e5 	bl	8008326 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800815c:	4b04      	ldr	r3, [pc, #16]	; (8008170 <USBD_SetConfig+0x118>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff f9ad 	bl	80074c2 <USBD_ClrClassConfig>
        break;
 8008168:	bf00      	nop
    }
  }
}
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	20000254 	.word	0x20000254

08008174 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	88db      	ldrh	r3, [r3, #6]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d004      	beq.n	8008190 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f8cc 	bl	8008326 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800818e:	e022      	b.n	80081d6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008196:	2b02      	cmp	r3, #2
 8008198:	dc02      	bgt.n	80081a0 <USBD_GetConfig+0x2c>
 800819a:	2b00      	cmp	r3, #0
 800819c:	dc03      	bgt.n	80081a6 <USBD_GetConfig+0x32>
 800819e:	e015      	b.n	80081cc <USBD_GetConfig+0x58>
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d00b      	beq.n	80081bc <USBD_GetConfig+0x48>
 80081a4:	e012      	b.n	80081cc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3308      	adds	r3, #8
 80081b0:	2201      	movs	r2, #1
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f920 	bl	80083fa <USBD_CtlSendData>
        break;
 80081ba:	e00c      	b.n	80081d6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3304      	adds	r3, #4
 80081c0:	2201      	movs	r2, #1
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f918 	bl	80083fa <USBD_CtlSendData>
        break;
 80081ca:	e004      	b.n	80081d6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f8a9 	bl	8008326 <USBD_CtlError>
        break;
 80081d4:	bf00      	nop
}
 80081d6:	bf00      	nop
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ee:	3b01      	subs	r3, #1
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d81e      	bhi.n	8008232 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	88db      	ldrh	r3, [r3, #6]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d004      	beq.n	8008206 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f891 	bl	8008326 <USBD_CtlError>
        break;
 8008204:	e01a      	b.n	800823c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d005      	beq.n	8008222 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f043 0202 	orr.w	r2, r3, #2
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	330c      	adds	r3, #12
 8008226:	2202      	movs	r2, #2
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f8e5 	bl	80083fa <USBD_CtlSendData>
      break;
 8008230:	e004      	b.n	800823c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f876 	bl	8008326 <USBD_CtlError>
      break;
 800823a:	bf00      	nop
  }
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	885b      	ldrh	r3, [r3, #2]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d106      	bne.n	8008264 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f929 	bl	80084b6 <USBD_CtlSendStatus>
  }
}
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827c:	3b01      	subs	r3, #1
 800827e:	2b02      	cmp	r3, #2
 8008280:	d80b      	bhi.n	800829a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	885b      	ldrh	r3, [r3, #2]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d10c      	bne.n	80082a4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f90f 	bl	80084b6 <USBD_CtlSendStatus>
      }
      break;
 8008298:	e004      	b.n	80082a4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f842 	bl	8008326 <USBD_CtlError>
      break;
 80082a2:	e000      	b.n	80082a6 <USBD_ClrFeature+0x3a>
      break;
 80082a4:	bf00      	nop
  }
}
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781a      	ldrb	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	785a      	ldrb	r2, [r3, #1]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	3302      	adds	r3, #2
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	3303      	adds	r3, #3
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	021b      	lsls	r3, r3, #8
 80082da:	b29b      	uxth	r3, r3
 80082dc:	4413      	add	r3, r2
 80082de:	b29a      	uxth	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	3304      	adds	r3, #4
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	3305      	adds	r3, #5
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	021b      	lsls	r3, r3, #8
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	4413      	add	r3, r2
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	3306      	adds	r3, #6
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	b29a      	uxth	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	3307      	adds	r3, #7
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	b29b      	uxth	r3, r3
 8008314:	4413      	add	r3, r2
 8008316:	b29a      	uxth	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	80da      	strh	r2, [r3, #6]

}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	bc80      	pop	{r7}
 8008324:	4770      	bx	lr

08008326 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008330:	2180      	movs	r1, #128	; 0x80
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fc64 	bl	8008c00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008338:	2100      	movs	r1, #0
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fc60 	bl	8008c00 <USBD_LL_StallEP>
}
 8008340:	bf00      	nop
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d032      	beq.n	80083c4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 f834 	bl	80083cc <USBD_GetLen>
 8008364:	4603      	mov	r3, r0
 8008366:	3301      	adds	r3, #1
 8008368:	b29b      	uxth	r3, r3
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	b29a      	uxth	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	75fa      	strb	r2, [r7, #23]
 8008378:	461a      	mov	r2, r3
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	4413      	add	r3, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	7812      	ldrb	r2, [r2, #0]
 8008382:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008384:	7dfb      	ldrb	r3, [r7, #23]
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	75fa      	strb	r2, [r7, #23]
 800838a:	461a      	mov	r2, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4413      	add	r3, r2
 8008390:	2203      	movs	r2, #3
 8008392:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008394:	e012      	b.n	80083bc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	1c5a      	adds	r2, r3, #1
 800839a:	60fa      	str	r2, [r7, #12]
 800839c:	7dfa      	ldrb	r2, [r7, #23]
 800839e:	1c51      	adds	r1, r2, #1
 80083a0:	75f9      	strb	r1, [r7, #23]
 80083a2:	4611      	mov	r1, r2
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	440a      	add	r2, r1
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	75fa      	strb	r2, [r7, #23]
 80083b2:	461a      	mov	r2, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4413      	add	r3, r2
 80083b8:	2200      	movs	r2, #0
 80083ba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1e8      	bne.n	8008396 <USBD_GetString+0x4e>
    }
  }
}
 80083c4:	bf00      	nop
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80083d8:	e005      	b.n	80083e6 <USBD_GetLen+0x1a>
  {
    len++;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	3301      	adds	r3, #1
 80083de:	73fb      	strb	r3, [r7, #15]
    buf++;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3301      	adds	r3, #1
 80083e4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1f5      	bne.n	80083da <USBD_GetLen+0xe>
  }

  return len;
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr

080083fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	4613      	mov	r3, r2
 8008406:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2202      	movs	r2, #2
 800840c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008410:	88fa      	ldrh	r2, [r7, #6]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008416:	88fa      	ldrh	r2, [r7, #6]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800841c:	88fb      	ldrh	r3, [r7, #6]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	2100      	movs	r1, #0
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 fc75 	bl	8008d12 <USBD_LL_Transmit>

  return USBD_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	4613      	mov	r3, r2
 800843e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008440:	88fb      	ldrh	r3, [r7, #6]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	2100      	movs	r1, #0
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 fc63 	bl	8008d12 <USBD_LL_Transmit>

  return USBD_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	4613      	mov	r3, r2
 8008462:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2203      	movs	r2, #3
 8008468:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800846c:	88fa      	ldrh	r2, [r7, #6]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008474:	88fa      	ldrh	r2, [r7, #6]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	2100      	movs	r1, #0
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 fc68 	bl	8008d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	4613      	mov	r3, r2
 800849e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084a0:	88fb      	ldrh	r3, [r7, #6]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	2100      	movs	r1, #0
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fc56 	bl	8008d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2204      	movs	r2, #4
 80084c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084c6:	2300      	movs	r3, #0
 80084c8:	2200      	movs	r2, #0
 80084ca:	2100      	movs	r1, #0
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fc20 	bl	8008d12 <USBD_LL_Transmit>

  return USBD_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2205      	movs	r2, #5
 80084e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084ec:	2300      	movs	r3, #0
 80084ee:	2200      	movs	r2, #0
 80084f0:	2100      	movs	r1, #0
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fc30 	bl	8008d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
	...

08008504 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008508:	2200      	movs	r2, #0
 800850a:	4912      	ldr	r1, [pc, #72]	; (8008554 <MX_USB_DEVICE_Init+0x50>)
 800850c:	4812      	ldr	r0, [pc, #72]	; (8008558 <MX_USB_DEVICE_Init+0x54>)
 800850e:	f7fe ff5f 	bl	80073d0 <USBD_Init>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008518:	f7f8 f862 	bl	80005e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800851c:	490f      	ldr	r1, [pc, #60]	; (800855c <MX_USB_DEVICE_Init+0x58>)
 800851e:	480e      	ldr	r0, [pc, #56]	; (8008558 <MX_USB_DEVICE_Init+0x54>)
 8008520:	f7fe ff81 	bl	8007426 <USBD_RegisterClass>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800852a:	f7f8 f859 	bl	80005e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800852e:	490c      	ldr	r1, [pc, #48]	; (8008560 <MX_USB_DEVICE_Init+0x5c>)
 8008530:	4809      	ldr	r0, [pc, #36]	; (8008558 <MX_USB_DEVICE_Init+0x54>)
 8008532:	f7fe fee1 	bl	80072f8 <USBD_CDC_RegisterInterface>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800853c:	f7f8 f850 	bl	80005e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008540:	4805      	ldr	r0, [pc, #20]	; (8008558 <MX_USB_DEVICE_Init+0x54>)
 8008542:	f7fe ff89 	bl	8007458 <USBD_Start>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800854c:	f7f8 f848 	bl	80005e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008550:	bf00      	nop
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20000134 	.word	0x20000134
 8008558:	20000258 	.word	0x20000258
 800855c:	20000020 	.word	0x20000020
 8008560:	20000124 	.word	0x20000124

08008564 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008568:	2200      	movs	r2, #0
 800856a:	4905      	ldr	r1, [pc, #20]	; (8008580 <CDC_Init_FS+0x1c>)
 800856c:	4805      	ldr	r0, [pc, #20]	; (8008584 <CDC_Init_FS+0x20>)
 800856e:	f7fe fed9 	bl	8007324 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008572:	4905      	ldr	r1, [pc, #20]	; (8008588 <CDC_Init_FS+0x24>)
 8008574:	4803      	ldr	r0, [pc, #12]	; (8008584 <CDC_Init_FS+0x20>)
 8008576:	f7fe feee 	bl	8007356 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800857a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800857c:	4618      	mov	r0, r3
 800857e:	bd80      	pop	{r7, pc}
 8008580:	2000091c 	.word	0x2000091c
 8008584:	20000258 	.word	0x20000258
 8008588:	2000051c 	.word	0x2000051c

0800858c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8008590:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008592:	4618      	mov	r0, r3
 8008594:	46bd      	mov	sp, r7
 8008596:	bc80      	pop	{r7}
 8008598:	4770      	bx	lr
	...

0800859c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	6039      	str	r1, [r7, #0]
 80085a6:	71fb      	strb	r3, [r7, #7]
 80085a8:	4613      	mov	r3, r2
 80085aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 80085ac:	79fb      	ldrb	r3, [r7, #7]
 80085ae:	2b23      	cmp	r3, #35	; 0x23
 80085b0:	d84a      	bhi.n	8008648 <CDC_Control_FS+0xac>
 80085b2:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <CDC_Control_FS+0x1c>)
 80085b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b8:	08008649 	.word	0x08008649
 80085bc:	08008649 	.word	0x08008649
 80085c0:	08008649 	.word	0x08008649
 80085c4:	08008649 	.word	0x08008649
 80085c8:	08008649 	.word	0x08008649
 80085cc:	08008649 	.word	0x08008649
 80085d0:	08008649 	.word	0x08008649
 80085d4:	08008649 	.word	0x08008649
 80085d8:	08008649 	.word	0x08008649
 80085dc:	08008649 	.word	0x08008649
 80085e0:	08008649 	.word	0x08008649
 80085e4:	08008649 	.word	0x08008649
 80085e8:	08008649 	.word	0x08008649
 80085ec:	08008649 	.word	0x08008649
 80085f0:	08008649 	.word	0x08008649
 80085f4:	08008649 	.word	0x08008649
 80085f8:	08008649 	.word	0x08008649
 80085fc:	08008649 	.word	0x08008649
 8008600:	08008649 	.word	0x08008649
 8008604:	08008649 	.word	0x08008649
 8008608:	08008649 	.word	0x08008649
 800860c:	08008649 	.word	0x08008649
 8008610:	08008649 	.word	0x08008649
 8008614:	08008649 	.word	0x08008649
 8008618:	08008649 	.word	0x08008649
 800861c:	08008649 	.word	0x08008649
 8008620:	08008649 	.word	0x08008649
 8008624:	08008649 	.word	0x08008649
 8008628:	08008649 	.word	0x08008649
 800862c:	08008649 	.word	0x08008649
 8008630:	08008649 	.word	0x08008649
 8008634:	08008649 	.word	0x08008649
 8008638:	08008649 	.word	0x08008649
 800863c:	08008649 	.word	0x08008649
 8008640:	08008649 	.word	0x08008649
 8008644:	08008649 	.word	0x08008649
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8008648:	bf00      	nop
	}

	return (USBD_OK);
 800864a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800864c:	4618      	mov	r0, r3
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	bc80      	pop	{r7}
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop

08008658 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	481b      	ldr	r0, [pc, #108]	; (80086d4 <CDC_Receive_FS+0x7c>)
 8008666:	f7fe fe76 	bl	8007356 <USBD_CDC_SetRxBuffer>

	if (priznak == 0) {
 800866a:	4b1b      	ldr	r3, [pc, #108]	; (80086d8 <CDC_Receive_FS+0x80>)
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d127      	bne.n	80086c2 <CDC_Receive_FS+0x6a>
		//return 0;

		priznak = 1;
 8008672:	4b19      	ldr	r3, [pc, #100]	; (80086d8 <CDC_Receive_FS+0x80>)
 8008674:	2201      	movs	r2, #1
 8008676:	701a      	strb	r2, [r3, #0]
		uint8_t llen = (uint8_t) *Len;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	73fb      	strb	r3, [r7, #15]
		memcpy(spi_buf, Buf, llen);
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	461a      	mov	r2, r3
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	4815      	ldr	r0, [pc, #84]	; (80086dc <CDC_Receive_FS+0x84>)
 8008686:	f000 fc15 	bl	8008eb4 <memcpy>
		spi_func[0] = spi_buf[6];
 800868a:	4b14      	ldr	r3, [pc, #80]	; (80086dc <CDC_Receive_FS+0x84>)
 800868c:	799a      	ldrb	r2, [r3, #6]
 800868e:	4b14      	ldr	r3, [pc, #80]	; (80086e0 <CDC_Receive_FS+0x88>)
 8008690:	701a      	strb	r2, [r3, #0]
		NBUTE[0] = spi_buf[5];
 8008692:	4b12      	ldr	r3, [pc, #72]	; (80086dc <CDC_Receive_FS+0x84>)
 8008694:	795a      	ldrb	r2, [r3, #5]
 8008696:	4b13      	ldr	r3, [pc, #76]	; (80086e4 <CDC_Receive_FS+0x8c>)
 8008698:	701a      	strb	r2, [r3, #0]
		//memcpy(NBUTE[0], spi_buf[5], 1);
		spi_OUT[0] = spi_buf[0];
 800869a:	4b10      	ldr	r3, [pc, #64]	; (80086dc <CDC_Receive_FS+0x84>)
 800869c:	781a      	ldrb	r2, [r3, #0]
 800869e:	4b12      	ldr	r3, [pc, #72]	; (80086e8 <CDC_Receive_FS+0x90>)
 80086a0:	701a      	strb	r2, [r3, #0]
		spi_OUT[1] = spi_buf[1];
 80086a2:	4b0e      	ldr	r3, [pc, #56]	; (80086dc <CDC_Receive_FS+0x84>)
 80086a4:	785a      	ldrb	r2, [r3, #1]
 80086a6:	4b10      	ldr	r3, [pc, #64]	; (80086e8 <CDC_Receive_FS+0x90>)
 80086a8:	705a      	strb	r2, [r3, #1]
		spi_OUT[2] = spi_buf[2];
 80086aa:	4b0c      	ldr	r3, [pc, #48]	; (80086dc <CDC_Receive_FS+0x84>)
 80086ac:	789a      	ldrb	r2, [r3, #2]
 80086ae:	4b0e      	ldr	r3, [pc, #56]	; (80086e8 <CDC_Receive_FS+0x90>)
 80086b0:	709a      	strb	r2, [r3, #2]
		spi_OUT[3] = spi_buf[3];
 80086b2:	4b0a      	ldr	r3, [pc, #40]	; (80086dc <CDC_Receive_FS+0x84>)
 80086b4:	78da      	ldrb	r2, [r3, #3]
 80086b6:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <CDC_Receive_FS+0x90>)
 80086b8:	70da      	strb	r2, [r3, #3]
		spi_OUT[4] = spi_buf[4];
 80086ba:	4b08      	ldr	r3, [pc, #32]	; (80086dc <CDC_Receive_FS+0x84>)
 80086bc:	791a      	ldrb	r2, [r3, #4]
 80086be:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <CDC_Receive_FS+0x90>)
 80086c0:	711a      	strb	r2, [r3, #4]

// for (tmp = 10; tmp > 0; tmp--);
//  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
// HAL_Delay(500);

	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086c2:	4804      	ldr	r0, [pc, #16]	; (80086d4 <CDC_Receive_FS+0x7c>)
 80086c4:	f7fe fe5a 	bl	800737c <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 80086c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000258 	.word	0x20000258
 80086d8:	200001ad 	.word	0x200001ad
 80086dc:	20000000 	.word	0x20000000
 80086e0:	200001a8 	.word	0x200001a8
 80086e4:	200001ac 	.word	0x200001ac
 80086e8:	200001a0 	.word	0x200001a0

080086ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	6039      	str	r1, [r7, #0]
 80086f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2212      	movs	r2, #18
 80086fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086fe:	4b03      	ldr	r3, [pc, #12]	; (800870c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	bc80      	pop	{r7}
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	20000150 	.word	0x20000150

08008710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2204      	movs	r2, #4
 8008720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008722:	4b03      	ldr	r3, [pc, #12]	; (8008730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008724:	4618      	mov	r0, r3
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	bc80      	pop	{r7}
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20000164 	.word	0x20000164

08008734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	4603      	mov	r3, r0
 800873c:	6039      	str	r1, [r7, #0]
 800873e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d105      	bne.n	8008752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4907      	ldr	r1, [pc, #28]	; (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
 800874a:	4808      	ldr	r0, [pc, #32]	; (800876c <USBD_FS_ProductStrDescriptor+0x38>)
 800874c:	f7ff fdfc 	bl	8008348 <USBD_GetString>
 8008750:	e004      	b.n	800875c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	4904      	ldr	r1, [pc, #16]	; (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
 8008756:	4805      	ldr	r0, [pc, #20]	; (800876c <USBD_FS_ProductStrDescriptor+0x38>)
 8008758:	f7ff fdf6 	bl	8008348 <USBD_GetString>
  }
  return USBD_StrDesc;
 800875c:	4b02      	ldr	r3, [pc, #8]	; (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000d1c 	.word	0x20000d1c
 800876c:	08008ee8 	.word	0x08008ee8

08008770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	4904      	ldr	r1, [pc, #16]	; (8008790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008780:	4804      	ldr	r0, [pc, #16]	; (8008794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008782:	f7ff fde1 	bl	8008348 <USBD_GetString>
  return USBD_StrDesc;
 8008786:	4b02      	ldr	r3, [pc, #8]	; (8008790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20000d1c 	.word	0x20000d1c
 8008794:	08008f00 	.word	0x08008f00

08008798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	6039      	str	r1, [r7, #0]
 80087a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	221a      	movs	r2, #26
 80087a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087aa:	f000 f843 	bl	8008834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ae:	4b02      	ldr	r3, [pc, #8]	; (80087b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000168 	.word	0x20000168

080087bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	6039      	str	r1, [r7, #0]
 80087c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d105      	bne.n	80087da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	4907      	ldr	r1, [pc, #28]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087d2:	4808      	ldr	r0, [pc, #32]	; (80087f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087d4:	f7ff fdb8 	bl	8008348 <USBD_GetString>
 80087d8:	e004      	b.n	80087e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4904      	ldr	r1, [pc, #16]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087de:	4805      	ldr	r0, [pc, #20]	; (80087f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087e0:	f7ff fdb2 	bl	8008348 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087e4:	4b02      	ldr	r3, [pc, #8]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000d1c 	.word	0x20000d1c
 80087f4:	08008f14 	.word	0x08008f14

080087f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	6039      	str	r1, [r7, #0]
 8008802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d105      	bne.n	8008816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4907      	ldr	r1, [pc, #28]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800880e:	4808      	ldr	r0, [pc, #32]	; (8008830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008810:	f7ff fd9a 	bl	8008348 <USBD_GetString>
 8008814:	e004      	b.n	8008820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	4904      	ldr	r1, [pc, #16]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800881a:	4805      	ldr	r0, [pc, #20]	; (8008830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800881c:	f7ff fd94 	bl	8008348 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008820:	4b02      	ldr	r3, [pc, #8]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000d1c 	.word	0x20000d1c
 8008830:	08008f20 	.word	0x08008f20

08008834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <Get_SerialNum+0x44>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008840:	4b0e      	ldr	r3, [pc, #56]	; (800887c <Get_SerialNum+0x48>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008846:	4b0e      	ldr	r3, [pc, #56]	; (8008880 <Get_SerialNum+0x4c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4413      	add	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d009      	beq.n	800886e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800885a:	2208      	movs	r2, #8
 800885c:	4909      	ldr	r1, [pc, #36]	; (8008884 <Get_SerialNum+0x50>)
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 f814 	bl	800888c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008864:	2204      	movs	r2, #4
 8008866:	4908      	ldr	r1, [pc, #32]	; (8008888 <Get_SerialNum+0x54>)
 8008868:	68b8      	ldr	r0, [r7, #8]
 800886a:	f000 f80f 	bl	800888c <IntToUnicode>
  }
}
 800886e:	bf00      	nop
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	1ffff7e8 	.word	0x1ffff7e8
 800887c:	1ffff7ec 	.word	0x1ffff7ec
 8008880:	1ffff7f0 	.word	0x1ffff7f0
 8008884:	2000016a 	.word	0x2000016a
 8008888:	2000017a 	.word	0x2000017a

0800888c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800889e:	2300      	movs	r3, #0
 80088a0:	75fb      	strb	r3, [r7, #23]
 80088a2:	e027      	b.n	80088f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	0f1b      	lsrs	r3, r3, #28
 80088a8:	2b09      	cmp	r3, #9
 80088aa:	d80b      	bhi.n	80088c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	0f1b      	lsrs	r3, r3, #28
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4619      	mov	r1, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	440b      	add	r3, r1
 80088bc:	3230      	adds	r2, #48	; 0x30
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	e00a      	b.n	80088da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	0f1b      	lsrs	r3, r3, #28
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	4619      	mov	r1, r3
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	440b      	add	r3, r1
 80088d4:	3237      	adds	r2, #55	; 0x37
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	3301      	adds	r3, #1
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	4413      	add	r3, r2
 80088ea:	2200      	movs	r2, #0
 80088ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	3301      	adds	r3, #1
 80088f2:	75fb      	strb	r3, [r7, #23]
 80088f4:	7dfa      	ldrb	r2, [r7, #23]
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d3d3      	bcc.n	80088a4 <IntToUnicode+0x18>
  }
}
 80088fc:	bf00      	nop
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr

08008908 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a0d      	ldr	r2, [pc, #52]	; (800894c <HAL_PCD_MspInit+0x44>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d113      	bne.n	8008942 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800891a:	4b0d      	ldr	r3, [pc, #52]	; (8008950 <HAL_PCD_MspInit+0x48>)
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	4a0c      	ldr	r2, [pc, #48]	; (8008950 <HAL_PCD_MspInit+0x48>)
 8008920:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008924:	61d3      	str	r3, [r2, #28]
 8008926:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <HAL_PCD_MspInit+0x48>)
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800892e:	60fb      	str	r3, [r7, #12]
 8008930:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008932:	2200      	movs	r2, #0
 8008934:	2100      	movs	r1, #0
 8008936:	2014      	movs	r0, #20
 8008938:	f7f8 f8f3 	bl	8000b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800893c:	2014      	movs	r0, #20
 800893e:	f7f8 f90c 	bl	8000b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008942:	bf00      	nop
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	40005c00 	.word	0x40005c00
 8008950:	40021000 	.word	0x40021000

08008954 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f7fe fdbc 	bl	80074e8 <USBD_LL_SetupStage>
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800898a:	78fa      	ldrb	r2, [r7, #3]
 800898c:	6879      	ldr	r1, [r7, #4]
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	00db      	lsls	r3, r3, #3
 8008996:	440b      	add	r3, r1
 8008998:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	78fb      	ldrb	r3, [r7, #3]
 80089a0:	4619      	mov	r1, r3
 80089a2:	f7fe fdee 	bl	8007582 <USBD_LL_DataOutStage>
}
 80089a6:	bf00      	nop
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	460b      	mov	r3, r1
 80089b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	4613      	mov	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	440b      	add	r3, r1
 80089ce:	333c      	adds	r3, #60	; 0x3c
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	4619      	mov	r1, r3
 80089d6:	f7fe fe45 	bl	8007664 <USBD_LL_DataInStage>
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b082      	sub	sp, #8
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe ff55 	bl	80078a0 <USBD_LL_SOF>
}
 80089f6:	bf00      	nop
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a06:	2301      	movs	r3, #1
 8008a08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d001      	beq.n	8008a16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a12:	f7f7 fde5 	bl	80005e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008a1c:	7bfa      	ldrb	r2, [r7, #15]
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe ff05 	bl	8007830 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fe febe 	bl	80077ae <USBD_LL_Reset>
}
 8008a32:	bf00      	nop
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
	...

08008a3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe feff 	bl	800784e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d005      	beq.n	8008a64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <HAL_PCD_SuspendCallback+0x30>)
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	4a03      	ldr	r2, [pc, #12]	; (8008a6c <HAL_PCD_SuspendCallback+0x30>)
 8008a5e:	f043 0306 	orr.w	r3, r3, #6
 8008a62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	e000ed00 	.word	0xe000ed00

08008a70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fef9 	bl	8007876 <USBD_LL_Resume>
}
 8008a84:	bf00      	nop
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008a94:	4a28      	ldr	r2, [pc, #160]	; (8008b38 <USBD_LL_Init+0xac>)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a26      	ldr	r2, [pc, #152]	; (8008b38 <USBD_LL_Init+0xac>)
 8008aa0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008aa4:	4b24      	ldr	r3, [pc, #144]	; (8008b38 <USBD_LL_Init+0xac>)
 8008aa6:	4a25      	ldr	r2, [pc, #148]	; (8008b3c <USBD_LL_Init+0xb0>)
 8008aa8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008aaa:	4b23      	ldr	r3, [pc, #140]	; (8008b38 <USBD_LL_Init+0xac>)
 8008aac:	2208      	movs	r2, #8
 8008aae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008ab0:	4b21      	ldr	r3, [pc, #132]	; (8008b38 <USBD_LL_Init+0xac>)
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008ab6:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <USBD_LL_Init+0xac>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008abc:	4b1e      	ldr	r3, [pc, #120]	; (8008b38 <USBD_LL_Init+0xac>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008ac2:	4b1d      	ldr	r3, [pc, #116]	; (8008b38 <USBD_LL_Init+0xac>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008ac8:	481b      	ldr	r0, [pc, #108]	; (8008b38 <USBD_LL_Init+0xac>)
 8008aca:	f7f8 f9fd 	bl	8000ec8 <HAL_PCD_Init>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008ad4:	f7f7 fd84 	bl	80005e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ade:	2318      	movs	r3, #24
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	f7f9 ff1c 	bl	8002920 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aee:	2358      	movs	r3, #88	; 0x58
 8008af0:	2200      	movs	r2, #0
 8008af2:	2180      	movs	r1, #128	; 0x80
 8008af4:	f7f9 ff14 	bl	8002920 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008afe:	23c0      	movs	r3, #192	; 0xc0
 8008b00:	2200      	movs	r2, #0
 8008b02:	2181      	movs	r1, #129	; 0x81
 8008b04:	f7f9 ff0c 	bl	8002920 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b0e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008b12:	2200      	movs	r2, #0
 8008b14:	2101      	movs	r1, #1
 8008b16:	f7f9 ff03 	bl	8002920 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b24:	2200      	movs	r2, #0
 8008b26:	2182      	movs	r1, #130	; 0x82
 8008b28:	f7f9 fefa 	bl	8002920 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20000f1c 	.word	0x20000f1c
 8008b3c:	40005c00 	.word	0x40005c00

08008b40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f8 fab5 	bl	80010c6 <HAL_PCD_Start>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f94e 	bl	8008e04 <USBD_Get_USB_Status>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	4608      	mov	r0, r1
 8008b80:	4611      	mov	r1, r2
 8008b82:	461a      	mov	r2, r3
 8008b84:	4603      	mov	r3, r0
 8008b86:	70fb      	strb	r3, [r7, #3]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70bb      	strb	r3, [r7, #2]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b9e:	78bb      	ldrb	r3, [r7, #2]
 8008ba0:	883a      	ldrh	r2, [r7, #0]
 8008ba2:	78f9      	ldrb	r1, [r7, #3]
 8008ba4:	f7f8 fc0a 	bl	80013bc <HAL_PCD_EP_Open>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 f928 	bl	8008e04 <USBD_Get_USB_Status>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bdc:	78fa      	ldrb	r2, [r7, #3]
 8008bde:	4611      	mov	r1, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7f8 fc48 	bl	8001476 <HAL_PCD_EP_Close>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f909 	bl	8008e04 <USBD_Get_USB_Status>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7f8 fcf0 	bl	8001604 <HAL_PCD_EP_SetStall>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 f8ea 	bl	8008e04 <USBD_Get_USB_Status>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c58:	78fa      	ldrb	r2, [r7, #3]
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7f8 fd31 	bl	80016c4 <HAL_PCD_EP_ClrStall>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 f8cb 	bl	8008e04 <USBD_Get_USB_Status>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	da0c      	bge.n	8008cb2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c98:	78fb      	ldrb	r3, [r7, #3]
 8008c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9e:	68f9      	ldr	r1, [r7, #12]
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	440b      	add	r3, r1
 8008cac:	3302      	adds	r3, #2
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	e00b      	b.n	8008cca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cb2:	78fb      	ldrb	r3, [r7, #3]
 8008cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cb8:	68f9      	ldr	r1, [r7, #12]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	00db      	lsls	r3, r3, #3
 8008cc2:	440b      	add	r3, r1
 8008cc4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008cc8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bc80      	pop	{r7}
 8008cd2:	4770      	bx	lr

08008cd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cee:	78fa      	ldrb	r2, [r7, #3]
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7f8 fb3d 	bl	8001372 <HAL_PCD_SetAddress>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 f880 	bl	8008e04 <USBD_Get_USB_Status>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b086      	sub	sp, #24
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	60f8      	str	r0, [r7, #12]
 8008d1a:	607a      	str	r2, [r7, #4]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	460b      	mov	r3, r1
 8008d20:	72fb      	strb	r3, [r7, #11]
 8008d22:	4613      	mov	r3, r2
 8008d24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d34:	893b      	ldrh	r3, [r7, #8]
 8008d36:	7af9      	ldrb	r1, [r7, #11]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	f7f8 fc2c 	bl	8001596 <HAL_PCD_EP_Transmit>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 f85d 	bl	8008e04 <USBD_Get_USB_Status>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	607a      	str	r2, [r7, #4]
 8008d62:	461a      	mov	r2, r3
 8008d64:	460b      	mov	r3, r1
 8008d66:	72fb      	strb	r3, [r7, #11]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d7a:	893b      	ldrh	r3, [r7, #8]
 8008d7c:	7af9      	ldrb	r1, [r7, #11]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	f7f8 fbc1 	bl	8001506 <HAL_PCD_EP_Receive>
 8008d84:	4603      	mov	r3, r0
 8008d86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 f83a 	bl	8008e04 <USBD_Get_USB_Status>
 8008d90:	4603      	mov	r3, r0
 8008d92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d94:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	460b      	mov	r3, r1
 8008da8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008db0:	78fa      	ldrb	r2, [r7, #3]
 8008db2:	4611      	mov	r1, r2
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7f8 fbd7 	bl	8001568 <HAL_PCD_EP_GetRxCount>
 8008dba:	4603      	mov	r3, r0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008dcc:	4b02      	ldr	r3, [pc, #8]	; (8008dd8 <USBD_static_malloc+0x14>)
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bc80      	pop	{r7}
 8008dd6:	4770      	bx	lr
 8008dd8:	2000120c 	.word	0x2000120c

08008ddc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]

}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bc80      	pop	{r7}
 8008dec:	4770      	bx	lr

08008dee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dee:	b480      	push	{r7}
 8008df0:	b083      	sub	sp, #12
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	460b      	mov	r3, r1
 8008df8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008dfa:	bf00      	nop
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bc80      	pop	{r7}
 8008e02:	4770      	bx	lr

08008e04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	d817      	bhi.n	8008e48 <USBD_Get_USB_Status+0x44>
 8008e18:	a201      	add	r2, pc, #4	; (adr r2, 8008e20 <USBD_Get_USB_Status+0x1c>)
 8008e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1e:	bf00      	nop
 8008e20:	08008e31 	.word	0x08008e31
 8008e24:	08008e37 	.word	0x08008e37
 8008e28:	08008e3d 	.word	0x08008e3d
 8008e2c:	08008e43 	.word	0x08008e43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
    break;
 8008e34:	e00b      	b.n	8008e4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e36:	2302      	movs	r3, #2
 8008e38:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3a:	e008      	b.n	8008e4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e40:	e005      	b.n	8008e4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e42:	2302      	movs	r3, #2
 8008e44:	73fb      	strb	r3, [r7, #15]
    break;
 8008e46:	e002      	b.n	8008e4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e48:	2302      	movs	r3, #2
 8008e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4c:	bf00      	nop
  }
  return usb_status;
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop

08008e5c <memset>:
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	4402      	add	r2, r0
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d100      	bne.n	8008e66 <memset+0xa>
 8008e64:	4770      	bx	lr
 8008e66:	f803 1b01 	strb.w	r1, [r3], #1
 8008e6a:	e7f9      	b.n	8008e60 <memset+0x4>

08008e6c <__libc_init_array>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	2600      	movs	r6, #0
 8008e70:	4d0c      	ldr	r5, [pc, #48]	; (8008ea4 <__libc_init_array+0x38>)
 8008e72:	4c0d      	ldr	r4, [pc, #52]	; (8008ea8 <__libc_init_array+0x3c>)
 8008e74:	1b64      	subs	r4, r4, r5
 8008e76:	10a4      	asrs	r4, r4, #2
 8008e78:	42a6      	cmp	r6, r4
 8008e7a:	d109      	bne.n	8008e90 <__libc_init_array+0x24>
 8008e7c:	f000 f828 	bl	8008ed0 <_init>
 8008e80:	2600      	movs	r6, #0
 8008e82:	4d0a      	ldr	r5, [pc, #40]	; (8008eac <__libc_init_array+0x40>)
 8008e84:	4c0a      	ldr	r4, [pc, #40]	; (8008eb0 <__libc_init_array+0x44>)
 8008e86:	1b64      	subs	r4, r4, r5
 8008e88:	10a4      	asrs	r4, r4, #2
 8008e8a:	42a6      	cmp	r6, r4
 8008e8c:	d105      	bne.n	8008e9a <__libc_init_array+0x2e>
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}
 8008e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e94:	4798      	blx	r3
 8008e96:	3601      	adds	r6, #1
 8008e98:	e7ee      	b.n	8008e78 <__libc_init_array+0xc>
 8008e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e9e:	4798      	blx	r3
 8008ea0:	3601      	adds	r6, #1
 8008ea2:	e7f2      	b.n	8008e8a <__libc_init_array+0x1e>
 8008ea4:	08008f54 	.word	0x08008f54
 8008ea8:	08008f54 	.word	0x08008f54
 8008eac:	08008f54 	.word	0x08008f54
 8008eb0:	08008f58 	.word	0x08008f58

08008eb4 <memcpy>:
 8008eb4:	440a      	add	r2, r1
 8008eb6:	4291      	cmp	r1, r2
 8008eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ebc:	d100      	bne.n	8008ec0 <memcpy+0xc>
 8008ebe:	4770      	bx	lr
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ec6:	4291      	cmp	r1, r2
 8008ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ecc:	d1f9      	bne.n	8008ec2 <memcpy+0xe>
 8008ece:	bd10      	pop	{r4, pc}

08008ed0 <_init>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	bf00      	nop
 8008ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed6:	bc08      	pop	{r3}
 8008ed8:	469e      	mov	lr, r3
 8008eda:	4770      	bx	lr

08008edc <_fini>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	bf00      	nop
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr

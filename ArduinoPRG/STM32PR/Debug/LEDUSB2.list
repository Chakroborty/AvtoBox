
LEDUSB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d70  08007d70  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08007d70  08007d70  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d70  08007d70  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d74  08007d74  00017d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08007d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001260  20000184  08007efc  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013e4  08007efc  000213e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de62  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d20  00000000  00000000  0002e052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  00030d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000922  00000000  00000000  000319d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194d5  00000000  00000000  000322fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001035f  00000000  00000000  0004b7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000861e0  00000000  00000000  0005bb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030bc  00000000  00000000  000e1d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e4dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	08007cec 	.word	0x08007cec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	08007cec 	.word	0x08007cec

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa6a 	bl	8000628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f86e 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8fc 	bl	8000354 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f007 f8e0 	bl	8007320 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000160:	f000 f8c2 	bl	80002e8 <MX_SPI1_Init>
  PA4 -LE
  PA5 -SCK
  PA6 -MISO
  PA7 -MOSI
*/
	  	  if (priznak == 1)
 8000164:	4b2d      	ldr	r3, [pc, #180]	; (800021c <main+0xd0>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b01      	cmp	r3, #1
 800016a:	d153      	bne.n	8000214 <main+0xc8>
	{
	  		switch(spi_func[0])
 800016c:	4b2c      	ldr	r3, [pc, #176]	; (8000220 <main+0xd4>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b02      	cmp	r3, #2
 8000172:	d028      	beq.n	80001c6 <main+0x7a>
 8000174:	2b02      	cmp	r3, #2
 8000176:	dc37      	bgt.n	80001e8 <main+0x9c>
 8000178:	2b00      	cmp	r3, #0
 800017a:	d002      	beq.n	8000182 <main+0x36>
 800017c:	2b01      	cmp	r3, #1
 800017e:	d013      	beq.n	80001a8 <main+0x5c>
 8000180:	e032      	b.n	80001e8 <main+0x9c>
	 { case 0:
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	2110      	movs	r1, #16
 8000186:	4827      	ldr	r0, [pc, #156]	; (8000224 <main+0xd8>)
 8000188:	f000 fd66 	bl	8000c58 <HAL_GPIO_WritePin>
	  	//HAL_Delay(10);
		//SPI1->CR1|= SPI_CR1_SPE;
/******************************************************************/
	  	HAL_SPI_Transmit(&hspi1,spi_OUT,NBUTE[0],100);
 800018c:	4b26      	ldr	r3, [pc, #152]	; (8000228 <main+0xdc>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	b29a      	uxth	r2, r3
 8000192:	2364      	movs	r3, #100	; 0x64
 8000194:	4925      	ldr	r1, [pc, #148]	; (800022c <main+0xe0>)
 8000196:	4826      	ldr	r0, [pc, #152]	; (8000230 <main+0xe4>)
 8000198:	f002 fffc 	bl	8003194 <HAL_SPI_Transmit>
/******************************************************************/
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800019c:	2201      	movs	r2, #1
 800019e:	2110      	movs	r1, #16
 80001a0:	4820      	ldr	r0, [pc, #128]	; (8000224 <main+0xd8>)
 80001a2:	f000 fd59 	bl	8000c58 <HAL_GPIO_WritePin>
		// HAL_SPI_DeInit(hspi);
		//SPI1->CR1 &= ~SPI_CR1_SPE;                       //Disable the SPI1  by setting the SPE bit to 0
		break;
 80001a6:	e032      	b.n	800020e <main+0xc2>
		case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2108      	movs	r1, #8
 80001ac:	481d      	ldr	r0, [pc, #116]	; (8000224 <main+0xd8>)
 80001ae:	f000 fd53 	bl	8000c58 <HAL_GPIO_WritePin>
				delay(500);
 80001b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b6:	f000 f943 	bl	8000440 <delay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);break;
 80001ba:	2200      	movs	r2, #0
 80001bc:	2108      	movs	r1, #8
 80001be:	4819      	ldr	r0, [pc, #100]	; (8000224 <main+0xd8>)
 80001c0:	f000 fd4a 	bl	8000c58 <HAL_GPIO_WritePin>
 80001c4:	e023      	b.n	800020e <main+0xc2>
		case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80001c6:	2201      	movs	r2, #1
 80001c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001cc:	4815      	ldr	r0, [pc, #84]	; (8000224 <main+0xd8>)
 80001ce:	f000 fd43 	bl	8000c58 <HAL_GPIO_WritePin>
				delay(500);
 80001d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001d6:	f000 f933 	bl	8000440 <delay>
		        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);break;
 80001da:	2200      	movs	r2, #0
 80001dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001e0:	4810      	ldr	r0, [pc, #64]	; (8000224 <main+0xd8>)
 80001e2:	f000 fd39 	bl	8000c58 <HAL_GPIO_WritePin>
 80001e6:	e012      	b.n	800020e <main+0xc2>
		default:HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2110      	movs	r1, #16
 80001ec:	480d      	ldr	r0, [pc, #52]	; (8000224 <main+0xd8>)
 80001ee:	f000 fd33 	bl	8000c58 <HAL_GPIO_WritePin>
			//SPI1->CR1|= SPI_CR1_SPE;
/******************************************************************/
	  			HAL_SPI_Transmit(&hspi1,spi_OUT,NBUTE[0],100);
 80001f2:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <main+0xdc>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	2364      	movs	r3, #100	; 0x64
 80001fa:	490c      	ldr	r1, [pc, #48]	; (800022c <main+0xe0>)
 80001fc:	480c      	ldr	r0, [pc, #48]	; (8000230 <main+0xe4>)
 80001fe:	f002 ffc9 	bl	8003194 <HAL_SPI_Transmit>
/******************************************************************/
	  			//SPI1->CR1 &= ~SPI_CR1_SPE;                       //Disable the SPI1  by setting the SPE bit to 0
	  			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000202:	2201      	movs	r2, #1
 8000204:	2110      	movs	r1, #16
 8000206:	4807      	ldr	r0, [pc, #28]	; (8000224 <main+0xd8>)
 8000208:	f000 fd26 	bl	8000c58 <HAL_GPIO_WritePin>
	  	break;
 800020c:	bf00      	nop
	 }
		priznak = 0;
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <main+0xd0>)
 8000210:	2200      	movs	r2, #0
 8000212:	701a      	strb	r2, [r3, #0]
	}
    //SPI_I2S_SendData(SPI1, 0x80F1);
   HAL_Delay(5);
 8000214:	2005      	movs	r0, #5
 8000216:	f000 fa69 	bl	80006ec <HAL_Delay>
	  	  if (priznak == 1)
 800021a:	e7a3      	b.n	8000164 <main+0x18>
 800021c:	200001ad 	.word	0x200001ad
 8000220:	200001a8 	.word	0x200001a8
 8000224:	40010800 	.word	0x40010800
 8000228:	200001ac 	.word	0x200001ac
 800022c:	200001a0 	.word	0x200001a0
 8000230:	200001b0 	.word	0x200001b0

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b094      	sub	sp, #80	; 0x50
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f007 fd18 	bl	8007c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	f107 0314 	add.w	r3, r7, #20
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000264:	2301      	movs	r3, #1
 8000266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000280:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000284:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fa6a 	bl	8002764 <HAL_RCC_OscConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000296:	f000 f8e7 	bl	8000468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	230f      	movs	r3, #15
 800029c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fcd6 	bl	8002c68 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002c2:	f000 f8d1 	bl	8000468 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002c6:	2310      	movs	r3, #16
 80002c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f002 fe25 	bl	8002f20 <HAL_RCCEx_PeriphCLKConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002dc:	f000 f8c4 	bl	8000468 <Error_Handler>
  }
}
 80002e0:	bf00      	nop
 80002e2:	3750      	adds	r7, #80	; 0x50
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <MX_SPI1_Init+0x64>)
 80002ee:	4a18      	ldr	r2, [pc, #96]	; (8000350 <MX_SPI1_Init+0x68>)
 80002f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002f2:	4b16      	ldr	r3, [pc, #88]	; (800034c <MX_SPI1_Init+0x64>)
 80002f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_SPI1_Init+0x64>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_SPI1_Init+0x64>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_SPI1_Init+0x64>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_SPI1_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_SPI1_Init+0x64>)
 8000314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000318:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_SPI1_Init+0x64>)
 800031c:	2220      	movs	r2, #32
 800031e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <MX_SPI1_Init+0x64>)
 8000322:	2200      	movs	r2, #0
 8000324:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_SPI1_Init+0x64>)
 8000328:	2200      	movs	r2, #0
 800032a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <MX_SPI1_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_SPI1_Init+0x64>)
 8000334:	220a      	movs	r2, #10
 8000336:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <MX_SPI1_Init+0x64>)
 800033a:	f002 fea7 	bl	800308c <HAL_SPI_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000344:	f000 f890 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	200001b0 	.word	0x200001b0
 8000350:	40013000 	.word	0x40013000

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000368:	4b32      	ldr	r3, [pc, #200]	; (8000434 <MX_GPIO_Init+0xe0>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a31      	ldr	r2, [pc, #196]	; (8000434 <MX_GPIO_Init+0xe0>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b2f      	ldr	r3, [pc, #188]	; (8000434 <MX_GPIO_Init+0xe0>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0310 	and.w	r3, r3, #16
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000380:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <MX_GPIO_Init+0xe0>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a2b      	ldr	r2, [pc, #172]	; (8000434 <MX_GPIO_Init+0xe0>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b29      	ldr	r3, [pc, #164]	; (8000434 <MX_GPIO_Init+0xe0>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0320 	and.w	r3, r3, #32
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	4b26      	ldr	r3, [pc, #152]	; (8000434 <MX_GPIO_Init+0xe0>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a25      	ldr	r2, [pc, #148]	; (8000434 <MX_GPIO_Init+0xe0>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b23      	ldr	r3, [pc, #140]	; (8000434 <MX_GPIO_Init+0xe0>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0304 	and.w	r3, r3, #4
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b6:	4820      	ldr	r0, [pc, #128]	; (8000438 <MX_GPIO_Init+0xe4>)
 80003b8:	f000 fc4e 	bl	8000c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_10, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80003c2:	481e      	ldr	r0, [pc, #120]	; (800043c <MX_GPIO_Init+0xe8>)
 80003c4:	f000 fc48 	bl	8000c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2110      	movs	r1, #16
 80003cc:	481b      	ldr	r0, [pc, #108]	; (800043c <MX_GPIO_Init+0xe8>)
 80003ce:	f000 fc43 	bl	8000c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	2301      	movs	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e0:	2302      	movs	r3, #2
 80003e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e4:	f107 0310 	add.w	r3, r7, #16
 80003e8:	4619      	mov	r1, r3
 80003ea:	4813      	ldr	r0, [pc, #76]	; (8000438 <MX_GPIO_Init+0xe4>)
 80003ec:	f000 fab0 	bl	8000950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80003f0:	2318      	movs	r3, #24
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80003fc:	2301      	movs	r3, #1
 80003fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	4619      	mov	r1, r3
 8000406:	480d      	ldr	r0, [pc, #52]	; (800043c <MX_GPIO_Init+0xe8>)
 8000408:	f000 faa2 	bl	8000950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800040c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2302      	movs	r3, #2
 800041c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	4619      	mov	r1, r3
 8000424:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_GPIO_Init+0xe8>)
 8000426:	f000 fa93 	bl	8000950 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800042a:	bf00      	nop
 800042c:	3720      	adds	r7, #32
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000
 8000438:	40011000 	.word	0x40011000
 800043c:	40010800 	.word	0x40010800

08000440 <delay>:

/* USER CODE BEGIN 4 */
void delay(uint32_t time_delay)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for(i = 0; i < time_delay; i++);
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	e002      	b.n	8000454 <delay+0x14>
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3301      	adds	r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fa      	ldr	r2, [r7, #12]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	429a      	cmp	r2, r3
 800045a:	d3f8      	bcc.n	800044e <delay+0xe>
}
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	e7fe      	b.n	8000470 <Error_Handler+0x8>
	...

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <HAL_MspInit+0x5c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <HAL_MspInit+0x5c>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <HAL_MspInit+0x5c>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <HAL_MspInit+0x5c>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <HAL_MspInit+0x60>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <HAL_MspInit+0x60>)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010000 	.word	0x40010000

080004d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a1b      	ldr	r2, [pc, #108]	; (8000560 <HAL_SPI_MspInit+0x88>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d12f      	bne.n	8000558 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004f8:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <HAL_SPI_MspInit+0x8c>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a19      	ldr	r2, [pc, #100]	; (8000564 <HAL_SPI_MspInit+0x8c>)
 80004fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_SPI_MspInit+0x8c>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_SPI_MspInit+0x8c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a13      	ldr	r2, [pc, #76]	; (8000564 <HAL_SPI_MspInit+0x8c>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <HAL_SPI_MspInit+0x8c>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000528:	23a0      	movs	r3, #160	; 0xa0
 800052a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	2302      	movs	r3, #2
 800052e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000530:	2303      	movs	r3, #3
 8000532:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	4619      	mov	r1, r3
 800053a:	480b      	ldr	r0, [pc, #44]	; (8000568 <HAL_SPI_MspInit+0x90>)
 800053c:	f000 fa08 	bl	8000950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000540:	2340      	movs	r3, #64	; 0x40
 8000542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <HAL_SPI_MspInit+0x90>)
 8000554:	f000 f9fc 	bl	8000950 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40013000 	.word	0x40013000
 8000564:	40021000 	.word	0x40021000
 8000568:	40010800 	.word	0x40010800

0800056c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000570:	e7fe      	b.n	8000570 <NMI_Handler+0x4>

08000572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <HardFault_Handler+0x4>

08000578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <MemManage_Handler+0x4>

0800057e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <BusFault_Handler+0x4>

08000584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <UsageFault_Handler+0x4>

0800058a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b2:	f000 f87f 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005c2:	f000 fc86 	bl	8000ed2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000ed4 	.word	0x20000ed4

080005d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005dc:	f7ff fff8 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005e2:	490c      	ldr	r1, [pc, #48]	; (8000614 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005f8:	4c09      	ldr	r4, [pc, #36]	; (8000620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000606:	f007 fb3f 	bl	8007c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060a:	f7ff fd9f 	bl	800014c <main>
  bx lr
 800060e:	4770      	bx	lr
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000614:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000618:	08007d78 	.word	0x08007d78
  ldr r2, =_sbss
 800061c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000620:	200013e4 	.word	0x200013e4

08000624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC1_2_IRQHandler>
	...

08000628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_Init+0x28>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_Init+0x28>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000638:	2003      	movs	r0, #3
 800063a:	f000 f947 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063e:	200f      	movs	r0, #15
 8000640:	f000 f808 	bl	8000654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000644:	f7ff ff16 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40022000 	.word	0x40022000

08000654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_InitTick+0x54>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_InitTick+0x58>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f95f 	bl	8000936 <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 f927 	bl	80008e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_InitTick+0x5c>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000010 	.word	0x20000010
 80006b0:	2000000c 	.word	0x2000000c

080006b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_IncTick+0x1c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_IncTick+0x20>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a03      	ldr	r2, [pc, #12]	; (80006d4 <HAL_IncTick+0x20>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	20000010 	.word	0x20000010
 80006d4:	20000208 	.word	0x20000208

080006d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;
 80006dc:	4b02      	ldr	r3, [pc, #8]	; (80006e8 <HAL_GetTick+0x10>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	20000208 	.word	0x20000208

080006ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f4:	f7ff fff0 	bl	80006d8 <HAL_GetTick>
 80006f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000704:	d005      	beq.n	8000712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_Delay+0x44>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4413      	add	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000712:	bf00      	nop
 8000714:	f7ff ffe0 	bl	80006d8 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	429a      	cmp	r2, r3
 8000722:	d8f7      	bhi.n	8000714 <HAL_Delay+0x28>
  {
  }
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000010 	.word	0x20000010

08000734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800075c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000766:	4a04      	ldr	r2, [pc, #16]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	60d3      	str	r3, [r2, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__NVIC_GetPriorityGrouping+0x18>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	f003 0307 	and.w	r3, r3, #7
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	db0b      	blt.n	80007c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f003 021f 	and.w	r2, r3, #31
 80007b0:	4906      	ldr	r1, [pc, #24]	; (80007cc <__NVIC_EnableIRQ+0x34>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	095b      	lsrs	r3, r3, #5
 80007b8:	2001      	movs	r0, #1
 80007ba:	fa00 f202 	lsl.w	r2, r0, r2
 80007be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	; (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	; (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b04      	cmp	r3, #4
 8000840:	bf28      	it	cs
 8000842:	2304      	movcs	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3304      	adds	r3, #4
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b03      	subs	r3, #3
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	; 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f7ff ff90 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff2d 	bl	8000734 <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f4:	f7ff ff42 	bl	800077c <__NVIC_GetPriorityGrouping>
 80008f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f7ff ff90 	bl	8000824 <NVIC_EncodePriority>
 8000904:	4602      	mov	r2, r0
 8000906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff5f 	bl	80007d0 <__NVIC_SetPriority>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff35 	bl	8000798 <__NVIC_EnableIRQ>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffa2 	bl	8000888 <SysTick_Config>
 8000944:	4603      	mov	r3, r0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000950:	b480      	push	{r7}
 8000952:	b08b      	sub	sp, #44	; 0x2c
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000962:	e169      	b.n	8000c38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000964:	2201      	movs	r2, #1
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	4013      	ands	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	429a      	cmp	r2, r3
 800097e:	f040 8158 	bne.w	8000c32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	4a9a      	ldr	r2, [pc, #616]	; (8000bf0 <HAL_GPIO_Init+0x2a0>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d05e      	beq.n	8000a4a <HAL_GPIO_Init+0xfa>
 800098c:	4a98      	ldr	r2, [pc, #608]	; (8000bf0 <HAL_GPIO_Init+0x2a0>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d875      	bhi.n	8000a7e <HAL_GPIO_Init+0x12e>
 8000992:	4a98      	ldr	r2, [pc, #608]	; (8000bf4 <HAL_GPIO_Init+0x2a4>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d058      	beq.n	8000a4a <HAL_GPIO_Init+0xfa>
 8000998:	4a96      	ldr	r2, [pc, #600]	; (8000bf4 <HAL_GPIO_Init+0x2a4>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d86f      	bhi.n	8000a7e <HAL_GPIO_Init+0x12e>
 800099e:	4a96      	ldr	r2, [pc, #600]	; (8000bf8 <HAL_GPIO_Init+0x2a8>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d052      	beq.n	8000a4a <HAL_GPIO_Init+0xfa>
 80009a4:	4a94      	ldr	r2, [pc, #592]	; (8000bf8 <HAL_GPIO_Init+0x2a8>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d869      	bhi.n	8000a7e <HAL_GPIO_Init+0x12e>
 80009aa:	4a94      	ldr	r2, [pc, #592]	; (8000bfc <HAL_GPIO_Init+0x2ac>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d04c      	beq.n	8000a4a <HAL_GPIO_Init+0xfa>
 80009b0:	4a92      	ldr	r2, [pc, #584]	; (8000bfc <HAL_GPIO_Init+0x2ac>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d863      	bhi.n	8000a7e <HAL_GPIO_Init+0x12e>
 80009b6:	4a92      	ldr	r2, [pc, #584]	; (8000c00 <HAL_GPIO_Init+0x2b0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d046      	beq.n	8000a4a <HAL_GPIO_Init+0xfa>
 80009bc:	4a90      	ldr	r2, [pc, #576]	; (8000c00 <HAL_GPIO_Init+0x2b0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d85d      	bhi.n	8000a7e <HAL_GPIO_Init+0x12e>
 80009c2:	2b12      	cmp	r3, #18
 80009c4:	d82a      	bhi.n	8000a1c <HAL_GPIO_Init+0xcc>
 80009c6:	2b12      	cmp	r3, #18
 80009c8:	d859      	bhi.n	8000a7e <HAL_GPIO_Init+0x12e>
 80009ca:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <HAL_GPIO_Init+0x80>)
 80009cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d0:	08000a4b 	.word	0x08000a4b
 80009d4:	08000a25 	.word	0x08000a25
 80009d8:	08000a37 	.word	0x08000a37
 80009dc:	08000a79 	.word	0x08000a79
 80009e0:	08000a7f 	.word	0x08000a7f
 80009e4:	08000a7f 	.word	0x08000a7f
 80009e8:	08000a7f 	.word	0x08000a7f
 80009ec:	08000a7f 	.word	0x08000a7f
 80009f0:	08000a7f 	.word	0x08000a7f
 80009f4:	08000a7f 	.word	0x08000a7f
 80009f8:	08000a7f 	.word	0x08000a7f
 80009fc:	08000a7f 	.word	0x08000a7f
 8000a00:	08000a7f 	.word	0x08000a7f
 8000a04:	08000a7f 	.word	0x08000a7f
 8000a08:	08000a7f 	.word	0x08000a7f
 8000a0c:	08000a7f 	.word	0x08000a7f
 8000a10:	08000a7f 	.word	0x08000a7f
 8000a14:	08000a2d 	.word	0x08000a2d
 8000a18:	08000a41 	.word	0x08000a41
 8000a1c:	4a79      	ldr	r2, [pc, #484]	; (8000c04 <HAL_GPIO_Init+0x2b4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d013      	beq.n	8000a4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a22:	e02c      	b.n	8000a7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	623b      	str	r3, [r7, #32]
          break;
 8000a2a:	e029      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	3304      	adds	r3, #4
 8000a32:	623b      	str	r3, [r7, #32]
          break;
 8000a34:	e024      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	3308      	adds	r3, #8
 8000a3c:	623b      	str	r3, [r7, #32]
          break;
 8000a3e:	e01f      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	330c      	adds	r3, #12
 8000a46:	623b      	str	r3, [r7, #32]
          break;
 8000a48:	e01a      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a52:	2304      	movs	r3, #4
 8000a54:	623b      	str	r3, [r7, #32]
          break;
 8000a56:	e013      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d105      	bne.n	8000a6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a60:	2308      	movs	r3, #8
 8000a62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	611a      	str	r2, [r3, #16]
          break;
 8000a6a:	e009      	b.n	8000a80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	615a      	str	r2, [r3, #20]
          break;
 8000a76:	e003      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
          break;
 8000a7c:	e000      	b.n	8000a80 <HAL_GPIO_Init+0x130>
          break;
 8000a7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	2bff      	cmp	r3, #255	; 0xff
 8000a84:	d801      	bhi.n	8000a8a <HAL_GPIO_Init+0x13a>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	e001      	b.n	8000a8e <HAL_GPIO_Init+0x13e>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	2bff      	cmp	r3, #255	; 0xff
 8000a94:	d802      	bhi.n	8000a9c <HAL_GPIO_Init+0x14c>
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	e002      	b.n	8000aa2 <HAL_GPIO_Init+0x152>
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	3b08      	subs	r3, #8
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	6a39      	ldr	r1, [r7, #32]
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	431a      	orrs	r2, r3
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 80b1 	beq.w	8000c32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad0:	4b4d      	ldr	r3, [pc, #308]	; (8000c08 <HAL_GPIO_Init+0x2b8>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a4c      	ldr	r2, [pc, #304]	; (8000c08 <HAL_GPIO_Init+0x2b8>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b4a      	ldr	r3, [pc, #296]	; (8000c08 <HAL_GPIO_Init+0x2b8>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ae8:	4a48      	ldr	r2, [pc, #288]	; (8000c0c <HAL_GPIO_Init+0x2bc>)
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	089b      	lsrs	r3, r3, #2
 8000aee:	3302      	adds	r3, #2
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	220f      	movs	r2, #15
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a40      	ldr	r2, [pc, #256]	; (8000c10 <HAL_GPIO_Init+0x2c0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d013      	beq.n	8000b3c <HAL_GPIO_Init+0x1ec>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a3f      	ldr	r2, [pc, #252]	; (8000c14 <HAL_GPIO_Init+0x2c4>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d00d      	beq.n	8000b38 <HAL_GPIO_Init+0x1e8>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a3e      	ldr	r2, [pc, #248]	; (8000c18 <HAL_GPIO_Init+0x2c8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d007      	beq.n	8000b34 <HAL_GPIO_Init+0x1e4>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a3d      	ldr	r2, [pc, #244]	; (8000c1c <HAL_GPIO_Init+0x2cc>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d101      	bne.n	8000b30 <HAL_GPIO_Init+0x1e0>
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e006      	b.n	8000b3e <HAL_GPIO_Init+0x1ee>
 8000b30:	2304      	movs	r3, #4
 8000b32:	e004      	b.n	8000b3e <HAL_GPIO_Init+0x1ee>
 8000b34:	2302      	movs	r3, #2
 8000b36:	e002      	b.n	8000b3e <HAL_GPIO_Init+0x1ee>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <HAL_GPIO_Init+0x1ee>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b40:	f002 0203 	and.w	r2, r2, #3
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	4093      	lsls	r3, r2
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b4e:	492f      	ldr	r1, [pc, #188]	; (8000c0c <HAL_GPIO_Init+0x2bc>)
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	3302      	adds	r3, #2
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b68:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	492c      	ldr	r1, [pc, #176]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	608b      	str	r3, [r1, #8]
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b76:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	4928      	ldr	r1, [pc, #160]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	4922      	ldr	r1, [pc, #136]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	60cb      	str	r3, [r1, #12]
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	491e      	ldr	r1, [pc, #120]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	4918      	ldr	r1, [pc, #96]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	604b      	str	r3, [r1, #4]
 8000bc4:	e006      	b.n	8000bd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4914      	ldr	r1, [pc, #80]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d021      	beq.n	8000c24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	490e      	ldr	r1, [pc, #56]	; (8000c20 <HAL_GPIO_Init+0x2d0>)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	600b      	str	r3, [r1, #0]
 8000bec:	e021      	b.n	8000c32 <HAL_GPIO_Init+0x2e2>
 8000bee:	bf00      	nop
 8000bf0:	10320000 	.word	0x10320000
 8000bf4:	10310000 	.word	0x10310000
 8000bf8:	10220000 	.word	0x10220000
 8000bfc:	10210000 	.word	0x10210000
 8000c00:	10120000 	.word	0x10120000
 8000c04:	10110000 	.word	0x10110000
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	40010800 	.word	0x40010800
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	40011000 	.word	0x40011000
 8000c1c:	40011400 	.word	0x40011400
 8000c20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_GPIO_Init+0x304>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	4909      	ldr	r1, [pc, #36]	; (8000c54 <HAL_GPIO_Init+0x304>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	3301      	adds	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f47f ae8e 	bne.w	8000964 <HAL_GPIO_Init+0x14>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	372c      	adds	r7, #44	; 0x2c
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40010400 	.word	0x40010400

08000c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c68:	787b      	ldrb	r3, [r7, #1]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c74:	e003      	b.n	8000c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	041a      	lsls	r2, r3, #16
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	611a      	str	r2, [r3, #16]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8a:	b08b      	sub	sp, #44	; 0x2c
 8000c8c:	af06      	add	r7, sp, #24
 8000c8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e0f1      	b.n	8000e7e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d106      	bne.n	8000cb4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f006 fd38 	bl	8007724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 fc77 	bl	80035b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	687e      	ldr	r6, [r7, #4]
 8000cce:	466d      	mov	r5, sp
 8000cd0:	f106 0410 	add.w	r4, r6, #16
 8000cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	602b      	str	r3, [r5, #0]
 8000cdc:	1d33      	adds	r3, r6, #4
 8000cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ce0:	6838      	ldr	r0, [r7, #0]
 8000ce2:	f002 fc41 	bl	8003568 <USB_CoreInit>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2202      	movs	r2, #2
 8000cf0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e0c2      	b.n	8000e7e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 fc72 	bl	80035e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	e040      	b.n	8000d8c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	440b      	add	r3, r1
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	440b      	add	r3, r1
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	1c5a      	adds	r2, r3, #1
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	3303      	adds	r3, #3
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	3338      	adds	r3, #56	; 0x38
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d5e:	7bfa      	ldrb	r2, [r7, #15]
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	440b      	add	r3, r1
 8000d6c:	333c      	adds	r3, #60	; 0x3c
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d72:	7bfa      	ldrb	r2, [r7, #15]
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	440b      	add	r3, r1
 8000d80:	3340      	adds	r3, #64	; 0x40
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	7bfa      	ldrb	r2, [r7, #15]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d3b9      	bcc.n	8000d0a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e044      	b.n	8000e26 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d9c:	7bfa      	ldrb	r2, [r7, #15]
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	440b      	add	r3, r1
 8000daa:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000dc4:	7bfa      	ldrb	r2, [r7, #15]
 8000dc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000dc8:	7bfa      	ldrb	r2, [r7, #15]
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	440b      	add	r3, r1
 8000dd6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000dde:	7bfa      	ldrb	r2, [r7, #15]
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000df4:	7bfa      	ldrb	r2, [r7, #15]
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	440b      	add	r3, r1
 8000e02:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e0a:	7bfa      	ldrb	r2, [r7, #15]
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	440b      	add	r3, r1
 8000e18:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	3301      	adds	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	7bfa      	ldrb	r2, [r7, #15]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d3b5      	bcc.n	8000d9c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	687e      	ldr	r6, [r7, #4]
 8000e38:	466d      	mov	r5, sp
 8000e3a:	f106 0410 	add.w	r4, r6, #16
 8000e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	602b      	str	r3, [r5, #0]
 8000e46:	1d33      	adds	r3, r6, #4
 8000e48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e4a:	6838      	ldr	r0, [r7, #0]
 8000e4c:	f002 fbd8 	bl	8003600 <USB_DevInit>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2202      	movs	r2, #2
 8000e5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00d      	b.n	8000e7e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f004 fe59 	bl	8005b2e <USB_DevDisconnect>

  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d101      	bne.n	8000e9c <HAL_PCD_Start+0x16>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	e016      	b.n	8000eca <HAL_PCD_Start+0x44>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f002 fb6d 	bl	8003588 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000eae:	2101      	movs	r1, #1
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f006 feaa 	bl	8007c0a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f004 fe2d 	bl	8005b1a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b088      	sub	sp, #32
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f004 fe2f 	bl	8005b42 <USB_ReadInterrupts>
 8000ee4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 fb1b 	bl	800152c <PCD_EP_ISR_Handler>

    return;
 8000ef6:	e119      	b.n	800112c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d013      	beq.n	8000f2a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f14:	b292      	uxth	r2, r2
 8000f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f006 fc7d 	bl	800781a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f20:	2100      	movs	r1, #0
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f905 	bl	8001132 <HAL_PCD_SetAddress>

    return;
 8000f28:	e100      	b.n	800112c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00c      	beq.n	8000f4e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f46:	b292      	uxth	r2, r2
 8000f48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f4c:	e0ee      	b.n	800112c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00c      	beq.n	8000f72 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f70:	e0dc      	b.n	800112c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d027      	beq.n	8000fcc <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0204 	bic.w	r2, r2, #4
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0208 	bic.w	r2, r2, #8
 8000fa6:	b292      	uxth	r2, r2
 8000fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f006 fc6d 	bl	800788c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fc4:	b292      	uxth	r2, r2
 8000fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000fca:	e0af      	b.n	800112c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8083 	beq.w	80010de <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	77fb      	strb	r3, [r7, #31]
 8000fdc:	e010      	b.n	8001000 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	7ffb      	ldrb	r3, [r7, #31]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	441a      	add	r2, r3
 8000fea:	7ffb      	ldrb	r3, [r7, #31]
 8000fec:	8812      	ldrh	r2, [r2, #0]
 8000fee:	b292      	uxth	r2, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	3320      	adds	r3, #32
 8000ff4:	443b      	add	r3, r7
 8000ff6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000ffa:	7ffb      	ldrb	r3, [r7, #31]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	77fb      	strb	r3, [r7, #31]
 8001000:	7ffb      	ldrb	r3, [r7, #31]
 8001002:	2b07      	cmp	r3, #7
 8001004:	d9eb      	bls.n	8000fde <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800100e:	b29a      	uxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f042 0201 	orr.w	r2, r2, #1
 8001018:	b292      	uxth	r2, r2
 800101a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001026:	b29a      	uxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0201 	bic.w	r2, r2, #1
 8001030:	b292      	uxth	r2, r2
 8001032:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001036:	bf00      	nop
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001040:	b29b      	uxth	r3, r3
 8001042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f6      	beq.n	8001038 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001052:	b29a      	uxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800105c:	b292      	uxth	r2, r2
 800105e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001062:	2300      	movs	r3, #0
 8001064:	77fb      	strb	r3, [r7, #31]
 8001066:	e00f      	b.n	8001088 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001068:	7ffb      	ldrb	r3, [r7, #31]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6812      	ldr	r2, [r2, #0]
 800106e:	4611      	mov	r1, r2
 8001070:	7ffa      	ldrb	r2, [r7, #31]
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	440a      	add	r2, r1
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	3320      	adds	r3, #32
 800107a:	443b      	add	r3, r7
 800107c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001080:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001082:	7ffb      	ldrb	r3, [r7, #31]
 8001084:	3301      	adds	r3, #1
 8001086:	77fb      	strb	r3, [r7, #31]
 8001088:	7ffb      	ldrb	r3, [r7, #31]
 800108a:	2b07      	cmp	r3, #7
 800108c:	d9ec      	bls.n	8001068 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0208 	orr.w	r2, r2, #8
 80010a0:	b292      	uxth	r2, r2
 80010a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010b8:	b292      	uxth	r2, r2
 80010ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0204 	orr.w	r2, r2, #4
 80010d0:	b292      	uxth	r2, r2
 80010d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f006 fbbe 	bl	8007858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010dc:	e026      	b.n	800112c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00f      	beq.n	8001108 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010fa:	b292      	uxth	r2, r2
 80010fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f006 fb7c 	bl	80077fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001106:	e011      	b.n	800112c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00c      	beq.n	800112c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001124:	b292      	uxth	r2, r2
 8001126:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800112a:	bf00      	nop
  }
}
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_PCD_SetAddress+0x1a>
 8001148:	2302      	movs	r3, #2
 800114a:	e013      	b.n	8001174 <HAL_PCD_SetAddress+0x42>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	78fa      	ldrb	r2, [r7, #3]
 8001158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	78fa      	ldrb	r2, [r7, #3]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f004 fcc5 	bl	8005af4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	4608      	mov	r0, r1
 8001186:	4611      	mov	r1, r2
 8001188:	461a      	mov	r2, r3
 800118a:	4603      	mov	r3, r0
 800118c:	70fb      	strb	r3, [r7, #3]
 800118e:	460b      	mov	r3, r1
 8001190:	803b      	strh	r3, [r7, #0]
 8001192:	4613      	mov	r3, r2
 8001194:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800119a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	da0e      	bge.n	80011c0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2201      	movs	r2, #1
 80011bc:	705a      	strb	r2, [r3, #1]
 80011be:	e00e      	b.n	80011de <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	f003 0207 	and.w	r2, r3, #7
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80011de:	78fb      	ldrb	r3, [r7, #3]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80011ea:	883a      	ldrh	r2, [r7, #0]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	78ba      	ldrb	r2, [r7, #2]
 80011f4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80011f6:	78bb      	ldrb	r3, [r7, #2]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d102      	bne.n	8001202 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001208:	2b01      	cmp	r3, #1
 800120a:	d101      	bne.n	8001210 <HAL_PCD_EP_Open+0x94>
 800120c:	2302      	movs	r3, #2
 800120e:	e00e      	b.n	800122e <HAL_PCD_EP_Open+0xb2>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68f9      	ldr	r1, [r7, #12]
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fa0e 	bl	8003640 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800122c:	7afb      	ldrb	r3, [r7, #11]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001246:	2b00      	cmp	r3, #0
 8001248:	da0e      	bge.n	8001268 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2201      	movs	r2, #1
 8001264:	705a      	strb	r2, [r3, #1]
 8001266:	e00e      	b.n	8001286 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	f003 0207 	and.w	r2, r3, #7
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	b2da      	uxtb	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_PCD_EP_Close+0x6a>
 800129c:	2302      	movs	r3, #2
 800129e:	e00e      	b.n	80012be <HAL_PCD_EP_Close+0x88>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68f9      	ldr	r1, [r7, #12]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fd86 	bl	8003dc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	460b      	mov	r3, r1
 80012d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	f003 0207 	and.w	r2, r3, #7
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2200      	movs	r2, #0
 8001304:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	b2da      	uxtb	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6979      	ldr	r1, [r7, #20]
 8001318:	4618      	mov	r0, r3
 800131a:	f002 ff3d 	bl	8004198 <USB_EPStartXfer>

  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	f003 0207 	and.w	r2, r3, #7
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	460b      	mov	r3, r1
 8001364:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001366:	7afb      	ldrb	r3, [r7, #11]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4413      	add	r3, r2
 800137a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	2201      	movs	r2, #1
 80013a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013a2:	7afb      	ldrb	r3, [r7, #11]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6979      	ldr	r1, [r7, #20]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 feef 	bl	8004198 <USB_EPStartXfer>

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	f003 0207 	and.w	r2, r3, #7
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d901      	bls.n	80013e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e04c      	b.n	800147c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	da0e      	bge.n	8001408 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	705a      	strb	r2, [r3, #1]
 8001406:	e00c      	b.n	8001422 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001408:	78fa      	ldrb	r2, [r7, #3]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	b2da      	uxtb	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <HAL_PCD_EP_SetStall+0x7e>
 800143e:	2302      	movs	r3, #2
 8001440:	e01c      	b.n	800147c <HAL_PCD_EP_SetStall+0xb8>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68f9      	ldr	r1, [r7, #12]
 8001450:	4618      	mov	r0, r3
 8001452:	f004 fa52 	bl	80058fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	2b00      	cmp	r3, #0
 800145e:	d108      	bne.n	8001472 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800146a:	4619      	mov	r1, r3
 800146c:	4610      	mov	r0, r2
 800146e:	f004 fb77 	bl	8005b60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	f003 020f 	and.w	r2, r3, #15
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	429a      	cmp	r2, r3
 800149c:	d901      	bls.n	80014a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e040      	b.n	8001524 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	da0e      	bge.n	80014c8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2201      	movs	r2, #1
 80014c4:	705a      	strb	r2, [r3, #1]
 80014c6:	e00e      	b.n	80014e6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	f003 0207 	and.w	r2, r3, #7
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_PCD_EP_ClrStall+0x82>
 8001502:	2302      	movs	r3, #2
 8001504:	e00e      	b.n	8001524 <HAL_PCD_EP_ClrStall+0xa0>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68f9      	ldr	r1, [r7, #12]
 8001514:	4618      	mov	r0, r3
 8001516:	f004 fa40 	bl	800599a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b096      	sub	sp, #88	; 0x58
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001534:	e3bf      	b.n	8001cb6 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800153e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001542:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001550:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001554:	2b00      	cmp	r3, #0
 8001556:	f040 8179 	bne.w	800184c <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800155a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	d152      	bne.n	800160c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	89fb      	ldrh	r3, [r7, #14]
 800157e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001586:	b29b      	uxth	r3, r3
 8001588:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3328      	adds	r3, #40	; 0x28
 800158e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001598:	b29b      	uxth	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4413      	add	r3, r2
 80015a4:	3302      	adds	r3, #2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	441a      	add	r2, r3
 80015c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015ca:	2100      	movs	r1, #0
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f006 f8fc 	bl	80077ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 836b 	beq.w	8001cb6 <PCD_EP_ISR_Handler+0x78a>
 80015e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f040 8366 	bne.w	8001cb6 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b292      	uxth	r2, r2
 80015fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800160a:	e354      	b.n	8001cb6 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001612:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800161e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001626:	2b00      	cmp	r3, #0
 8001628:	d034      	beq.n	8001694 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001632:	b29b      	uxth	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	3306      	adds	r3, #6
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	4413      	add	r3, r2
 8001648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001654:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001662:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001666:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001668:	b29b      	uxth	r3, r3
 800166a:	f004 fac9 	bl	8005c00 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	b29a      	uxth	r2, r3
 8001676:	f640 738f 	movw	r3, #3983	; 0xf8f
 800167a:	4013      	ands	r3, r2
 800167c:	823b      	strh	r3, [r7, #16]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	8a3a      	ldrh	r2, [r7, #16]
 8001684:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001688:	b292      	uxth	r2, r2
 800168a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f006 f86f 	bl	8007770 <HAL_PCD_SetupStageCallback>
 8001692:	e310      	b.n	8001cb6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001694:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001698:	2b00      	cmp	r3, #0
 800169a:	f280 830c 	bge.w	8001cb6 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016aa:	4013      	ands	r3, r2
 80016ac:	83fb      	strh	r3, [r7, #30]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	8bfa      	ldrh	r2, [r7, #30]
 80016b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016b8:	b292      	uxth	r2, r2
 80016ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	3306      	adds	r3, #6
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80016e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d019      	beq.n	8001724 <PCD_EP_ISR_Handler+0x1f8>
 80016f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d015      	beq.n	8001724 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fe:	6959      	ldr	r1, [r3, #20]
 8001700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001702:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001706:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001708:	b29b      	uxth	r3, r3
 800170a:	f004 fa79 	bl	8005c00 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800170e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	441a      	add	r2, r3
 8001718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800171c:	2100      	movs	r1, #0
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f006 f838 	bl	8007794 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800172e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 82bd 	bne.w	8001cb6 <PCD_EP_ISR_Handler+0x78a>
 800173c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001740:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001744:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001748:	f000 82b5 	beq.w	8001cb6 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	61bb      	str	r3, [r7, #24]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800175a:	b29b      	uxth	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4413      	add	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001776:	b29a      	uxth	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	801a      	strh	r2, [r3, #0]
 800177c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	2b3e      	cmp	r3, #62	; 0x3e
 8001782:	d91d      	bls.n	80017c0 <PCD_EP_ISR_Handler+0x294>
 8001784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	095b      	lsrs	r3, r3, #5
 800178a:	647b      	str	r3, [r7, #68]	; 0x44
 800178c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <PCD_EP_ISR_Handler+0x272>
 8001798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800179a:	3b01      	subs	r3, #1
 800179c:	647b      	str	r3, [r7, #68]	; 0x44
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	029b      	lsls	r3, r3, #10
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	e026      	b.n	800180e <PCD_EP_ISR_Handler+0x2e2>
 80017c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10a      	bne.n	80017de <PCD_EP_ISR_Handler+0x2b2>
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	e017      	b.n	800180e <PCD_EP_ISR_Handler+0x2e2>
 80017de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	085b      	lsrs	r3, r3, #1
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
 80017e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <PCD_EP_ISR_Handler+0x2cc>
 80017f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f4:	3301      	adds	r3, #1
 80017f6:	647b      	str	r3, [r7, #68]	; 0x44
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001800:	b29b      	uxth	r3, r3
 8001802:	029b      	lsls	r3, r3, #10
 8001804:	b29b      	uxth	r3, r3
 8001806:	4313      	orrs	r3, r2
 8001808:	b29a      	uxth	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b29b      	uxth	r3, r3
 8001816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800181a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181e:	827b      	strh	r3, [r7, #18]
 8001820:	8a7b      	ldrh	r3, [r7, #18]
 8001822:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001826:	827b      	strh	r3, [r7, #18]
 8001828:	8a7b      	ldrh	r3, [r7, #18]
 800182a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800182e:	827b      	strh	r3, [r7, #18]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	8a7b      	ldrh	r3, [r7, #18]
 8001836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800183a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800183e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001846:	b29b      	uxth	r3, r3
 8001848:	8013      	strh	r3, [r2, #0]
 800184a:	e234      	b.n	8001cb6 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001860:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001864:	2b00      	cmp	r3, #0
 8001866:	f280 80fc 	bge.w	8001a62 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29a      	uxth	r2, r3
 800187c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001880:	4013      	ands	r3, r2
 8001882:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001898:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800189c:	b292      	uxth	r2, r2
 800189e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80018a0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80018b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b8:	7b1b      	ldrb	r3, [r3, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d125      	bne.n	800190a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	3306      	adds	r3, #6
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018e6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80018ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8092 	beq.w	8001a18 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fa:	6959      	ldr	r1, [r3, #20]
 80018fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fe:	88da      	ldrh	r2, [r3, #6]
 8001900:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001904:	f004 f97c 	bl	8005c00 <USB_ReadPMA>
 8001908:	e086      	b.n	8001a18 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800190a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190c:	78db      	ldrb	r3, [r3, #3]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d10a      	bne.n	8001928 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001912:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001916:	461a      	mov	r2, r3
 8001918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f9d9 	bl	8001cd2 <HAL_PCD_EP_DB_Receive>
 8001920:	4603      	mov	r3, r0
 8001922:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001926:	e077      	b.n	8001a18 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800193e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001942:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	441a      	add	r2, r3
 8001954:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800195c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001964:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001968:	b29b      	uxth	r3, r3
 800196a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	b29b      	uxth	r3, r3
 800197e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d024      	beq.n	80019d0 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800198e:	b29b      	uxth	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4413      	add	r3, r2
 800199a:	3302      	adds	r3, #2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80019b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d02e      	beq.n	8001a18 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c0:	6959      	ldr	r1, [r3, #20]
 80019c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c4:	891a      	ldrh	r2, [r3, #8]
 80019c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019ca:	f004 f919 	bl	8005c00 <USB_ReadPMA>
 80019ce:	e023      	b.n	8001a18 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019d8:	b29b      	uxth	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4413      	add	r3, r2
 80019e4:	3306      	adds	r3, #6
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80019fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d009      	beq.n	8001a18 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0a:	6959      	ldr	r1, [r3, #20]
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0e:	895a      	ldrh	r2, [r3, #10]
 8001a10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a14:	f004 f8f4 	bl	8005c00 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a20:	441a      	add	r2, r3
 8001a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a24:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a2e:	441a      	add	r2, r3
 8001a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a32:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <PCD_EP_ISR_Handler+0x51c>
 8001a3c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d206      	bcs.n	8001a56 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f005 fea0 	bl	8007794 <HAL_PCD_DataOutStageCallback>
 8001a54:	e005      	b.n	8001a62 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 fb9b 	bl	8004198 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8123 	beq.w	8001cb6 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a70:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	441a      	add	r2, r3
 8001ab0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac2:	78db      	ldrb	r3, [r3, #3]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	f040 80a2 	bne.w	8001c0e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad2:	7b1b      	ldrb	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 8093 	beq.w	8001c00 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ada:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d046      	beq.n	8001b74 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d126      	bne.n	8001b3c <PCD_EP_ISR_Handler+0x610>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	4413      	add	r3, r2
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
 8001b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	011a      	lsls	r2, r3, #4
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	4413      	add	r3, r2
 8001b10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001b14:	623b      	str	r3, [r7, #32]
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	801a      	strh	r2, [r3, #0]
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	801a      	strh	r2, [r3, #0]
 8001b3a:	e061      	b.n	8001c00 <PCD_EP_ISR_Handler+0x6d4>
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3e:	785b      	ldrb	r3, [r3, #1]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d15d      	bne.n	8001c00 <PCD_EP_ISR_Handler+0x6d4>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b58:	4413      	add	r3, r2
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	011a      	lsls	r2, r3, #4
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	4413      	add	r3, r2
 8001b66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6e:	2200      	movs	r2, #0
 8001b70:	801a      	strh	r2, [r3, #0]
 8001b72:	e045      	b.n	8001c00 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d126      	bne.n	8001bd0 <PCD_EP_ISR_Handler+0x6a4>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b96:	4413      	add	r3, r2
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	011a      	lsls	r2, r3, #4
 8001ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8001baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	801a      	strh	r2, [r3, #0]
 8001bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bcc:	801a      	strh	r2, [r3, #0]
 8001bce:	e017      	b.n	8001c00 <PCD_EP_ISR_Handler+0x6d4>
 8001bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d113      	bne.n	8001c00 <PCD_EP_ISR_Handler+0x6d4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001be6:	4413      	add	r3, r2
 8001be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	011a      	lsls	r2, r3, #4
 8001bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001bf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f005 fddf 	bl	80077ca <HAL_PCD_DataInStageCallback>
 8001c0c:	e053      	b.n	8001cb6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001c0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d146      	bne.n	8001ca8 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d907      	bls.n	8001c62 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c5a:	1ad2      	subs	r2, r2, r3
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5e:	619a      	str	r2, [r3, #24]
 8001c60:	e002      	b.n	8001c68 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d106      	bne.n	8001c7e <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f005 fda7 	bl	80077ca <HAL_PCD_DataInStageCallback>
 8001c7c:	e01b      	b.n	8001cb6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c86:	441a      	add	r2, r3
 8001c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8e:	69da      	ldr	r2, [r3, #28]
 8001c90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c94:	441a      	add	r2, r3
 8001c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c98:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 fa79 	bl	8004198 <USB_EPStartXfer>
 8001ca6:	e006      	b.n	8001cb6 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ca8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cac:	461a      	mov	r2, r3
 8001cae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f91b 	bl	8001eec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f6ff ac37 	blt.w	8001536 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3758      	adds	r7, #88	; 0x58
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b088      	sub	sp, #32
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d07e      	beq.n	8001de8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d12:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	8b7b      	ldrh	r3, [r7, #26]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d306      	bcc.n	8001d2c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	8b7b      	ldrh	r3, [r7, #26]
 8001d24:	1ad2      	subs	r2, r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	619a      	str	r2, [r3, #24]
 8001d2a:	e002      	b.n	8001d32 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d123      	bne.n	8001d82 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d54:	833b      	strh	r3, [r7, #24]
 8001d56:	8b3b      	ldrh	r3, [r7, #24]
 8001d58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d5c:	833b      	strh	r3, [r7, #24]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	441a      	add	r2, r3
 8001d6c:	8b3b      	ldrh	r3, [r7, #24]
 8001d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01f      	beq.n	8001dcc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da6:	82fb      	strh	r3, [r7, #22]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	441a      	add	r2, r3
 8001db6:	8afb      	ldrh	r3, [r7, #22]
 8001db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001dcc:	8b7b      	ldrh	r3, [r7, #26]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8087 	beq.w	8001ee2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	6959      	ldr	r1, [r3, #20]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	891a      	ldrh	r2, [r3, #8]
 8001de0:	8b7b      	ldrh	r3, [r7, #26]
 8001de2:	f003 ff0d 	bl	8005c00 <USB_ReadPMA>
 8001de6:	e07c      	b.n	8001ee2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3306      	adds	r3, #6
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e10:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	8b7b      	ldrh	r3, [r7, #26]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d306      	bcc.n	8001e2a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	699a      	ldr	r2, [r3, #24]
 8001e20:	8b7b      	ldrh	r3, [r7, #26]
 8001e22:	1ad2      	subs	r2, r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	619a      	str	r2, [r3, #24]
 8001e28:	e002      	b.n	8001e30 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d123      	bne.n	8001e80 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e52:	83fb      	strh	r3, [r7, #30]
 8001e54:	8bfb      	ldrh	r3, [r7, #30]
 8001e56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e5a:	83fb      	strh	r3, [r7, #30]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	441a      	add	r2, r3
 8001e6a:	8bfb      	ldrh	r3, [r7, #30]
 8001e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d11f      	bne.n	8001eca <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea4:	83bb      	strh	r3, [r7, #28]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	441a      	add	r2, r3
 8001eb4:	8bbb      	ldrh	r3, [r7, #28]
 8001eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001eca:	8b7b      	ldrh	r3, [r7, #26]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	6959      	ldr	r1, [r3, #20]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	895a      	ldrh	r2, [r3, #10]
 8001edc:	8b7b      	ldrh	r3, [r7, #26]
 8001ede:	f003 fe8f 	bl	8005c00 <USB_ReadPMA>
    }
  }

  return count;
 8001ee2:	8b7b      	ldrh	r3, [r7, #26]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0a4      	sub	sp, #144	; 0x90
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 81dd 	beq.w	80022c0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f2e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d907      	bls.n	8001f4e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f46:	1ad2      	subs	r2, r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	619a      	str	r2, [r3, #24]
 8001f4c:	e002      	b.n	8001f54 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f040 80b9 	bne.w	80020d0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d126      	bne.n	8001fb4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7a:	4413      	add	r3, r2
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	011a      	lsls	r2, r3, #4
 8001f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f86:	4413      	add	r3, r2
 8001f88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9c:	801a      	strh	r2, [r3, #0]
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	e01a      	b.n	8001fea <HAL_PCD_EP_DB_Transmit+0xfe>
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	785b      	ldrb	r3, [r3, #1]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d116      	bne.n	8001fea <HAL_PCD_EP_DB_Transmit+0xfe>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd0:	4413      	add	r3, r2
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	011a      	lsls	r2, r3, #4
 8001fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fdc:	4413      	add	r3, r2
 8001fde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d126      	bne.n	8002046 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	4413      	add	r3, r2
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	011a      	lsls	r2, r3, #4
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800202a:	b29a      	uxth	r2, r3
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	801a      	strh	r2, [r3, #0]
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800203a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203e:	b29a      	uxth	r2, r3
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	801a      	strh	r2, [r3, #0]
 8002044:	e017      	b.n	8002076 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	785b      	ldrb	r3, [r3, #1]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d113      	bne.n	8002076 <HAL_PCD_EP_DB_Transmit+0x18a>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002056:	b29b      	uxth	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	4413      	add	r3, r2
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	011a      	lsls	r2, r3, #4
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	4413      	add	r3, r2
 800206a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800206e:	623b      	str	r3, [r7, #32]
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	2200      	movs	r2, #0
 8002074:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f005 fba4 	bl	80077ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 82fc 	beq.w	8002686 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a8:	82fb      	strh	r3, [r7, #22]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	441a      	add	r2, r3
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	8013      	strh	r3, [r2, #0]
 80020ce:	e2da      	b.n	8002686 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d021      	beq.n	800211e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	441a      	add	r2, r3
 8002106:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800210a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800210e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002112:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211a:	b29b      	uxth	r3, r3
 800211c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002124:	2b01      	cmp	r3, #1
 8002126:	f040 82ae 	bne.w	8002686 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002132:	441a      	add	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002140:	441a      	add	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	6a1a      	ldr	r2, [r3, #32]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	429a      	cmp	r2, r3
 8002150:	d30b      	bcc.n	800216a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	621a      	str	r2, [r3, #32]
 8002168:	e017      	b.n	800219a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d108      	bne.n	8002184 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002172:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002182:	e00a      	b.n	800219a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2200      	movs	r2, #0
 8002198:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d165      	bne.n	800226e <HAL_PCD_EP_DB_Transmit+0x382>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b6:	4413      	add	r3, r2
 80021b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	011a      	lsls	r2, r3, #4
 80021c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c2:	4413      	add	r3, r2
 80021c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d8:	801a      	strh	r2, [r3, #0]
 80021da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021de:	2b3e      	cmp	r3, #62	; 0x3e
 80021e0:	d91d      	bls.n	800221e <HAL_PCD_EP_DB_Transmit+0x332>
 80021e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80021ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <HAL_PCD_EP_DB_Transmit+0x310>
 80021f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f8:	3b01      	subs	r3, #1
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80021fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29a      	uxth	r2, r3
 8002202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002204:	b29b      	uxth	r3, r3
 8002206:	029b      	lsls	r3, r3, #10
 8002208:	b29b      	uxth	r3, r3
 800220a:	4313      	orrs	r3, r2
 800220c:	b29b      	uxth	r3, r3
 800220e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002216:	b29a      	uxth	r2, r3
 8002218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221a:	801a      	strh	r2, [r3, #0]
 800221c:	e044      	b.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800221e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10a      	bne.n	800223c <HAL_PCD_EP_DB_Transmit+0x350>
 8002226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002234:	b29a      	uxth	r2, r3
 8002236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002238:	801a      	strh	r2, [r3, #0]
 800223a:	e035      	b.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800223c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	64bb      	str	r3, [r7, #72]	; 0x48
 8002244:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002252:	3301      	adds	r3, #1
 8002254:	64bb      	str	r3, [r7, #72]	; 0x48
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29a      	uxth	r2, r3
 800225c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800225e:	b29b      	uxth	r3, r3
 8002260:	029b      	lsls	r3, r3, #10
 8002262:	b29b      	uxth	r3, r3
 8002264:	4313      	orrs	r3, r2
 8002266:	b29a      	uxth	r2, r3
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	801a      	strh	r2, [r3, #0]
 800226c:	e01c      	b.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	785b      	ldrb	r3, [r3, #1]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d118      	bne.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	647b      	str	r3, [r7, #68]	; 0x44
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002284:	b29b      	uxth	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800228a:	4413      	add	r3, r2
 800228c:	647b      	str	r3, [r7, #68]	; 0x44
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	011a      	lsls	r2, r3, #4
 8002294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002296:	4413      	add	r3, r2
 8002298:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800229c:	643b      	str	r3, [r7, #64]	; 0x40
 800229e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	6959      	ldr	r1, [r3, #20]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	891a      	ldrh	r2, [r3, #8]
 80022b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	f003 fc5c 	bl	8005b76 <USB_WritePMA>
 80022be:	e1e2      	b.n	8002686 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	3306      	adds	r3, #6
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d307      	bcc.n	8002308 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002300:	1ad2      	subs	r2, r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	619a      	str	r2, [r3, #24]
 8002306:	e002      	b.n	800230e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 80c0 	bne.w	8002498 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	785b      	ldrb	r3, [r3, #1]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d126      	bne.n	800236e <HAL_PCD_EP_DB_Transmit+0x482>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002334:	4413      	add	r3, r2
 8002336:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	011a      	lsls	r2, r3, #4
 800233e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002340:	4413      	add	r3, r2
 8002342:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002346:	67bb      	str	r3, [r7, #120]	; 0x78
 8002348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	b29b      	uxth	r3, r3
 800234e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002352:	b29a      	uxth	r2, r3
 8002354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002356:	801a      	strh	r2, [r3, #0]
 8002358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002366:	b29a      	uxth	r2, r3
 8002368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800236a:	801a      	strh	r2, [r3, #0]
 800236c:	e01a      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	785b      	ldrb	r3, [r3, #1]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d116      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	667b      	str	r3, [r7, #100]	; 0x64
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002384:	b29b      	uxth	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800238a:	4413      	add	r3, r2
 800238c:	667b      	str	r3, [r7, #100]	; 0x64
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	011a      	lsls	r2, r3, #4
 8002394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002396:	4413      	add	r3, r2
 8002398:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
 800239e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023a0:	2200      	movs	r2, #0
 80023a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	677b      	str	r3, [r7, #116]	; 0x74
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	785b      	ldrb	r3, [r3, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d12b      	bne.n	800240a <HAL_PCD_EP_DB_Transmit+0x51e>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c6:	4413      	add	r3, r2
 80023c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	011a      	lsls	r2, r3, #4
 80023d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d2:	4413      	add	r3, r2
 80023d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ee:	801a      	strh	r2, [r3, #0]
 80023f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002400:	b29a      	uxth	r2, r3
 8002402:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002406:	801a      	strh	r2, [r3, #0]
 8002408:	e017      	b.n	800243a <HAL_PCD_EP_DB_Transmit+0x54e>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	785b      	ldrb	r3, [r3, #1]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d113      	bne.n	800243a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002420:	4413      	add	r3, r2
 8002422:	677b      	str	r3, [r7, #116]	; 0x74
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	011a      	lsls	r2, r3, #4
 800242a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242c:	4413      	add	r3, r2
 800242e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002432:	673b      	str	r3, [r7, #112]	; 0x70
 8002434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002436:	2200      	movs	r2, #0
 8002438:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f005 f9c2 	bl	80077ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 811a 	bne.w	8002686 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	441a      	add	r2, r3
 800247e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800248a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800248e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002492:	b29b      	uxth	r3, r3
 8002494:	8013      	strh	r3, [r2, #0]
 8002496:	e0f6      	b.n	8002686 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d121      	bne.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	441a      	add	r2, r3
 80024ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	f040 80ca 	bne.w	8002686 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024fa:	441a      	add	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002508:	441a      	add	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	6a1a      	ldr	r2, [r3, #32]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	429a      	cmp	r2, r3
 8002518:	d30b      	bcc.n	8002532 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6a1a      	ldr	r2, [r3, #32]
 8002526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800252a:	1ad2      	subs	r2, r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	621a      	str	r2, [r3, #32]
 8002530:	e017      	b.n	8002562 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d108      	bne.n	800254c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800253a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800253e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800254a:	e00a      	b.n	8002562 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2200      	movs	r2, #0
 8002558:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	657b      	str	r3, [r7, #84]	; 0x54
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d165      	bne.n	800263c <HAL_PCD_EP_DB_Transmit+0x750>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002584:	4413      	add	r3, r2
 8002586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	011a      	lsls	r2, r3, #4
 800258e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002590:	4413      	add	r3, r2
 8002592:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002596:	65bb      	str	r3, [r7, #88]	; 0x58
 8002598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a6:	801a      	strh	r2, [r3, #0]
 80025a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025ac:	2b3e      	cmp	r3, #62	; 0x3e
 80025ae:	d91d      	bls.n	80025ec <HAL_PCD_EP_DB_Transmit+0x700>
 80025b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80025b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <HAL_PCD_EP_DB_Transmit+0x6de>
 80025c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025c6:	3b01      	subs	r3, #1
 80025c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	029b      	lsls	r3, r3, #10
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4313      	orrs	r3, r2
 80025da:	b29b      	uxth	r3, r3
 80025dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	e041      	b.n	8002670 <HAL_PCD_EP_DB_Transmit+0x784>
 80025ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <HAL_PCD_EP_DB_Transmit+0x71e>
 80025f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002602:	b29a      	uxth	r2, r3
 8002604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002606:	801a      	strh	r2, [r3, #0]
 8002608:	e032      	b.n	8002670 <HAL_PCD_EP_DB_Transmit+0x784>
 800260a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	66bb      	str	r3, [r7, #104]	; 0x68
 8002612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_PCD_EP_DB_Transmit+0x738>
 800261e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002620:	3301      	adds	r3, #1
 8002622:	66bb      	str	r3, [r7, #104]	; 0x68
 8002624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b29a      	uxth	r2, r3
 800262a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800262c:	b29b      	uxth	r3, r3
 800262e:	029b      	lsls	r3, r3, #10
 8002630:	b29b      	uxth	r3, r3
 8002632:	4313      	orrs	r3, r2
 8002634:	b29a      	uxth	r2, r3
 8002636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002638:	801a      	strh	r2, [r3, #0]
 800263a:	e019      	b.n	8002670 <HAL_PCD_EP_DB_Transmit+0x784>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	785b      	ldrb	r3, [r3, #1]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d115      	bne.n	8002670 <HAL_PCD_EP_DB_Transmit+0x784>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264c:	b29b      	uxth	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002652:	4413      	add	r3, r2
 8002654:	657b      	str	r3, [r7, #84]	; 0x54
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	011a      	lsls	r2, r3, #4
 800265c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265e:	4413      	add	r3, r2
 8002660:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002664:	653b      	str	r3, [r7, #80]	; 0x50
 8002666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266a:	b29a      	uxth	r2, r3
 800266c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	6959      	ldr	r1, [r3, #20]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	895a      	ldrh	r2, [r3, #10]
 800267c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002680:	b29b      	uxth	r3, r3
 8002682:	f003 fa78 	bl	8005b76 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800269c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026a0:	82bb      	strh	r3, [r7, #20]
 80026a2:	8abb      	ldrh	r3, [r7, #20]
 80026a4:	f083 0310 	eor.w	r3, r3, #16
 80026a8:	82bb      	strh	r3, [r7, #20]
 80026aa:	8abb      	ldrh	r3, [r7, #20]
 80026ac:	f083 0320 	eor.w	r3, r3, #32
 80026b0:	82bb      	strh	r3, [r7, #20]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	441a      	add	r2, r3
 80026c0:	8abb      	ldrh	r3, [r7, #20]
 80026c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3790      	adds	r7, #144	; 0x90
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	817b      	strh	r3, [r7, #10]
 80026ee:	4613      	mov	r3, r2
 80026f0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026f2:	897b      	ldrh	r3, [r7, #10]
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fe:	897b      	ldrh	r3, [r7, #10]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4413      	add	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	e009      	b.n	800272a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002716:	897a      	ldrh	r2, [r7, #10]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800272a:	893b      	ldrh	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d107      	bne.n	8002740 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2200      	movs	r2, #0
 8002734:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	b29a      	uxth	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	80da      	strh	r2, [r3, #6]
 800273e:	e00b      	b.n	8002758 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2201      	movs	r2, #1
 8002744:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	b29a      	uxth	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	b29a      	uxth	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e272      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8087 	beq.w	8002892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002784:	4b92      	ldr	r3, [pc, #584]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b04      	cmp	r3, #4
 800278e:	d00c      	beq.n	80027aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002790:	4b8f      	ldr	r3, [pc, #572]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d112      	bne.n	80027c2 <HAL_RCC_OscConfig+0x5e>
 800279c:	4b8c      	ldr	r3, [pc, #560]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a8:	d10b      	bne.n	80027c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027aa:	4b89      	ldr	r3, [pc, #548]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d06c      	beq.n	8002890 <HAL_RCC_OscConfig+0x12c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d168      	bne.n	8002890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e24c      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ca:	d106      	bne.n	80027da <HAL_RCC_OscConfig+0x76>
 80027cc:	4b80      	ldr	r3, [pc, #512]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a7f      	ldr	r2, [pc, #508]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	e02e      	b.n	8002838 <HAL_RCC_OscConfig+0xd4>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x98>
 80027e2:	4b7b      	ldr	r3, [pc, #492]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a7a      	ldr	r2, [pc, #488]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a77      	ldr	r2, [pc, #476]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e01d      	b.n	8002838 <HAL_RCC_OscConfig+0xd4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0xbc>
 8002806:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a71      	ldr	r2, [pc, #452]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800280c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e00b      	b.n	8002838 <HAL_RCC_OscConfig+0xd4>
 8002820:	4b6b      	ldr	r3, [pc, #428]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a67      	ldr	r2, [pc, #412]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fd ff4a 	bl	80006d8 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7fd ff46 	bl	80006d8 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	; 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e200      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0xe4>
 8002866:	e014      	b.n	8002892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fd ff36 	bl	80006d8 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002870:	f7fd ff32 	bl	80006d8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e1ec      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x10c>
 800288e:	e000      	b.n	8002892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d063      	beq.n	8002966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800289e:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028aa:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d11c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x18c>
 80028b6:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d116      	bne.n	80028f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_RCC_OscConfig+0x176>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e1c0      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4939      	ldr	r1, [pc, #228]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	e03a      	b.n	8002966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d020      	beq.n	800293a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f8:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <HAL_RCC_OscConfig+0x270>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fd feeb 	bl	80006d8 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002906:	f7fd fee7 	bl	80006d8 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e1a1      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002924:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4927      	ldr	r1, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]
 8002938:	e015      	b.n	8002966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_RCC_OscConfig+0x270>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fd feca 	bl	80006d8 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002948:	f7fd fec6 	bl	80006d8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e180      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d03a      	beq.n	80029e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d019      	beq.n	80029ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <HAL_RCC_OscConfig+0x274>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7fd feaa 	bl	80006d8 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002988:	f7fd fea6 	bl	80006d8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e160      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029a6:	2001      	movs	r0, #1
 80029a8:	f000 fa9c 	bl	8002ee4 <RCC_Delay>
 80029ac:	e01c      	b.n	80029e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_RCC_OscConfig+0x274>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7fd fe90 	bl	80006d8 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ba:	e00f      	b.n	80029dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029bc:	f7fd fe8c 	bl	80006d8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d908      	bls.n	80029dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e146      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	42420000 	.word	0x42420000
 80029d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029dc:	4b92      	ldr	r3, [pc, #584]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e9      	bne.n	80029bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80a6 	beq.w	8002b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fa:	4b8b      	ldr	r3, [pc, #556]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	4b88      	ldr	r3, [pc, #544]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	4a87      	ldr	r2, [pc, #540]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	61d3      	str	r3, [r2, #28]
 8002a12:	4b85      	ldr	r3, [pc, #532]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	4b82      	ldr	r3, [pc, #520]	; (8002c2c <HAL_RCC_OscConfig+0x4c8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d118      	bne.n	8002a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2e:	4b7f      	ldr	r3, [pc, #508]	; (8002c2c <HAL_RCC_OscConfig+0x4c8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a7e      	ldr	r2, [pc, #504]	; (8002c2c <HAL_RCC_OscConfig+0x4c8>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3a:	f7fd fe4d 	bl	80006d8 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a42:	f7fd fe49 	bl	80006d8 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b64      	cmp	r3, #100	; 0x64
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e103      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	4b75      	ldr	r3, [pc, #468]	; (8002c2c <HAL_RCC_OscConfig+0x4c8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x312>
 8002a68:	4b6f      	ldr	r3, [pc, #444]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4a6e      	ldr	r2, [pc, #440]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6213      	str	r3, [r2, #32]
 8002a74:	e02d      	b.n	8002ad2 <HAL_RCC_OscConfig+0x36e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x334>
 8002a7e:	4b6a      	ldr	r3, [pc, #424]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4a69      	ldr	r2, [pc, #420]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6213      	str	r3, [r2, #32]
 8002a8a:	4b67      	ldr	r3, [pc, #412]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4a66      	ldr	r2, [pc, #408]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	f023 0304 	bic.w	r3, r3, #4
 8002a94:	6213      	str	r3, [r2, #32]
 8002a96:	e01c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x36e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d10c      	bne.n	8002aba <HAL_RCC_OscConfig+0x356>
 8002aa0:	4b61      	ldr	r3, [pc, #388]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	4a60      	ldr	r2, [pc, #384]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	6213      	str	r3, [r2, #32]
 8002aac:	4b5e      	ldr	r3, [pc, #376]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4a5d      	ldr	r2, [pc, #372]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6213      	str	r3, [r2, #32]
 8002ab8:	e00b      	b.n	8002ad2 <HAL_RCC_OscConfig+0x36e>
 8002aba:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4a5a      	ldr	r2, [pc, #360]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6213      	str	r3, [r2, #32]
 8002ac6:	4b58      	ldr	r3, [pc, #352]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4a57      	ldr	r2, [pc, #348]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d015      	beq.n	8002b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ada:	f7fd fdfd 	bl	80006d8 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fd fdf9 	bl	80006d8 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0b1      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	4b4b      	ldr	r3, [pc, #300]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ee      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x37e>
 8002b04:	e014      	b.n	8002b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7fd fde7 	bl	80006d8 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fd fde3 	bl	80006d8 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e09b      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b24:	4b40      	ldr	r3, [pc, #256]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ee      	bne.n	8002b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d105      	bne.n	8002b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b36:	4b3c      	ldr	r3, [pc, #240]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4a3b      	ldr	r2, [pc, #236]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8087 	beq.w	8002c5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b4c:	4b36      	ldr	r3, [pc, #216]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d061      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d146      	bne.n	8002bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b60:	4b33      	ldr	r3, [pc, #204]	; (8002c30 <HAL_RCC_OscConfig+0x4cc>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fd fdb7 	bl	80006d8 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fd fdb3 	bl	80006d8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e06d      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b80:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d108      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b96:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	4921      	ldr	r1, [pc, #132]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a19      	ldr	r1, [r3, #32]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	491b      	ldr	r1, [pc, #108]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x4cc>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fd fd87 	bl	80006d8 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fd fd83 	bl	80006d8 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e03d      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x46a>
 8002bec:	e035      	b.n	8002c5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_RCC_OscConfig+0x4cc>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fd fd70 	bl	80006d8 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fd fd6c 	bl	80006d8 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e026      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x498>
 8002c1a:	e01e      	b.n	8002c5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e019      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCC_OscConfig+0x500>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d001      	beq.n	8002c5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000

08002c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0d0      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d910      	bls.n	8002cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b67      	ldr	r3, [pc, #412]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 0207 	bic.w	r2, r3, #7
 8002c92:	4965      	ldr	r1, [pc, #404]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b63      	ldr	r3, [pc, #396]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0b8      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc4:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cdc:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a52      	ldr	r2, [pc, #328]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce8:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	494d      	ldr	r1, [pc, #308]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d040      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d115      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e07f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d26:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e073      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d36:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e06b      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d46:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f023 0203 	bic.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4936      	ldr	r1, [pc, #216]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d58:	f7fd fcbe 	bl	80006d8 <HAL_GetTick>
 8002d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d60:	f7fd fcba 	bl	80006d8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e053      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 020c 	and.w	r2, r3, #12
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1eb      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d88:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d210      	bcs.n	8002db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 0207 	bic.w	r2, r3, #7
 8002d9e:	4922      	ldr	r1, [pc, #136]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e032      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc4:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4916      	ldr	r1, [pc, #88]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	490e      	ldr	r1, [pc, #56]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002df6:	f000 f821 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	490a      	ldr	r1, [pc, #40]	; (8002e30 <HAL_RCC_ClockConfig+0x1c8>)
 8002e08:	5ccb      	ldrb	r3, [r1, r3]
 8002e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1cc>)
 8002e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_ClockConfig+0x1d0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fc1c 	bl	8000654 <HAL_InitTick>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40022000 	.word	0x40022000
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	08007d4c 	.word	0x08007d4c
 8002e34:	20000008 	.word	0x20000008
 8002e38:	2000000c 	.word	0x2000000c

08002e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d002      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x30>
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d003      	beq.n	8002e72 <HAL_RCC_GetSysClockFreq+0x36>
 8002e6a:	e027      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e6e:	613b      	str	r3, [r7, #16]
      break;
 8002e70:	e027      	b.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	0c9b      	lsrs	r3, r3, #18
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e7c:	5cd3      	ldrb	r3, [r2, r3]
 8002e7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d010      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	0c5b      	lsrs	r3, r3, #17
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	4a11      	ldr	r2, [pc, #68]	; (8002edc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e004      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eb0:	fb02 f303 	mul.w	r3, r2, r3
 8002eb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	613b      	str	r3, [r7, #16]
      break;
 8002eba:	e002      	b.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ebe:	613b      	str	r3, [r7, #16]
      break;
 8002ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec2:	693b      	ldr	r3, [r7, #16]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	007a1200 	.word	0x007a1200
 8002ed8:	08007d5c 	.word	0x08007d5c
 8002edc:	08007d6c 	.word	0x08007d6c
 8002ee0:	003d0900 	.word	0x003d0900

08002ee4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <RCC_Delay+0x34>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <RCC_Delay+0x38>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0a5b      	lsrs	r3, r3, #9
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	fb02 f303 	mul.w	r3, r2, r3
 8002efe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f00:	bf00      	nop
  }
  while (Delay --);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1e5a      	subs	r2, r3, #1
 8002f06:	60fa      	str	r2, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f9      	bne.n	8002f00 <RCC_Delay+0x1c>
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	20000008 	.word	0x20000008
 8002f1c:	10624dd3 	.word	0x10624dd3

08002f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d07d      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f40:	4b4f      	ldr	r3, [pc, #316]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10d      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4a4b      	ldr	r2, [pc, #300]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f56:	61d3      	str	r3, [r2, #28]
 8002f58:	4b49      	ldr	r3, [pc, #292]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	4b46      	ldr	r3, [pc, #280]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d118      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f74:	4b43      	ldr	r3, [pc, #268]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a42      	ldr	r2, [pc, #264]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f80:	f7fd fbaa 	bl	80006d8 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	e008      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f88:	f7fd fba6 	bl	80006d8 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e06d      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d02e      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d027      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fcc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fce:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd4:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fda:	4a29      	ldr	r2, [pc, #164]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d014      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fd fb75 	bl	80006d8 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fd fb71 	bl	80006d8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e036      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ee      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4917      	ldr	r1, [pc, #92]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003022:	4313      	orrs	r3, r2
 8003024:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4a13      	ldr	r2, [pc, #76]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003036:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003044:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	490b      	ldr	r1, [pc, #44]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	4904      	ldr	r1, [pc, #16]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	40007000 	.word	0x40007000
 8003088:	42420440 	.word	0x42420440

0800308c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e076      	b.n	800318c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ae:	d009      	beq.n	80030c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	61da      	str	r2, [r3, #28]
 80030b6:	e005      	b.n	80030c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd f9fa 	bl	80004d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003148:	ea42 0103 	orr.w	r1, r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	0c1a      	lsrs	r2, r3, #16
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f002 0204 	and.w	r2, r2, #4
 800316a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_SPI_Transmit+0x22>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e12d      	b.n	8003412 <HAL_SPI_Transmit+0x27e>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031be:	f7fd fa8b 	bl	80006d8 <HAL_GetTick>
 80031c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d002      	beq.n	80031da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
 80031d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031d8:	e116      	b.n	8003408 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_SPI_Transmit+0x52>
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031ea:	e10d      	b.n	8003408 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2203      	movs	r2, #3
 80031f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	88fa      	ldrh	r2, [r7, #6]
 800320a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003232:	d10f      	bne.n	8003254 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003242:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003252:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d007      	beq.n	8003272 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003270:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800327a:	d14f      	bne.n	800331c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_Transmit+0xf6>
 8003284:	8afb      	ldrh	r3, [r7, #22]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d142      	bne.n	8003310 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	1c9a      	adds	r2, r3, #2
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032ae:	e02f      	b.n	8003310 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d112      	bne.n	80032e4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	881a      	ldrh	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	1c9a      	adds	r2, r3, #2
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80032e2:	e015      	b.n	8003310 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032e4:	f7fd f9f8 	bl	80006d8 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d803      	bhi.n	80032fc <HAL_SPI_Transmit+0x168>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d102      	bne.n	8003302 <HAL_SPI_Transmit+0x16e>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800330e:	e07b      	b.n	8003408 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ca      	bne.n	80032b0 <HAL_SPI_Transmit+0x11c>
 800331a:	e050      	b.n	80033be <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_SPI_Transmit+0x196>
 8003324:	8afb      	ldrh	r3, [r7, #22]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d144      	bne.n	80033b4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	330c      	adds	r3, #12
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003350:	e030      	b.n	80033b4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b02      	cmp	r3, #2
 800335e:	d113      	bne.n	8003388 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	86da      	strh	r2, [r3, #54]	; 0x36
 8003386:	e015      	b.n	80033b4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003388:	f7fd f9a6 	bl	80006d8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d803      	bhi.n	80033a0 <HAL_SPI_Transmit+0x20c>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339e:	d102      	bne.n	80033a6 <HAL_SPI_Transmit+0x212>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80033b2:	e029      	b.n	8003408 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1c9      	bne.n	8003352 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	6839      	ldr	r1, [r7, #0]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f8b2 	bl	800352c <SPI_EndRxTxTransaction>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e003      	b.n	8003408 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003410:	7ffb      	ldrb	r3, [r7, #31]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800342c:	f7fd f954 	bl	80006d8 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	4413      	add	r3, r2
 800343a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800343c:	f7fd f94c 	bl	80006d8 <HAL_GetTick>
 8003440:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003442:	4b39      	ldr	r3, [pc, #228]	; (8003528 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	015b      	lsls	r3, r3, #5
 8003448:	0d1b      	lsrs	r3, r3, #20
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003452:	e054      	b.n	80034fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345a:	d050      	beq.n	80034fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800345c:	f7fd f93c 	bl	80006d8 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	429a      	cmp	r2, r3
 800346a:	d902      	bls.n	8003472 <SPI_WaitFlagStateUntilTimeout+0x56>
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d13d      	bne.n	80034ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003480:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800348a:	d111      	bne.n	80034b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003494:	d004      	beq.n	80034a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349e:	d107      	bne.n	80034b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b8:	d10f      	bne.n	80034da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e017      	b.n	800351e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	429a      	cmp	r2, r3
 800351a:	d19b      	bne.n	8003454 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000008 	.word	0x20000008

0800352c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	2180      	movs	r1, #128	; 0x80
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7ff ff6a 	bl	800341c <SPI_WaitFlagStateUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e000      	b.n	8003560 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003568:	b084      	sub	sp, #16
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	f107 0014 	add.w	r0, r7, #20
 8003576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	b004      	add	sp, #16
 8003586:	4770      	bx	lr

08003588 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003598:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800359c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80035bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80035c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4013      	ands	r3, r2
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003600:	b084      	sub	sp, #16
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	f107 0014 	add.w	r0, r7, #20
 800360e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	b004      	add	sp, #16
 800363e:	4770      	bx	lr

08003640 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003640:	b480      	push	{r7}
 8003642:	b09d      	sub	sp, #116	; 0x74
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	b29b      	uxth	r3, r3
 800365e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	78db      	ldrb	r3, [r3, #3]
 800366e:	2b03      	cmp	r3, #3
 8003670:	d81f      	bhi.n	80036b2 <USB_ActivateEndpoint+0x72>
 8003672:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <USB_ActivateEndpoint+0x38>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	08003689 	.word	0x08003689
 800367c:	080036a5 	.word	0x080036a5
 8003680:	080036bb 	.word	0x080036bb
 8003684:	08003697 	.word	0x08003697
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003688:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800368c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003690:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003694:	e012      	b.n	80036bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003696:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800369a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800369e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80036a2:	e00b      	b.n	80036bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80036a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80036a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80036b0:	e004      	b.n	80036bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80036b8:	e000      	b.n	80036bc <USB_ActivateEndpoint+0x7c>
      break;
 80036ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	441a      	add	r2, r3
 80036c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80036ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036da:	b29b      	uxth	r3, r3
 80036dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	441a      	add	r2, r3
 800370c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003720:	b29b      	uxth	r3, r3
 8003722:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	7b1b      	ldrb	r3, [r3, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f040 8178 	bne.w	8003a1e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	785b      	ldrb	r3, [r3, #1]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8084 	beq.w	8003840 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003742:	b29b      	uxth	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	4413      	add	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	011a      	lsls	r2, r3, #4
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	88db      	ldrh	r3, [r3, #6]
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	b29b      	uxth	r3, r3
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	827b      	strh	r3, [r7, #18]
 800377a:	8a7b      	ldrh	r3, [r7, #18]
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01b      	beq.n	80037bc <USB_ActivateEndpoint+0x17c>
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	823b      	strh	r3, [r7, #16]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	441a      	add	r2, r3
 80037a6:	8a3b      	ldrh	r3, [r7, #16]
 80037a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	78db      	ldrb	r3, [r3, #3]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d020      	beq.n	8003806 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037da:	81bb      	strh	r3, [r7, #12]
 80037dc:	89bb      	ldrh	r3, [r7, #12]
 80037de:	f083 0320 	eor.w	r3, r3, #32
 80037e2:	81bb      	strh	r3, [r7, #12]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	441a      	add	r2, r3
 80037ee:	89bb      	ldrh	r3, [r7, #12]
 80037f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003800:	b29b      	uxth	r3, r3
 8003802:	8013      	strh	r3, [r2, #0]
 8003804:	e2d5      	b.n	8003db2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381c:	81fb      	strh	r3, [r7, #14]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	89fb      	ldrh	r3, [r7, #14]
 800382a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800382e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383a:	b29b      	uxth	r3, r3
 800383c:	8013      	strh	r3, [r2, #0]
 800383e:	e2b8      	b.n	8003db2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	633b      	str	r3, [r7, #48]	; 0x30
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384a:	b29b      	uxth	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	4413      	add	r3, r2
 8003852:	633b      	str	r3, [r7, #48]	; 0x30
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	011a      	lsls	r2, r3, #4
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	4413      	add	r3, r2
 800385e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	88db      	ldrh	r3, [r3, #6]
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	b29b      	uxth	r3, r3
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003884:	4413      	add	r3, r2
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	011a      	lsls	r2, r3, #4
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	4413      	add	r3, r2
 8003892:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	b29b      	uxth	r3, r3
 800389e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	801a      	strh	r2, [r3, #0]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b3e      	cmp	r3, #62	; 0x3e
 80038ae:	d91d      	bls.n	80038ec <USB_ActivateEndpoint+0x2ac>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <USB_ActivateEndpoint+0x28a>
 80038c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c6:	3b01      	subs	r3, #1
 80038c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	029b      	lsls	r3, r3, #10
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	4313      	orrs	r3, r2
 80038da:	b29b      	uxth	r3, r3
 80038dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	801a      	strh	r2, [r3, #0]
 80038ea:	e026      	b.n	800393a <USB_ActivateEndpoint+0x2fa>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <USB_ActivateEndpoint+0x2ca>
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003902:	b29a      	uxth	r2, r3
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	801a      	strh	r2, [r3, #0]
 8003908:	e017      	b.n	800393a <USB_ActivateEndpoint+0x2fa>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	085b      	lsrs	r3, r3, #1
 8003910:	66bb      	str	r3, [r7, #104]	; 0x68
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <USB_ActivateEndpoint+0x2e4>
 800391e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003920:	3301      	adds	r3, #1
 8003922:	66bb      	str	r3, [r7, #104]	; 0x68
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29a      	uxth	r2, r3
 800392a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800392c:	b29b      	uxth	r3, r3
 800392e:	029b      	lsls	r3, r3, #10
 8003930:	b29b      	uxth	r3, r3
 8003932:	4313      	orrs	r3, r2
 8003934:	b29a      	uxth	r2, r3
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	847b      	strh	r3, [r7, #34]	; 0x22
 8003948:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800394a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01b      	beq.n	800398a <USB_ActivateEndpoint+0x34a>
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003968:	843b      	strh	r3, [r7, #32]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	441a      	add	r2, r3
 8003974:	8c3b      	ldrh	r3, [r7, #32]
 8003976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800397a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800397e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003986:	b29b      	uxth	r3, r3
 8003988:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d124      	bne.n	80039dc <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a8:	83bb      	strh	r3, [r7, #28]
 80039aa:	8bbb      	ldrh	r3, [r7, #28]
 80039ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80039b0:	83bb      	strh	r3, [r7, #28]
 80039b2:	8bbb      	ldrh	r3, [r7, #28]
 80039b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039b8:	83bb      	strh	r3, [r7, #28]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	441a      	add	r2, r3
 80039c4:	8bbb      	ldrh	r3, [r7, #28]
 80039c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	8013      	strh	r3, [r2, #0]
 80039da:	e1ea      	b.n	8003db2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	83fb      	strh	r3, [r7, #30]
 80039f4:	8bfb      	ldrh	r3, [r7, #30]
 80039f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039fa:	83fb      	strh	r3, [r7, #30]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	441a      	add	r2, r3
 8003a06:	8bfb      	ldrh	r3, [r7, #30]
 8003a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	8013      	strh	r3, [r2, #0]
 8003a1c:	e1c9      	b.n	8003db2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	78db      	ldrb	r3, [r3, #3]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d11e      	bne.n	8003a64 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a56:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	8013      	strh	r3, [r2, #0]
 8003a62:	e01d      	b.n	8003aa0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	441a      	add	r2, r3
 8003a88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab0:	4413      	add	r3, r2
 8003ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	011a      	lsls	r2, r3, #4
 8003aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	891b      	ldrh	r3, [r3, #8]
 8003ac8:	085b      	lsrs	r3, r3, #1
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ad2:	801a      	strh	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae4:	4413      	add	r3, r2
 8003ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	011a      	lsls	r2, r3, #4
 8003aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003af6:	653b      	str	r3, [r7, #80]	; 0x50
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	895b      	ldrh	r3, [r3, #10]
 8003afc:	085b      	lsrs	r3, r3, #1
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b06:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	785b      	ldrb	r3, [r3, #1]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f040 8093 	bne.w	8003c38 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003b22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01b      	beq.n	8003b66 <USB_ActivateEndpoint+0x526>
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b44:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	441a      	add	r2, r3
 8003b50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003b74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01b      	beq.n	8003bb6 <USB_ActivateEndpoint+0x576>
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b94:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	441a      	add	r2, r3
 8003ba0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bcc:	873b      	strh	r3, [r7, #56]	; 0x38
 8003bce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003bd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003bd4:	873b      	strh	r3, [r7, #56]	; 0x38
 8003bd6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003bd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bdc:	873b      	strh	r3, [r7, #56]	; 0x38
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	441a      	add	r2, r3
 8003be8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c14:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	441a      	add	r2, r3
 8003c20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	8013      	strh	r3, [r2, #0]
 8003c36:	e0bc      	b.n	8003db2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003c48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01d      	beq.n	8003c90 <USB_ActivateEndpoint+0x650>
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	441a      	add	r2, r3
 8003c78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003ca0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01d      	beq.n	8003ce8 <USB_ActivateEndpoint+0x6a8>
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	441a      	add	r2, r3
 8003cd0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	78db      	ldrb	r3, [r3, #3]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d024      	beq.n	8003d3a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d0e:	f083 0320 	eor.w	r3, r3, #32
 8003d12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	441a      	add	r2, r3
 8003d20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	8013      	strh	r3, [r2, #0]
 8003d38:	e01d      	b.n	8003d76 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d50:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	441a      	add	r2, r3
 8003d5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	441a      	add	r2, r3
 8003d9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003db2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3774      	adds	r7, #116	; 0x74
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr

08003dc0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b08d      	sub	sp, #52	; 0x34
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	7b1b      	ldrb	r3, [r3, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f040 808e 	bne.w	8003ef0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d044      	beq.n	8003e66 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	81bb      	strh	r3, [r7, #12]
 8003dea:	89bb      	ldrh	r3, [r7, #12]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01b      	beq.n	8003e2c <USB_DeactivateEndpoint+0x6c>
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0a:	817b      	strh	r3, [r7, #10]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	441a      	add	r2, r3
 8003e16:	897b      	ldrh	r3, [r7, #10]
 8003e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e42:	813b      	strh	r3, [r7, #8]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	441a      	add	r2, r3
 8003e4e:	893b      	ldrh	r3, [r7, #8]
 8003e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	8013      	strh	r3, [r2, #0]
 8003e64:	e192      	b.n	800418c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	827b      	strh	r3, [r7, #18]
 8003e74:	8a7b      	ldrh	r3, [r7, #18]
 8003e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01b      	beq.n	8003eb6 <USB_DeactivateEndpoint+0xf6>
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e94:	823b      	strh	r3, [r7, #16]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	441a      	add	r2, r3
 8003ea0:	8a3b      	ldrh	r3, [r7, #16]
 8003ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ecc:	81fb      	strh	r3, [r7, #14]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	441a      	add	r2, r3
 8003ed8:	89fb      	ldrh	r3, [r7, #14]
 8003eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	8013      	strh	r3, [r2, #0]
 8003eee:	e14d      	b.n	800418c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f040 80a5 	bne.w	8004044 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	843b      	strh	r3, [r7, #32]
 8003f08:	8c3b      	ldrh	r3, [r7, #32]
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01b      	beq.n	8003f4a <USB_DeactivateEndpoint+0x18a>
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f28:	83fb      	strh	r3, [r7, #30]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	441a      	add	r2, r3
 8003f34:	8bfb      	ldrh	r3, [r7, #30]
 8003f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	83bb      	strh	r3, [r7, #28]
 8003f58:	8bbb      	ldrh	r3, [r7, #28]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d01b      	beq.n	8003f9a <USB_DeactivateEndpoint+0x1da>
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	837b      	strh	r3, [r7, #26]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	8b7b      	ldrh	r3, [r7, #26]
 8003f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb0:	833b      	strh	r3, [r7, #24]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	441a      	add	r2, r3
 8003fbc:	8b3b      	ldrh	r3, [r7, #24]
 8003fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe8:	82fb      	strh	r3, [r7, #22]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	441a      	add	r2, r3
 8003ff4:	8afb      	ldrh	r3, [r7, #22]
 8003ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004006:	b29b      	uxth	r3, r3
 8004008:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004020:	82bb      	strh	r3, [r7, #20]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	441a      	add	r2, r3
 800402c:	8abb      	ldrh	r3, [r7, #20]
 800402e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800403a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403e:	b29b      	uxth	r3, r3
 8004040:	8013      	strh	r3, [r2, #0]
 8004042:	e0a3      	b.n	800418c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01b      	beq.n	8004094 <USB_DeactivateEndpoint+0x2d4>
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	441a      	add	r2, r3
 800407e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800408c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004090:	b29b      	uxth	r3, r3
 8004092:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80040a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01b      	beq.n	80040e4 <USB_DeactivateEndpoint+0x324>
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80040d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800410c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004118:	b29b      	uxth	r3, r3
 800411a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004132:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004150:	b29b      	uxth	r3, r3
 8004152:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416a:	847b      	strh	r3, [r7, #34]	; 0x22
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004188:	b29b      	uxth	r3, r3
 800418a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3734      	adds	r7, #52	; 0x34
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b0c2      	sub	sp, #264	; 0x108
 800419c:	af00      	add	r7, sp, #0
 800419e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041a6:	6018      	str	r0, [r3, #0]
 80041a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041b0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	f040 86b7 	bne.w	8004f32 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80041c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d908      	bls.n	80041f2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80041e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80041f0:	e007      	b.n	8004202 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80041f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	7b1b      	ldrb	r3, [r3, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d13a      	bne.n	8004288 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6959      	ldr	r1, [r3, #20]
 800421e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	88da      	ldrh	r2, [r3, #6]
 800422a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800422e:	b29b      	uxth	r3, r3
 8004230:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004234:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004238:	6800      	ldr	r0, [r0, #0]
 800423a:	f001 fc9c 	bl	8005b76 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800423e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800424e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004258:	b29b      	uxth	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4413      	add	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	011a      	lsls	r2, r3, #4
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4413      	add	r3, r2
 8004274:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	801a      	strh	r2, [r3, #0]
 8004284:	f000 be1f 	b.w	8004ec6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800428c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	78db      	ldrb	r3, [r3, #3]
 8004294:	2b02      	cmp	r3, #2
 8004296:	f040 8462 	bne.w	8004b5e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800429a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800429e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6a1a      	ldr	r2, [r3, #32]
 80042a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	f240 83df 	bls.w	8004a76 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80042b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80042e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	441a      	add	r2, r3
 80042fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004308:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800430c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004310:	b29b      	uxth	r3, r3
 8004312:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a1a      	ldr	r2, [r3, #32]
 8004320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004324:	1ad2      	subs	r2, r2, r3
 8004326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800432a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 81c7 	beq.w	80046e8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800435a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800435e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	633b      	str	r3, [r7, #48]	; 0x30
 8004366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800436a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	785b      	ldrb	r3, [r3, #1]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d177      	bne.n	8004466 <USB_EPStartXfer+0x2ce>
 8004376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800437a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
 8004382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004390:	b29b      	uxth	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	4413      	add	r3, r2
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
 800439a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800439e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	011a      	lsls	r2, r3, #4
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	4413      	add	r3, r2
 80043ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043bc:	b29a      	uxth	r2, r3
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c6:	2b3e      	cmp	r3, #62	; 0x3e
 80043c8:	d921      	bls.n	800440e <USB_EPStartXfer+0x276>
 80043ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80043d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <USB_EPStartXfer+0x252>
 80043e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80043e4:	3b01      	subs	r3, #1
 80043e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	029b      	lsls	r3, r3, #10
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	4313      	orrs	r3, r2
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004406:	b29a      	uxth	r2, r3
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	801a      	strh	r2, [r3, #0]
 800440c:	e050      	b.n	80044b0 <USB_EPStartXfer+0x318>
 800440e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <USB_EPStartXfer+0x294>
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004424:	b29a      	uxth	r2, r3
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	801a      	strh	r2, [r3, #0]
 800442a:	e041      	b.n	80044b0 <USB_EPStartXfer+0x318>
 800442c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <USB_EPStartXfer+0x2b4>
 8004442:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004446:	3301      	adds	r3, #1
 8004448:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	b29a      	uxth	r2, r3
 8004452:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004456:	b29b      	uxth	r3, r3
 8004458:	029b      	lsls	r3, r3, #10
 800445a:	b29b      	uxth	r3, r3
 800445c:	4313      	orrs	r3, r2
 800445e:	b29a      	uxth	r2, r3
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	e024      	b.n	80044b0 <USB_EPStartXfer+0x318>
 8004466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800446a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	785b      	ldrb	r3, [r3, #1]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d11c      	bne.n	80044b0 <USB_EPStartXfer+0x318>
 8004476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800447a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004484:	b29b      	uxth	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	4413      	add	r3, r2
 800448c:	633b      	str	r3, [r7, #48]	; 0x30
 800448e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	011a      	lsls	r2, r3, #4
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	4413      	add	r3, r2
 80044a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80044b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	895b      	ldrh	r3, [r3, #10]
 80044bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6959      	ldr	r1, [r3, #20]
 80044cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80044d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80044da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80044de:	6800      	ldr	r0, [r0, #0]
 80044e0:	f001 fb49 	bl	8005b76 <USB_WritePMA>
            ep->xfer_buff += len;
 80044e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044f4:	441a      	add	r2, r3
 80044f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6a1a      	ldr	r2, [r3, #32]
 800450e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	429a      	cmp	r2, r3
 800451c:	d90f      	bls.n	800453e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800451e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6a1a      	ldr	r2, [r3, #32]
 800452a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800452e:	1ad2      	subs	r2, r2, r3
 8004530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	621a      	str	r2, [r3, #32]
 800453c:	e00e      	b.n	800455c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800453e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800454e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2200      	movs	r2, #0
 800455a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800455c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d177      	bne.n	800465c <USB_EPStartXfer+0x4c4>
 800456c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800457c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004586:	b29b      	uxth	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	4413      	add	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	011a      	lsls	r2, r3, #4
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4413      	add	r3, r2
 80045a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	801a      	strh	r2, [r3, #0]
 80045b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045bc:	2b3e      	cmp	r3, #62	; 0x3e
 80045be:	d921      	bls.n	8004604 <USB_EPStartXfer+0x46c>
 80045c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d104      	bne.n	80045e0 <USB_EPStartXfer+0x448>
 80045d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045da:	3b01      	subs	r3, #1
 80045dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	029b      	lsls	r3, r3, #10
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	4313      	orrs	r3, r2
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	e056      	b.n	80046b2 <USB_EPStartXfer+0x51a>
 8004604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <USB_EPStartXfer+0x48a>
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800461a:	b29a      	uxth	r2, r3
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	801a      	strh	r2, [r3, #0]
 8004620:	e047      	b.n	80046b2 <USB_EPStartXfer+0x51a>
 8004622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800462c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <USB_EPStartXfer+0x4aa>
 8004638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800463c:	3301      	adds	r3, #1
 800463e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29a      	uxth	r2, r3
 8004648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800464c:	b29b      	uxth	r3, r3
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	b29b      	uxth	r3, r3
 8004652:	4313      	orrs	r3, r2
 8004654:	b29a      	uxth	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	801a      	strh	r2, [r3, #0]
 800465a:	e02a      	b.n	80046b2 <USB_EPStartXfer+0x51a>
 800465c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d122      	bne.n	80046b2 <USB_EPStartXfer+0x51a>
 800466c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	623b      	str	r3, [r7, #32]
 8004678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800467c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004686:	b29b      	uxth	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	4413      	add	r3, r2
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	011a      	lsls	r2, r3, #4
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	4413      	add	r3, r2
 80046a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80046b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	891b      	ldrh	r3, [r3, #8]
 80046be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6959      	ldr	r1, [r3, #20]
 80046ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80046d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80046dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80046e0:	6800      	ldr	r0, [r0, #0]
 80046e2:	f001 fa48 	bl	8005b76 <USB_WritePMA>
 80046e6:	e3ee      	b.n	8004ec6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80046e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d177      	bne.n	80047e8 <USB_EPStartXfer+0x650>
 80046f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	64bb      	str	r3, [r7, #72]	; 0x48
 8004704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004712:	b29b      	uxth	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004718:	4413      	add	r3, r2
 800471a:	64bb      	str	r3, [r7, #72]	; 0x48
 800471c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	011a      	lsls	r2, r3, #4
 800472a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800472c:	4413      	add	r3, r2
 800472e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004732:	647b      	str	r3, [r7, #68]	; 0x44
 8004734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800473e:	b29a      	uxth	r2, r3
 8004740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004742:	801a      	strh	r2, [r3, #0]
 8004744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004748:	2b3e      	cmp	r3, #62	; 0x3e
 800474a:	d921      	bls.n	8004790 <USB_EPStartXfer+0x5f8>
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <USB_EPStartXfer+0x5d4>
 8004762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004766:	3b01      	subs	r3, #1
 8004768:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800476c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29a      	uxth	r2, r3
 8004772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004776:	b29b      	uxth	r3, r3
 8004778:	029b      	lsls	r3, r3, #10
 800477a:	b29b      	uxth	r3, r3
 800477c:	4313      	orrs	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004788:	b29a      	uxth	r2, r3
 800478a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	e056      	b.n	800483e <USB_EPStartXfer+0x6a6>
 8004790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <USB_EPStartXfer+0x616>
 8004798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047aa:	801a      	strh	r2, [r3, #0]
 80047ac:	e047      	b.n	800483e <USB_EPStartXfer+0x6a6>
 80047ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80047b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <USB_EPStartXfer+0x636>
 80047c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047c8:	3301      	adds	r3, #1
 80047ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80047ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047d8:	b29b      	uxth	r3, r3
 80047da:	029b      	lsls	r3, r3, #10
 80047dc:	b29b      	uxth	r3, r3
 80047de:	4313      	orrs	r3, r2
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047e4:	801a      	strh	r2, [r3, #0]
 80047e6:	e02a      	b.n	800483e <USB_EPStartXfer+0x6a6>
 80047e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d122      	bne.n	800483e <USB_EPStartXfer+0x6a6>
 80047f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	653b      	str	r3, [r7, #80]	; 0x50
 8004804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004812:	b29b      	uxth	r3, r3
 8004814:	461a      	mov	r2, r3
 8004816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004818:	4413      	add	r3, r2
 800481a:	653b      	str	r3, [r7, #80]	; 0x50
 800481c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	011a      	lsls	r2, r3, #4
 800482a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800482c:	4413      	add	r3, r2
 800482e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004838:	b29a      	uxth	r2, r3
 800483a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800483e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	891b      	ldrh	r3, [r3, #8]
 800484a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800484e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6959      	ldr	r1, [r3, #20]
 800485a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800485e:	b29b      	uxth	r3, r3
 8004860:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004864:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004868:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800486c:	6800      	ldr	r0, [r0, #0]
 800486e:	f001 f982 	bl	8005b76 <USB_WritePMA>
            ep->xfer_buff += len;
 8004872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695a      	ldr	r2, [r3, #20]
 800487e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004882:	441a      	add	r2, r3
 8004884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6a1a      	ldr	r2, [r3, #32]
 800489c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d90f      	bls.n	80048cc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80048ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6a1a      	ldr	r2, [r3, #32]
 80048b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048bc:	1ad2      	subs	r2, r2, r3
 80048be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	621a      	str	r2, [r3, #32]
 80048ca:	e00e      	b.n	80048ea <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80048cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80048dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2200      	movs	r2, #0
 80048e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	643b      	str	r3, [r7, #64]	; 0x40
 80048f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	785b      	ldrb	r3, [r3, #1]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d177      	bne.n	80049f6 <USB_EPStartXfer+0x85e>
 8004906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800490a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	63bb      	str	r3, [r7, #56]	; 0x38
 8004912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004920:	b29b      	uxth	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004926:	4413      	add	r3, r2
 8004928:	63bb      	str	r3, [r7, #56]	; 0x38
 800492a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800492e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	011a      	lsls	r2, r3, #4
 8004938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493a:	4413      	add	r3, r2
 800493c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800494c:	b29a      	uxth	r2, r3
 800494e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004956:	2b3e      	cmp	r3, #62	; 0x3e
 8004958:	d921      	bls.n	800499e <USB_EPStartXfer+0x806>
 800495a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <USB_EPStartXfer+0x7e2>
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	3b01      	subs	r3, #1
 8004976:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800497a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29a      	uxth	r2, r3
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	b29b      	uxth	r3, r3
 8004986:	029b      	lsls	r3, r3, #10
 8004988:	b29b      	uxth	r3, r3
 800498a:	4313      	orrs	r3, r2
 800498c:	b29b      	uxth	r3, r3
 800498e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004996:	b29a      	uxth	r2, r3
 8004998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499a:	801a      	strh	r2, [r3, #0]
 800499c:	e050      	b.n	8004a40 <USB_EPStartXfer+0x8a8>
 800499e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <USB_EPStartXfer+0x824>
 80049a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b8:	801a      	strh	r2, [r3, #0]
 80049ba:	e041      	b.n	8004a40 <USB_EPStartXfer+0x8a8>
 80049bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80049c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d004      	beq.n	80049dc <USB_EPStartXfer+0x844>
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d6:	3301      	adds	r3, #1
 80049d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	029b      	lsls	r3, r3, #10
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4313      	orrs	r3, r2
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f2:	801a      	strh	r2, [r3, #0]
 80049f4:	e024      	b.n	8004a40 <USB_EPStartXfer+0x8a8>
 80049f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d11c      	bne.n	8004a40 <USB_EPStartXfer+0x8a8>
 8004a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1a:	4413      	add	r3, r2
 8004a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	011a      	lsls	r2, r3, #4
 8004a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2e:	4413      	add	r3, r2
 8004a30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	895b      	ldrh	r3, [r3, #10]
 8004a4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6959      	ldr	r1, [r3, #20]
 8004a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004a66:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004a6a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004a6e:	6800      	ldr	r0, [r0, #0]
 8004a70:	f001 f881 	bl	8005b76 <USB_WritePMA>
 8004a74:	e227      	b.n	8004ec6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	441a      	add	r2, r3
 8004aca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b02:	4413      	add	r3, r2
 8004b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	011a      	lsls	r2, r3, #4
 8004b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b16:	4413      	add	r3, r2
 8004b18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	891b      	ldrh	r3, [r3, #8]
 8004b34:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6959      	ldr	r1, [r3, #20]
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004b4e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004b52:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004b56:	6800      	ldr	r0, [r0, #0]
 8004b58:	f001 f80d 	bl	8005b76 <USB_WritePMA>
 8004b5c:	e1b3      	b.n	8004ec6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6a1a      	ldr	r2, [r3, #32]
 8004b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80c6 	beq.w	8004d30 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	673b      	str	r3, [r7, #112]	; 0x70
 8004bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d177      	bne.n	8004cb0 <USB_EPStartXfer+0xb18>
 8004bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004be0:	4413      	add	r3, r2
 8004be2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	011a      	lsls	r2, r3, #4
 8004bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bfa:	667b      	str	r3, [r7, #100]	; 0x64
 8004bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c10:	2b3e      	cmp	r3, #62	; 0x3e
 8004c12:	d921      	bls.n	8004c58 <USB_EPStartXfer+0xac0>
 8004c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d104      	bne.n	8004c34 <USB_EPStartXfer+0xa9c>
 8004c2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	029b      	lsls	r3, r3, #10
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	4313      	orrs	r3, r2
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c54:	801a      	strh	r2, [r3, #0]
 8004c56:	e050      	b.n	8004cfa <USB_EPStartXfer+0xb62>
 8004c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <USB_EPStartXfer+0xade>
 8004c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	e041      	b.n	8004cfa <USB_EPStartXfer+0xb62>
 8004c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d004      	beq.n	8004c96 <USB_EPStartXfer+0xafe>
 8004c8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004c90:	3301      	adds	r3, #1
 8004c92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	029b      	lsls	r3, r3, #10
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cac:	801a      	strh	r2, [r3, #0]
 8004cae:	e024      	b.n	8004cfa <USB_EPStartXfer+0xb62>
 8004cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	785b      	ldrb	r3, [r3, #1]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d11c      	bne.n	8004cfa <USB_EPStartXfer+0xb62>
 8004cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cd4:	4413      	add	r3, r2
 8004cd6:	673b      	str	r3, [r7, #112]	; 0x70
 8004cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	011a      	lsls	r2, r3, #4
 8004ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ce8:	4413      	add	r3, r2
 8004cea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	895b      	ldrh	r3, [r3, #10]
 8004d06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6959      	ldr	r1, [r3, #20]
 8004d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004d20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004d24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004d28:	6800      	ldr	r0, [r0, #0]
 8004d2a:	f000 ff24 	bl	8005b76 <USB_WritePMA>
 8004d2e:	e0ca      	b.n	8004ec6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d177      	bne.n	8004e30 <USB_EPStartXfer+0xc98>
 8004d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d60:	4413      	add	r3, r2
 8004d62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	011a      	lsls	r2, r3, #4
 8004d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d74:	4413      	add	r3, r2
 8004d76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d90:	2b3e      	cmp	r3, #62	; 0x3e
 8004d92:	d921      	bls.n	8004dd8 <USB_EPStartXfer+0xc40>
 8004d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da2:	f003 031f 	and.w	r3, r3, #31
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d104      	bne.n	8004db4 <USB_EPStartXfer+0xc1c>
 8004daa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004dae:	3b01      	subs	r3, #1
 8004db0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	029b      	lsls	r3, r3, #10
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	e05c      	b.n	8004e92 <USB_EPStartXfer+0xcfa>
 8004dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <USB_EPStartXfer+0xc5e>
 8004de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004df2:	801a      	strh	r2, [r3, #0]
 8004df4:	e04d      	b.n	8004e92 <USB_EPStartXfer+0xcfa>
 8004df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <USB_EPStartXfer+0xc7e>
 8004e0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004e10:	3301      	adds	r3, #1
 8004e12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004e16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	029b      	lsls	r3, r3, #10
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	4313      	orrs	r3, r2
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	e030      	b.n	8004e92 <USB_EPStartXfer+0xcfa>
 8004e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d128      	bne.n	8004e92 <USB_EPStartXfer+0xcfa>
 8004e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e64:	4413      	add	r3, r2
 8004e66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	011a      	lsls	r2, r3, #4
 8004e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	891b      	ldrh	r3, [r3, #8]
 8004e9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6959      	ldr	r1, [r3, #20]
 8004eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004eb8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ebc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ec0:	6800      	ldr	r0, [r0, #0]
 8004ec2:	f000 fe58 	bl	8005b76 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eec:	817b      	strh	r3, [r7, #10]
 8004eee:	897b      	ldrh	r3, [r7, #10]
 8004ef0:	f083 0310 	eor.w	r3, r3, #16
 8004ef4:	817b      	strh	r3, [r7, #10]
 8004ef6:	897b      	ldrh	r3, [r7, #10]
 8004ef8:	f083 0320 	eor.w	r3, r3, #32
 8004efc:	817b      	strh	r3, [r7, #10]
 8004efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	441a      	add	r2, r3
 8004f18:	897b      	ldrh	r3, [r7, #10]
 8004f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	8013      	strh	r3, [r2, #0]
 8004f2e:	f000 bcde 	b.w	80058ee <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	7b1b      	ldrb	r3, [r3, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f040 80bb 	bne.w	80050ba <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d917      	bls.n	8004f90 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699a      	ldr	r2, [r3, #24]
 8004f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f80:	1ad2      	subs	r2, r2, r3
 8004f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	619a      	str	r2, [r3, #24]
 8004f8e:	e00e      	b.n	8004fae <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2200      	movs	r2, #0
 8004fac:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	011a      	lsls	r2, r3, #4
 8004fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fea:	4413      	add	r3, r2
 8004fec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005000:	b29a      	uxth	r2, r3
 8005002:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005006:	801a      	strh	r2, [r3, #0]
 8005008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800500c:	2b3e      	cmp	r3, #62	; 0x3e
 800500e:	d924      	bls.n	800505a <USB_EPStartXfer+0xec2>
 8005010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800501a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <USB_EPStartXfer+0xe98>
 8005026:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800502a:	3b01      	subs	r3, #1
 800502c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29a      	uxth	r2, r3
 8005038:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800503c:	b29b      	uxth	r3, r3
 800503e:	029b      	lsls	r3, r3, #10
 8005040:	b29b      	uxth	r3, r3
 8005042:	4313      	orrs	r3, r2
 8005044:	b29b      	uxth	r3, r3
 8005046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800504e:	b29a      	uxth	r2, r3
 8005050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005054:	801a      	strh	r2, [r3, #0]
 8005056:	f000 bc10 	b.w	800587a <USB_EPStartXfer+0x16e2>
 800505a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10c      	bne.n	800507c <USB_EPStartXfer+0xee4>
 8005062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800506e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005072:	b29a      	uxth	r2, r3
 8005074:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005078:	801a      	strh	r2, [r3, #0]
 800507a:	e3fe      	b.n	800587a <USB_EPStartXfer+0x16e2>
 800507c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <USB_EPStartXfer+0xf04>
 8005092:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005096:	3301      	adds	r3, #1
 8005098:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800509c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	029b      	lsls	r3, r3, #10
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	4313      	orrs	r3, r2
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e3df      	b.n	800587a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80050ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	78db      	ldrb	r3, [r3, #3]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	f040 8218 	bne.w	80054fc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80050cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	785b      	ldrb	r3, [r3, #1]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f040 809d 	bne.w	8005218 <USB_EPStartXfer+0x1080>
 80050de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005102:	4413      	add	r3, r2
 8005104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	011a      	lsls	r2, r3, #4
 8005116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800511a:	4413      	add	r3, r2
 800511c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005120:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005124:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005130:	b29a      	uxth	r2, r3
 8005132:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b3e      	cmp	r3, #62	; 0x3e
 8005146:	d92b      	bls.n	80051a0 <USB_EPStartXfer+0x1008>
 8005148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800515a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <USB_EPStartXfer+0xfe0>
 800516e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005172:	3b01      	subs	r3, #1
 8005174:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005178:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29a      	uxth	r2, r3
 8005180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005184:	b29b      	uxth	r3, r3
 8005186:	029b      	lsls	r3, r3, #10
 8005188:	b29b      	uxth	r3, r3
 800518a:	4313      	orrs	r3, r2
 800518c:	b29b      	uxth	r3, r3
 800518e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005196:	b29a      	uxth	r2, r3
 8005198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800519c:	801a      	strh	r2, [r3, #0]
 800519e:	e070      	b.n	8005282 <USB_EPStartXfer+0x10ea>
 80051a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10c      	bne.n	80051ca <USB_EPStartXfer+0x1032>
 80051b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051c6:	801a      	strh	r2, [r3, #0]
 80051c8:	e05b      	b.n	8005282 <USB_EPStartXfer+0x10ea>
 80051ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <USB_EPStartXfer+0x1062>
 80051f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f4:	3301      	adds	r3, #1
 80051f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29a      	uxth	r2, r3
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005206:	b29b      	uxth	r3, r3
 8005208:	029b      	lsls	r3, r3, #10
 800520a:	b29b      	uxth	r3, r3
 800520c:	4313      	orrs	r3, r2
 800520e:	b29a      	uxth	r2, r3
 8005210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	e034      	b.n	8005282 <USB_EPStartXfer+0x10ea>
 8005218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	785b      	ldrb	r3, [r3, #1]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d12c      	bne.n	8005282 <USB_EPStartXfer+0x10ea>
 8005228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005244:	b29b      	uxth	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800524c:	4413      	add	r3, r2
 800524e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	011a      	lsls	r2, r3, #4
 8005260:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005264:	4413      	add	r3, r2
 8005266:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800526a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800526e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	b29a      	uxth	r2, r3
 800527c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 809d 	bne.w	80053dc <USB_EPStartXfer+0x1244>
 80052a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052be:	b29b      	uxth	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052c6:	4413      	add	r3, r2
 80052c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	011a      	lsls	r2, r3, #4
 80052da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052de:	4413      	add	r3, r2
 80052e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052fa:	801a      	strh	r2, [r3, #0]
 80052fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b3e      	cmp	r3, #62	; 0x3e
 800530a:	d92b      	bls.n	8005364 <USB_EPStartXfer+0x11cc>
 800530c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800531e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <USB_EPStartXfer+0x11a4>
 8005332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005336:	3b01      	subs	r3, #1
 8005338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800533c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29a      	uxth	r2, r3
 8005344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005348:	b29b      	uxth	r3, r3
 800534a:	029b      	lsls	r3, r3, #10
 800534c:	b29b      	uxth	r3, r3
 800534e:	4313      	orrs	r3, r2
 8005350:	b29b      	uxth	r3, r3
 8005352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535a:	b29a      	uxth	r2, r3
 800535c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	e069      	b.n	8005438 <USB_EPStartXfer+0x12a0>
 8005364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10c      	bne.n	800538e <USB_EPStartXfer+0x11f6>
 8005374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005384:	b29a      	uxth	r2, r3
 8005386:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	e054      	b.n	8005438 <USB_EPStartXfer+0x12a0>
 800538e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <USB_EPStartXfer+0x1226>
 80053b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b8:	3301      	adds	r3, #1
 80053ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	029b      	lsls	r3, r3, #10
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	4313      	orrs	r3, r2
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	e02d      	b.n	8005438 <USB_EPStartXfer+0x12a0>
 80053dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	785b      	ldrb	r3, [r3, #1]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d125      	bne.n	8005438 <USB_EPStartXfer+0x12a0>
 80053ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005402:	4413      	add	r3, r2
 8005404:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800540c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	011a      	lsls	r2, r3, #4
 8005416:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800541a:	4413      	add	r3, r2
 800541c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005420:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	b29a      	uxth	r2, r3
 8005432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005436:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800543c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8218 	beq.w	800587a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800544a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800546a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800546e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <USB_EPStartXfer+0x12ea>
 8005476:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10d      	bne.n	800549e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005482:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800548a:	2b00      	cmp	r3, #0
 800548c:	f040 81f5 	bne.w	800587a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005490:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	f040 81ee 	bne.w	800587a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800549e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80054c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	441a      	add	r2, r3
 80054e2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80054e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	8013      	strh	r3, [r2, #0]
 80054fa:	e1be      	b.n	800587a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80054fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	78db      	ldrb	r3, [r3, #3]
 8005508:	2b01      	cmp	r3, #1
 800550a:	f040 81b4 	bne.w	8005876 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800550e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	429a      	cmp	r2, r3
 8005528:	d917      	bls.n	800555a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800552a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800553a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554a:	1ad2      	subs	r2, r2, r3
 800554c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	619a      	str	r2, [r3, #24]
 8005558:	e00e      	b.n	8005578 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800555a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800556a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2200      	movs	r2, #0
 8005576:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f040 8085 	bne.w	8005694 <USB_EPStartXfer+0x14fc>
 800558a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055ae:	4413      	add	r3, r2
 80055b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	011a      	lsls	r2, r3, #4
 80055c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055c6:	4413      	add	r3, r2
 80055c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055dc:	b29a      	uxth	r2, r3
 80055de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e8:	2b3e      	cmp	r3, #62	; 0x3e
 80055ea:	d923      	bls.n	8005634 <USB_EPStartXfer+0x149c>
 80055ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <USB_EPStartXfer+0x1474>
 8005602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005606:	3b01      	subs	r3, #1
 8005608:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800560c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29a      	uxth	r2, r3
 8005614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005618:	b29b      	uxth	r3, r3
 800561a:	029b      	lsls	r3, r3, #10
 800561c:	b29b      	uxth	r3, r3
 800561e:	4313      	orrs	r3, r2
 8005620:	b29b      	uxth	r3, r3
 8005622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562a:	b29a      	uxth	r2, r3
 800562c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	e060      	b.n	80056f6 <USB_EPStartXfer+0x155e>
 8005634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10c      	bne.n	8005656 <USB_EPStartXfer+0x14be>
 800563c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800564c:	b29a      	uxth	r2, r3
 800564e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005652:	801a      	strh	r2, [r3, #0]
 8005654:	e04f      	b.n	80056f6 <USB_EPStartXfer+0x155e>
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <USB_EPStartXfer+0x14de>
 800566c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005670:	3301      	adds	r3, #1
 8005672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29a      	uxth	r2, r3
 800567e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005682:	b29b      	uxth	r3, r3
 8005684:	029b      	lsls	r3, r3, #10
 8005686:	b29b      	uxth	r3, r3
 8005688:	4313      	orrs	r3, r2
 800568a:	b29a      	uxth	r2, r3
 800568c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	e030      	b.n	80056f6 <USB_EPStartXfer+0x155e>
 8005694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d128      	bne.n	80056f6 <USB_EPStartXfer+0x155e>
 80056a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056c8:	4413      	add	r3, r2
 80056ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	011a      	lsls	r2, r3, #4
 80056dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056e0:	4413      	add	r3, r2
 80056e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80056f4:	801a      	strh	r2, [r3, #0]
 80056f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 8085 	bne.w	8005820 <USB_EPStartXfer+0x1688>
 8005716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005732:	b29b      	uxth	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800573a:	4413      	add	r3, r2
 800573c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	011a      	lsls	r2, r3, #4
 800574e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005752:	4413      	add	r3, r2
 8005754:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800575c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005768:	b29a      	uxth	r2, r3
 800576a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800576e:	801a      	strh	r2, [r3, #0]
 8005770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005774:	2b3e      	cmp	r3, #62	; 0x3e
 8005776:	d923      	bls.n	80057c0 <USB_EPStartXfer+0x1628>
 8005778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <USB_EPStartXfer+0x1600>
 800578e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005792:	3b01      	subs	r3, #1
 8005794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005798:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29a      	uxth	r2, r3
 80057a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	029b      	lsls	r3, r3, #10
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	4313      	orrs	r3, r2
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e05c      	b.n	800587a <USB_EPStartXfer+0x16e2>
 80057c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10c      	bne.n	80057e2 <USB_EPStartXfer+0x164a>
 80057c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d8:	b29a      	uxth	r2, r3
 80057da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057de:	801a      	strh	r2, [r3, #0]
 80057e0:	e04b      	b.n	800587a <USB_EPStartXfer+0x16e2>
 80057e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <USB_EPStartXfer+0x166a>
 80057f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057fc:	3301      	adds	r3, #1
 80057fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29a      	uxth	r2, r3
 800580a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800580e:	b29b      	uxth	r3, r3
 8005810:	029b      	lsls	r3, r3, #10
 8005812:	b29b      	uxth	r3, r3
 8005814:	4313      	orrs	r3, r2
 8005816:	b29a      	uxth	r2, r3
 8005818:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800581c:	801a      	strh	r2, [r3, #0]
 800581e:	e02c      	b.n	800587a <USB_EPStartXfer+0x16e2>
 8005820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d124      	bne.n	800587a <USB_EPStartXfer+0x16e2>
 8005830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583e:	b29b      	uxth	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005846:	4413      	add	r3, r2
 8005848:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800584c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	011a      	lsls	r2, r3, #4
 800585a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800585e:	4413      	add	r3, r2
 8005860:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005864:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800586c:	b29a      	uxth	r2, r3
 800586e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	e001      	b.n	800587a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e03a      	b.n	80058f0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800587a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800589c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80058a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80058a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80058b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80058b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80058bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	441a      	add	r2, r3
 80058d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80058da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d020      	beq.n	800594e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005922:	81bb      	strh	r3, [r7, #12]
 8005924:	89bb      	ldrh	r3, [r7, #12]
 8005926:	f083 0310 	eor.w	r3, r3, #16
 800592a:	81bb      	strh	r3, [r7, #12]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	89bb      	ldrh	r3, [r7, #12]
 8005938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005948:	b29b      	uxth	r3, r3
 800594a:	8013      	strh	r3, [r2, #0]
 800594c:	e01f      	b.n	800598e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005964:	81fb      	strh	r3, [r7, #14]
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800596c:	81fb      	strh	r3, [r7, #14]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	441a      	add	r2, r3
 8005978:	89fb      	ldrh	r3, [r7, #14]
 800597a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800597e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800598a:	b29b      	uxth	r3, r3
 800598c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800599a:	b480      	push	{r7}
 800599c:	b087      	sub	sp, #28
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	7b1b      	ldrb	r3, [r3, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f040 809d 	bne.w	8005ae8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d04c      	beq.n	8005a50 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	823b      	strh	r3, [r7, #16]
 80059c4:	8a3b      	ldrh	r3, [r7, #16]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01b      	beq.n	8005a06 <USB_EPClearStall+0x6c>
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e4:	81fb      	strh	r3, [r7, #14]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	441a      	add	r2, r3
 80059f0:	89fb      	ldrh	r3, [r7, #14]
 80059f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	78db      	ldrb	r3, [r3, #3]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d06c      	beq.n	8005ae8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a24:	81bb      	strh	r3, [r7, #12]
 8005a26:	89bb      	ldrh	r3, [r7, #12]
 8005a28:	f083 0320 	eor.w	r3, r3, #32
 8005a2c:	81bb      	strh	r3, [r7, #12]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	441a      	add	r2, r3
 8005a38:	89bb      	ldrh	r3, [r7, #12]
 8005a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	8013      	strh	r3, [r2, #0]
 8005a4e:	e04b      	b.n	8005ae8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	82fb      	strh	r3, [r7, #22]
 8005a5e:	8afb      	ldrh	r3, [r7, #22]
 8005a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01b      	beq.n	8005aa0 <USB_EPClearStall+0x106>
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7e:	82bb      	strh	r3, [r7, #20]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	441a      	add	r2, r3
 8005a8a:	8abb      	ldrh	r3, [r7, #20]
 8005a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	827b      	strh	r3, [r7, #18]
 8005ab8:	8a7b      	ldrh	r3, [r7, #18]
 8005aba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005abe:	827b      	strh	r3, [r7, #18]
 8005ac0:	8a7b      	ldrh	r3, [r7, #18]
 8005ac2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ac6:	827b      	strh	r3, [r7, #18]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	441a      	add	r2, r3
 8005ad2:	8a7b      	ldrh	r3, [r7, #18]
 8005ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2280      	movs	r2, #128	; 0x80
 8005b0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr

08005b1a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr

08005b2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr

08005b42 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005b54:	68fb      	ldr	r3, [r7, #12]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr

08005b60 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr

08005b76 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b08b      	sub	sp, #44	; 0x2c
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	4611      	mov	r1, r2
 8005b82:	461a      	mov	r2, r3
 8005b84:	460b      	mov	r3, r1
 8005b86:	80fb      	strh	r3, [r7, #6]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b8c:	88bb      	ldrh	r3, [r7, #4]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	085b      	lsrs	r3, r3, #1
 8005b92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b9c:	88fb      	ldrh	r3, [r7, #6]
 8005b9e:	005a      	lsls	r2, r3, #1
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
 8005bae:	e01e      	b.n	8005bee <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	b21a      	sxth	r2, r3
 8005bc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	b21b      	sxth	r3, r3
 8005bc8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	8a7a      	ldrh	r2, [r7, #18]
 8005bce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	3302      	adds	r3, #2
 8005bd4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	3302      	adds	r3, #2
 8005bda:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	3301      	adds	r3, #1
 8005be0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	3301      	adds	r3, #1
 8005be6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	3b01      	subs	r3, #1
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1dd      	bne.n	8005bb0 <USB_WritePMA+0x3a>
  }
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
 8005bf8:	372c      	adds	r7, #44	; 0x2c
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b08b      	sub	sp, #44	; 0x2c
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	460b      	mov	r3, r1
 8005c10:	80fb      	strh	r3, [r7, #6]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005c16:	88bb      	ldrh	r3, [r7, #4]
 8005c18:	085b      	lsrs	r3, r3, #1
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005c26:	88fb      	ldrh	r3, [r7, #6]
 8005c28:	005a      	lsls	r2, r3, #1
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c32:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
 8005c38:	e01b      	b.n	8005c72 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	3302      	adds	r3, #2
 8005c46:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	3301      	adds	r3, #1
 8005c54:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	0a1b      	lsrs	r3, r3, #8
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	3301      	adds	r3, #1
 8005c64:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	3302      	adds	r3, #2
 8005c6a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e0      	bne.n	8005c3a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005c78:	88bb      	ldrh	r3, [r7, #4]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d007      	beq.n	8005c94 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	701a      	strb	r2, [r3, #0]
  }
}
 8005c94:	bf00      	nop
 8005c96:	372c      	adds	r7, #44	; 0x2c
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	7c1b      	ldrb	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d115      	bne.n	8005ce2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cba:	2202      	movs	r2, #2
 8005cbc:	2181      	movs	r1, #129	; 0x81
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 fe67 	bl	8007992 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cce:	2202      	movs	r2, #2
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fe5d 	bl	8007992 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005ce0:	e012      	b.n	8005d08 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ce2:	2340      	movs	r3, #64	; 0x40
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	2181      	movs	r1, #129	; 0x81
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f001 fe52 	bl	8007992 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005cf4:	2340      	movs	r3, #64	; 0x40
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f001 fe49 	bl	8007992 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d08:	2308      	movs	r3, #8
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	2182      	movs	r1, #130	; 0x82
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f001 fe3f 	bl	8007992 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d1a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d1e:	f001 ff5f 	bl	8007be0 <USBD_static_malloc>
 8005d22:	4602      	mov	r2, r0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005d34:	2301      	movs	r3, #1
 8005d36:	73fb      	strb	r3, [r7, #15]
 8005d38:	e026      	b.n	8005d88 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d40:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	7c1b      	ldrb	r3, [r3, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d109      	bne.n	8005d78 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d6e:	2101      	movs	r1, #1
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 feff 	bl	8007b74 <USBD_LL_PrepareReceive>
 8005d76:	e007      	b.n	8005d88 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d7e:	2340      	movs	r3, #64	; 0x40
 8005d80:	2101      	movs	r1, #1
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f001 fef6 	bl	8007b74 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005da2:	2181      	movs	r1, #129	; 0x81
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 fe1a 	bl	80079de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005db0:	2101      	movs	r1, #1
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f001 fe13 	bl	80079de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005dc0:	2182      	movs	r1, #130	; 0x82
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f001 fe0b 	bl	80079de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00e      	beq.n	8005df6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de8:	4618      	mov	r0, r3
 8005dea:	f001 ff05 	bl	8007bf8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e10:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d039      	beq.n	8005e9e <USBD_CDC_Setup+0x9e>
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	d17f      	bne.n	8005f2e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	88db      	ldrh	r3, [r3, #6]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d029      	beq.n	8005e8a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	b25b      	sxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	da11      	bge.n	8005e64 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005e4c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	88d2      	ldrh	r2, [r2, #6]
 8005e52:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005e54:	6939      	ldr	r1, [r7, #16]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	88db      	ldrh	r3, [r3, #6]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f001 f9da 	bl	8007216 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005e62:	e06b      	b.n	8005f3c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	785a      	ldrb	r2, [r3, #1]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	88db      	ldrh	r3, [r3, #6]
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005e7a:	6939      	ldr	r1, [r7, #16]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	88db      	ldrh	r3, [r3, #6]
 8005e80:	461a      	mov	r2, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 f9f5 	bl	8007272 <USBD_CtlPrepareRx>
      break;
 8005e88:	e058      	b.n	8005f3c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	7850      	ldrb	r0, [r2, #1]
 8005e96:	2200      	movs	r2, #0
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	4798      	blx	r3
      break;
 8005e9c:	e04e      	b.n	8005f3c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	2b0b      	cmp	r3, #11
 8005ea4:	d02e      	beq.n	8005f04 <USBD_CDC_Setup+0x104>
 8005ea6:	2b0b      	cmp	r3, #11
 8005ea8:	dc38      	bgt.n	8005f1c <USBD_CDC_Setup+0x11c>
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <USBD_CDC_Setup+0xb4>
 8005eae:	2b0a      	cmp	r3, #10
 8005eb0:	d014      	beq.n	8005edc <USBD_CDC_Setup+0xdc>
 8005eb2:	e033      	b.n	8005f1c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d107      	bne.n	8005ece <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005ebe:	f107 030c 	add.w	r3, r7, #12
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f001 f9a5 	bl	8007216 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ecc:	e02e      	b.n	8005f2c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f001 f936 	bl	8007142 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8005eda:	e027      	b.n	8005f2c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d107      	bne.n	8005ef6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ee6:	f107 030f 	add.w	r3, r7, #15
 8005eea:	2201      	movs	r2, #1
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 f991 	bl	8007216 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ef4:	e01a      	b.n	8005f2c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 f922 	bl	8007142 <USBD_CtlError>
            ret = USBD_FAIL;
 8005efe:	2302      	movs	r3, #2
 8005f00:	75fb      	strb	r3, [r7, #23]
          break;
 8005f02:	e013      	b.n	8005f2c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d00d      	beq.n	8005f2a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 f916 	bl	8007142 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f16:	2302      	movs	r3, #2
 8005f18:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005f1a:	e006      	b.n	8005f2a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 f90f 	bl	8007142 <USBD_CtlError>
          ret = USBD_FAIL;
 8005f24:	2302      	movs	r3, #2
 8005f26:	75fb      	strb	r3, [r7, #23]
          break;
 8005f28:	e000      	b.n	8005f2c <USBD_CDC_Setup+0x12c>
          break;
 8005f2a:	bf00      	nop
      }
      break;
 8005f2c:	e006      	b.n	8005f3c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f001 f906 	bl	8007142 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f36:	2302      	movs	r3, #2
 8005f38:	75fb      	strb	r3, [r7, #23]
      break;
 8005f3a:	bf00      	nop
  }

  return ret;
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f58:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f60:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d03a      	beq.n	8005fe2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005f6c:	78fa      	ldrb	r2, [r7, #3]
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	331c      	adds	r3, #28
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d029      	beq.n	8005fd6 <USBD_CDC_DataIn+0x90>
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	440b      	add	r3, r1
 8005f90:	331c      	adds	r3, #28
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	78f9      	ldrb	r1, [r7, #3]
 8005f96:	68b8      	ldr	r0, [r7, #8]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	4403      	add	r3, r0
 8005fa2:	3338      	adds	r3, #56	; 0x38
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	fbb2 f1f3 	udiv	r1, r2, r3
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d110      	bne.n	8005fd6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005fb4:	78fa      	ldrb	r2, [r7, #3]
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	331c      	adds	r3, #28
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005fc8:	78f9      	ldrb	r1, [r7, #3]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2200      	movs	r2, #0
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f001 fdad 	bl	8007b2e <USBD_LL_Transmit>
 8005fd4:	e003      	b.n	8005fde <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e000      	b.n	8005fe4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005fe2:	2302      	movs	r3, #2
  }
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 fdd8 	bl	8007bba <USBD_LL_GetRxDataSize>
 800600a:	4602      	mov	r2, r0
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00d      	beq.n	8006038 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006030:	4611      	mov	r1, r2
 8006032:	4798      	blx	r3

    return USBD_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	e000      	b.n	800603a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006038:	2302      	movs	r3, #2
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006050:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006058:	2b00      	cmp	r3, #0
 800605a:	d015      	beq.n	8006088 <USBD_CDC_EP0_RxReady+0x46>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006062:	2bff      	cmp	r3, #255	; 0xff
 8006064:	d010      	beq.n	8006088 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006074:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800607c:	b292      	uxth	r2, r2
 800607e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	22ff      	movs	r2, #255	; 0xff
 8006084:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2243      	movs	r2, #67	; 0x43
 80060a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80060a2:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	2000009c 	.word	0x2000009c

080060b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2243      	movs	r2, #67	; 0x43
 80060c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80060c2:	4b03      	ldr	r3, [pc, #12]	; (80060d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20000058 	.word	0x20000058

080060d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2243      	movs	r2, #67	; 0x43
 80060e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80060e2:	4b03      	ldr	r3, [pc, #12]	; (80060f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	200000e0 	.word	0x200000e0

080060f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	220a      	movs	r2, #10
 8006100:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006102:	4b03      	ldr	r3, [pc, #12]	; (8006110 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	20000014 	.word	0x20000014

08006114 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800611e:	2302      	movs	r3, #2
 8006120:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr

08006140 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006154:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr

08006172 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006172:	b480      	push	{r7}
 8006174:	b085      	sub	sp, #20
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006182:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d017      	beq.n	80061e2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	7c1b      	ldrb	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d109      	bne.n	80061ce <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061c4:	2101      	movs	r1, #1
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 fcd4 	bl	8007b74 <USBD_LL_PrepareReceive>
 80061cc:	e007      	b.n	80061de <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061d4:	2340      	movs	r3, #64	; 0x40
 80061d6:	2101      	movs	r1, #1
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f001 fccb 	bl	8007b74 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e000      	b.n	80061e4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80061e2:	2302      	movs	r3, #2
  }
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	4613      	mov	r3, r2
 80061f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006200:	2302      	movs	r3, #2
 8006202:	e01a      	b.n	800623a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	79fa      	ldrb	r2, [r7, #7]
 8006230:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f001 fb38 	bl	80078a8 <USBD_LL_Init>

  return USBD_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006242:	b480      	push	{r7}
 8006244:	b085      	sub	sp, #20
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d006      	beq.n	8006264 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]
 8006262:	e001      	b.n	8006268 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006264:	2302      	movs	r3, #2
 8006266:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006268:	7bfb      	ldrb	r3, [r7, #15]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 fb6d 	bl	800795c <USBD_LL_Start>

  return USBD_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr

080062a0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80062ac:	2302      	movs	r3, #2
 80062ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	78fa      	ldrb	r2, [r7, #3]
 80062c4:	4611      	mov	r1, r2
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	4798      	blx	r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	460b      	mov	r3, r1
 80062e8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	78fa      	ldrb	r2, [r7, #3]
 80062f4:	4611      	mov	r1, r2
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	4798      	blx	r3

  return USBD_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fed7 	bl	80070ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	2b02      	cmp	r3, #2
 800633e:	d016      	beq.n	800636e <USBD_LL_SetupStage+0x6a>
 8006340:	2b02      	cmp	r3, #2
 8006342:	d81c      	bhi.n	800637e <USBD_LL_SetupStage+0x7a>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <USBD_LL_SetupStage+0x4a>
 8006348:	2b01      	cmp	r3, #1
 800634a:	d008      	beq.n	800635e <USBD_LL_SetupStage+0x5a>
 800634c:	e017      	b.n	800637e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f9ca 	bl	80066f0 <USBD_StdDevReq>
      break;
 800635c:	e01a      	b.n	8006394 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fa2c 	bl	80067c4 <USBD_StdItfReq>
      break;
 800636c:	e012      	b.n	8006394 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fa6c 	bl	8006854 <USBD_StdEPReq>
      break;
 800637c:	e00a      	b.n	8006394 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006384:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006388:	b2db      	uxtb	r3, r3
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 fb45 	bl	8007a1c <USBD_LL_StallEP>
      break;
 8006392:	bf00      	nop
  }

  return USBD_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	460b      	mov	r3, r1
 80063a8:	607a      	str	r2, [r7, #4]
 80063aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80063ac:	7afb      	ldrb	r3, [r7, #11]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d14b      	bne.n	800644a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d134      	bne.n	800642e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d919      	bls.n	8006404 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	1ad2      	subs	r2, r2, r3
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d203      	bcs.n	80063f2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	e002      	b.n	80063f8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 ff56 	bl	80072ae <USBD_CtlContinueRx>
 8006402:	e038      	b.n	8006476 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006416:	2b03      	cmp	r3, #3
 8006418:	d105      	bne.n	8006426 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 ff53 	bl	80072d2 <USBD_CtlSendStatus>
 800642c:	e023      	b.n	8006476 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006434:	2b05      	cmp	r3, #5
 8006436:	d11e      	bne.n	8006476 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006440:	2100      	movs	r1, #0
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f001 faea 	bl	8007a1c <USBD_LL_StallEP>
 8006448:	e015      	b.n	8006476 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00d      	beq.n	8006472 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800645c:	2b03      	cmp	r3, #3
 800645e:	d108      	bne.n	8006472 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	7afa      	ldrb	r2, [r7, #11]
 800646a:	4611      	mov	r1, r2
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	4798      	blx	r3
 8006470:	e001      	b.n	8006476 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006472:	2302      	movs	r3, #2
 8006474:	e000      	b.n	8006478 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	460b      	mov	r3, r1
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800648e:	7afb      	ldrb	r3, [r7, #11]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d17f      	bne.n	8006594 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3314      	adds	r3, #20
 8006498:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d15c      	bne.n	800655e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d915      	bls.n	80064dc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	1ad2      	subs	r2, r2, r3
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 fec0 	bl	800724e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064ce:	2300      	movs	r3, #0
 80064d0:	2200      	movs	r2, #0
 80064d2:	2100      	movs	r1, #0
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f001 fb4d 	bl	8007b74 <USBD_LL_PrepareReceive>
 80064da:	e04e      	b.n	800657a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	6912      	ldr	r2, [r2, #16]
 80064e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80064e8:	fb01 f202 	mul.w	r2, r1, r2
 80064ec:	1a9b      	subs	r3, r3, r2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d11c      	bne.n	800652c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d316      	bcc.n	800652c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006508:	429a      	cmp	r2, r3
 800650a:	d20f      	bcs.n	800652c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800650c:	2200      	movs	r2, #0
 800650e:	2100      	movs	r1, #0
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fe9c 	bl	800724e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800651e:	2300      	movs	r3, #0
 8006520:	2200      	movs	r2, #0
 8006522:	2100      	movs	r1, #0
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f001 fb25 	bl	8007b74 <USBD_LL_PrepareReceive>
 800652a:	e026      	b.n	800657a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800653e:	2b03      	cmp	r3, #3
 8006540:	d105      	bne.n	800654e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800654e:	2180      	movs	r1, #128	; 0x80
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f001 fa63 	bl	8007a1c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fece 	bl	80072f8 <USBD_CtlReceiveStatus>
 800655c:	e00d      	b.n	800657a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006564:	2b04      	cmp	r3, #4
 8006566:	d004      	beq.n	8006572 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006572:	2180      	movs	r1, #128	; 0x80
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f001 fa51 	bl	8007a1c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006580:	2b01      	cmp	r3, #1
 8006582:	d11d      	bne.n	80065c0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff fe81 	bl	800628c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006592:	e015      	b.n	80065c0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00d      	beq.n	80065bc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d108      	bne.n	80065bc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	7afa      	ldrb	r2, [r7, #11]
 80065b4:	4611      	mov	r1, r2
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	4798      	blx	r3
 80065ba:	e001      	b.n	80065c0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80065bc:	2302      	movs	r3, #2
 80065be:	e000      	b.n	80065c2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065d2:	2340      	movs	r3, #64	; 0x40
 80065d4:	2200      	movs	r2, #0
 80065d6:	2100      	movs	r1, #0
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f9da 	bl	8007992 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2240      	movs	r2, #64	; 0x40
 80065ea:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065ee:	2340      	movs	r3, #64	; 0x40
 80065f0:	2200      	movs	r2, #0
 80065f2:	2180      	movs	r1, #128	; 0x80
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 f9cc 	bl	8007992 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2240      	movs	r2, #64	; 0x40
 8006604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d009      	beq.n	8006642 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6852      	ldr	r2, [r2, #4]
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	4611      	mov	r1, r2
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
  }

  return USBD_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	78fa      	ldrb	r2, [r7, #3]
 800665c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr

0800666a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2204      	movs	r2, #4
 8006682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr

08006692 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d105      	bne.n	80066b0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bc80      	pop	{r7}
 80066ba:	4770      	bx	lr

080066bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d10b      	bne.n	80066e6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d005      	beq.n	8006716 <USBD_StdDevReq+0x26>
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d84f      	bhi.n	80067ae <USBD_StdDevReq+0xbe>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d009      	beq.n	8006726 <USBD_StdDevReq+0x36>
 8006712:	2b20      	cmp	r3, #32
 8006714:	d14b      	bne.n	80067ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	4798      	blx	r3
      break;
 8006724:	e048      	b.n	80067b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	785b      	ldrb	r3, [r3, #1]
 800672a:	2b09      	cmp	r3, #9
 800672c:	d839      	bhi.n	80067a2 <USBD_StdDevReq+0xb2>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <USBD_StdDevReq+0x44>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006785 	.word	0x08006785
 8006738:	08006799 	.word	0x08006799
 800673c:	080067a3 	.word	0x080067a3
 8006740:	0800678f 	.word	0x0800678f
 8006744:	080067a3 	.word	0x080067a3
 8006748:	08006767 	.word	0x08006767
 800674c:	0800675d 	.word	0x0800675d
 8006750:	080067a3 	.word	0x080067a3
 8006754:	0800677b 	.word	0x0800677b
 8006758:	08006771 	.word	0x08006771
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f9dc 	bl	8006b1c <USBD_GetDescriptor>
          break;
 8006764:	e022      	b.n	80067ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fb3f 	bl	8006dec <USBD_SetAddress>
          break;
 800676e:	e01d      	b.n	80067ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fb7e 	bl	8006e74 <USBD_SetConfig>
          break;
 8006778:	e018      	b.n	80067ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fc07 	bl	8006f90 <USBD_GetConfig>
          break;
 8006782:	e013      	b.n	80067ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fc37 	bl	8006ffa <USBD_GetStatus>
          break;
 800678c:	e00e      	b.n	80067ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fc65 	bl	8007060 <USBD_SetFeature>
          break;
 8006796:	e009      	b.n	80067ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fc74 	bl	8007088 <USBD_ClrFeature>
          break;
 80067a0:	e004      	b.n	80067ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fccc 	bl	8007142 <USBD_CtlError>
          break;
 80067aa:	bf00      	nop
      }
      break;
 80067ac:	e004      	b.n	80067b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fcc6 	bl	8007142 <USBD_CtlError>
      break;
 80067b6:	bf00      	nop
  }

  return ret;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop

080067c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d005      	beq.n	80067ea <USBD_StdItfReq+0x26>
 80067de:	2b40      	cmp	r3, #64	; 0x40
 80067e0:	d82e      	bhi.n	8006840 <USBD_StdItfReq+0x7c>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <USBD_StdItfReq+0x26>
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d12a      	bne.n	8006840 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f0:	3b01      	subs	r3, #1
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d81d      	bhi.n	8006832 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	889b      	ldrh	r3, [r3, #4]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d813      	bhi.n	8006828 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
 800680e:	4603      	mov	r3, r0
 8006810:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	88db      	ldrh	r3, [r3, #6]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d110      	bne.n	800683c <USBD_StdItfReq+0x78>
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10d      	bne.n	800683c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fd56 	bl	80072d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006826:	e009      	b.n	800683c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fc89 	bl	8007142 <USBD_CtlError>
          break;
 8006830:	e004      	b.n	800683c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fc84 	bl	8007142 <USBD_CtlError>
          break;
 800683a:	e000      	b.n	800683e <USBD_StdItfReq+0x7a>
          break;
 800683c:	bf00      	nop
      }
      break;
 800683e:	e004      	b.n	800684a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fc7d 	bl	8007142 <USBD_CtlError>
      break;
 8006848:	bf00      	nop
  }

  return USBD_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	889b      	ldrh	r3, [r3, #4]
 8006866:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006870:	2b40      	cmp	r3, #64	; 0x40
 8006872:	d007      	beq.n	8006884 <USBD_StdEPReq+0x30>
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	f200 8146 	bhi.w	8006b06 <USBD_StdEPReq+0x2b2>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <USBD_StdEPReq+0x40>
 800687e:	2b20      	cmp	r3, #32
 8006880:	f040 8141 	bne.w	8006b06 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
      break;
 8006892:	e13d      	b.n	8006b10 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800689c:	2b20      	cmp	r3, #32
 800689e:	d10a      	bne.n	80068b6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	4798      	blx	r3
 80068ae:	4603      	mov	r3, r0
 80068b0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	e12d      	b.n	8006b12 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d007      	beq.n	80068ce <USBD_StdEPReq+0x7a>
 80068be:	2b03      	cmp	r3, #3
 80068c0:	f300 811b 	bgt.w	8006afa <USBD_StdEPReq+0x2a6>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d072      	beq.n	80069ae <USBD_StdEPReq+0x15a>
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d03a      	beq.n	8006942 <USBD_StdEPReq+0xee>
 80068cc:	e115      	b.n	8006afa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d002      	beq.n	80068de <USBD_StdEPReq+0x8a>
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d015      	beq.n	8006908 <USBD_StdEPReq+0xb4>
 80068dc:	e02b      	b.n	8006936 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00c      	beq.n	80068fe <USBD_StdEPReq+0xaa>
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	2b80      	cmp	r3, #128	; 0x80
 80068e8:	d009      	beq.n	80068fe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f001 f894 	bl	8007a1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80068f4:	2180      	movs	r1, #128	; 0x80
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 f890 	bl	8007a1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068fc:	e020      	b.n	8006940 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fc1e 	bl	8007142 <USBD_CtlError>
              break;
 8006906:	e01b      	b.n	8006940 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	885b      	ldrh	r3, [r3, #2]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10e      	bne.n	800692e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <USBD_StdEPReq+0xda>
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	2b80      	cmp	r3, #128	; 0x80
 800691a:	d008      	beq.n	800692e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	88db      	ldrh	r3, [r3, #6]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d104      	bne.n	800692e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 f877 	bl	8007a1c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fccf 	bl	80072d2 <USBD_CtlSendStatus>

              break;
 8006934:	e004      	b.n	8006940 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fc02 	bl	8007142 <USBD_CtlError>
              break;
 800693e:	bf00      	nop
          }
          break;
 8006940:	e0e0      	b.n	8006b04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006948:	2b02      	cmp	r3, #2
 800694a:	d002      	beq.n	8006952 <USBD_StdEPReq+0xfe>
 800694c:	2b03      	cmp	r3, #3
 800694e:	d015      	beq.n	800697c <USBD_StdEPReq+0x128>
 8006950:	e026      	b.n	80069a0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00c      	beq.n	8006972 <USBD_StdEPReq+0x11e>
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	2b80      	cmp	r3, #128	; 0x80
 800695c:	d009      	beq.n	8006972 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 f85a 	bl	8007a1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006968:	2180      	movs	r1, #128	; 0x80
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 f856 	bl	8007a1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006970:	e01c      	b.n	80069ac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fbe4 	bl	8007142 <USBD_CtlError>
              break;
 800697a:	e017      	b.n	80069ac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	885b      	ldrh	r3, [r3, #2]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d112      	bne.n	80069aa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800698a:	2b00      	cmp	r3, #0
 800698c:	d004      	beq.n	8006998 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f001 f861 	bl	8007a5a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fc9a 	bl	80072d2 <USBD_CtlSendStatus>
              }
              break;
 800699e:	e004      	b.n	80069aa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fbcd 	bl	8007142 <USBD_CtlError>
              break;
 80069a8:	e000      	b.n	80069ac <USBD_StdEPReq+0x158>
              break;
 80069aa:	bf00      	nop
          }
          break;
 80069ac:	e0aa      	b.n	8006b04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d002      	beq.n	80069be <USBD_StdEPReq+0x16a>
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d032      	beq.n	8006a22 <USBD_StdEPReq+0x1ce>
 80069bc:	e097      	b.n	8006aee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d007      	beq.n	80069d4 <USBD_StdEPReq+0x180>
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	2b80      	cmp	r3, #128	; 0x80
 80069c8:	d004      	beq.n	80069d4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fbb8 	bl	8007142 <USBD_CtlError>
                break;
 80069d2:	e091      	b.n	8006af8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	da0b      	bge.n	80069f4 <USBD_StdEPReq+0x1a0>
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	3310      	adds	r3, #16
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	4413      	add	r3, r2
 80069f0:	3304      	adds	r3, #4
 80069f2:	e00b      	b.n	8006a0c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
 80069f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	4413      	add	r3, r2
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2202      	movs	r2, #2
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fbfb 	bl	8007216 <USBD_CtlSendData>
              break;
 8006a20:	e06a      	b.n	8006af8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	da11      	bge.n	8006a4e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	3318      	adds	r3, #24
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d117      	bne.n	8006a74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fb7b 	bl	8007142 <USBD_CtlError>
                  break;
 8006a4c:	e054      	b.n	8006af8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	f003 020f 	and.w	r2, r3, #15
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	440b      	add	r3, r1
 8006a60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fb68 	bl	8007142 <USBD_CtlError>
                  break;
 8006a72:	e041      	b.n	8006af8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	da0b      	bge.n	8006a94 <USBD_StdEPReq+0x240>
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	3310      	adds	r3, #16
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	3304      	adds	r3, #4
 8006a92:	e00b      	b.n	8006aac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3304      	adds	r3, #4
 8006aac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <USBD_StdEPReq+0x266>
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b80      	cmp	r3, #128	; 0x80
 8006ab8:	d103      	bne.n	8006ac2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	e00e      	b.n	8006ae0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006ac2:	7bbb      	ldrb	r3, [r7, #14]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 ffe6 	bl	8007a98 <USBD_LL_IsStallEP>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	e002      	b.n	8006ae0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fb95 	bl	8007216 <USBD_CtlSendData>
              break;
 8006aec:	e004      	b.n	8006af8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fb26 	bl	8007142 <USBD_CtlError>
              break;
 8006af6:	bf00      	nop
          }
          break;
 8006af8:	e004      	b.n	8006b04 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fb20 	bl	8007142 <USBD_CtlError>
          break;
 8006b02:	bf00      	nop
      }
      break;
 8006b04:	e004      	b.n	8006b10 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fb1a 	bl	8007142 <USBD_CtlError>
      break;
 8006b0e:	bf00      	nop
  }

  return ret;
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	885b      	ldrh	r3, [r3, #2]
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	2b06      	cmp	r3, #6
 8006b3e:	f200 8128 	bhi.w	8006d92 <USBD_GetDescriptor+0x276>
 8006b42:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <USBD_GetDescriptor+0x2c>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b65 	.word	0x08006b65
 8006b4c:	08006b7d 	.word	0x08006b7d
 8006b50:	08006bbd 	.word	0x08006bbd
 8006b54:	08006d93 	.word	0x08006d93
 8006b58:	08006d93 	.word	0x08006d93
 8006b5c:	08006d33 	.word	0x08006d33
 8006b60:	08006d5f 	.word	0x08006d5f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	7c12      	ldrb	r2, [r2, #16]
 8006b70:	f107 0108 	add.w	r1, r7, #8
 8006b74:	4610      	mov	r0, r2
 8006b76:	4798      	blx	r3
 8006b78:	60f8      	str	r0, [r7, #12]
      break;
 8006b7a:	e112      	b.n	8006da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	7c1b      	ldrb	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10d      	bne.n	8006ba0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	f107 0208 	add.w	r2, r7, #8
 8006b90:	4610      	mov	r0, r2
 8006b92:	4798      	blx	r3
 8006b94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b9e:	e100      	b.n	8006da2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	f107 0208 	add.w	r2, r7, #8
 8006bac:	4610      	mov	r0, r2
 8006bae:	4798      	blx	r3
 8006bb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	701a      	strb	r2, [r3, #0]
      break;
 8006bba:	e0f2      	b.n	8006da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	885b      	ldrh	r3, [r3, #2]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b05      	cmp	r3, #5
 8006bc4:	f200 80ac 	bhi.w	8006d20 <USBD_GetDescriptor+0x204>
 8006bc8:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <USBD_GetDescriptor+0xb4>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006be9 	.word	0x08006be9
 8006bd4:	08006c1d 	.word	0x08006c1d
 8006bd8:	08006c51 	.word	0x08006c51
 8006bdc:	08006c85 	.word	0x08006c85
 8006be0:	08006cb9 	.word	0x08006cb9
 8006be4:	08006ced 	.word	0x08006ced
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	7c12      	ldrb	r2, [r2, #16]
 8006c00:	f107 0108 	add.w	r1, r7, #8
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c0a:	e091      	b.n	8006d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fa97 	bl	8007142 <USBD_CtlError>
            err++;
 8006c14:	7afb      	ldrb	r3, [r7, #11]
 8006c16:	3301      	adds	r3, #1
 8006c18:	72fb      	strb	r3, [r7, #11]
          break;
 8006c1a:	e089      	b.n	8006d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	7c12      	ldrb	r2, [r2, #16]
 8006c34:	f107 0108 	add.w	r1, r7, #8
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4798      	blx	r3
 8006c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c3e:	e077      	b.n	8006d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa7d 	bl	8007142 <USBD_CtlError>
            err++;
 8006c48:	7afb      	ldrb	r3, [r7, #11]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c4e:	e06f      	b.n	8006d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00b      	beq.n	8006c74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	7c12      	ldrb	r2, [r2, #16]
 8006c68:	f107 0108 	add.w	r1, r7, #8
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4798      	blx	r3
 8006c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c72:	e05d      	b.n	8006d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fa63 	bl	8007142 <USBD_CtlError>
            err++;
 8006c7c:	7afb      	ldrb	r3, [r7, #11]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	72fb      	strb	r3, [r7, #11]
          break;
 8006c82:	e055      	b.n	8006d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	7c12      	ldrb	r2, [r2, #16]
 8006c9c:	f107 0108 	add.w	r1, r7, #8
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
 8006ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ca6:	e043      	b.n	8006d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fa49 	bl	8007142 <USBD_CtlError>
            err++;
 8006cb0:	7afb      	ldrb	r3, [r7, #11]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cb6:	e03b      	b.n	8006d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	7c12      	ldrb	r2, [r2, #16]
 8006cd0:	f107 0108 	add.w	r1, r7, #8
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4798      	blx	r3
 8006cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cda:	e029      	b.n	8006d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa2f 	bl	8007142 <USBD_CtlError>
            err++;
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cea:	e021      	b.n	8006d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	7c12      	ldrb	r2, [r2, #16]
 8006d04:	f107 0108 	add.w	r1, r7, #8
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4798      	blx	r3
 8006d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d0e:	e00f      	b.n	8006d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fa15 	bl	8007142 <USBD_CtlError>
            err++;
 8006d18:	7afb      	ldrb	r3, [r7, #11]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d1e:	e007      	b.n	8006d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa0d 	bl	8007142 <USBD_CtlError>
          err++;
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006d2e:	e038      	b.n	8006da2 <USBD_GetDescriptor+0x286>
 8006d30:	e037      	b.n	8006da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	7c1b      	ldrb	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d42:	f107 0208 	add.w	r2, r7, #8
 8006d46:	4610      	mov	r0, r2
 8006d48:	4798      	blx	r3
 8006d4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d4c:	e029      	b.n	8006da2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f9f6 	bl	8007142 <USBD_CtlError>
        err++;
 8006d56:	7afb      	ldrb	r3, [r7, #11]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d5c:	e021      	b.n	8006da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	7c1b      	ldrb	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10d      	bne.n	8006d82 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	f107 0208 	add.w	r2, r7, #8
 8006d72:	4610      	mov	r0, r2
 8006d74:	4798      	blx	r3
 8006d76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	2207      	movs	r2, #7
 8006d7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d80:	e00f      	b.n	8006da2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f9dc 	bl	8007142 <USBD_CtlError>
        err++;
 8006d8a:	7afb      	ldrb	r3, [r7, #11]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d90:	e007      	b.n	8006da2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f9d4 	bl	8007142 <USBD_CtlError>
      err++;
 8006d9a:	7afb      	ldrb	r3, [r7, #11]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8006da0:	bf00      	nop
  }

  if (err != 0U)
 8006da2:	7afb      	ldrb	r3, [r7, #11]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d11c      	bne.n	8006de2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006da8:	893b      	ldrh	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d011      	beq.n	8006dd2 <USBD_GetDescriptor+0x2b6>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	88db      	ldrh	r3, [r3, #6]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00d      	beq.n	8006dd2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	88da      	ldrh	r2, [r3, #6]
 8006dba:	893b      	ldrh	r3, [r7, #8]
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	bf28      	it	cs
 8006dc0:	4613      	movcs	r3, r2
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006dc6:	893b      	ldrh	r3, [r7, #8]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	68f9      	ldr	r1, [r7, #12]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fa22 	bl	8007216 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	88db      	ldrh	r3, [r3, #6]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d104      	bne.n	8006de4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa79 	bl	80072d2 <USBD_CtlSendStatus>
 8006de0:	e000      	b.n	8006de4 <USBD_GetDescriptor+0x2c8>
    return;
 8006de2:	bf00      	nop
    }
  }
}
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop

08006dec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	889b      	ldrh	r3, [r3, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d130      	bne.n	8006e60 <USBD_SetAddress+0x74>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	88db      	ldrh	r3, [r3, #6]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d12c      	bne.n	8006e60 <USBD_SetAddress+0x74>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	885b      	ldrh	r3, [r3, #2]
 8006e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e0c:	d828      	bhi.n	8006e60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	885b      	ldrh	r3, [r3, #2]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d104      	bne.n	8006e2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f98b 	bl	8007142 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2c:	e01d      	b.n	8006e6a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	7bfa      	ldrb	r2, [r7, #15]
 8006e32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fe58 	bl	8007af0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fa46 	bl	80072d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e54:	e009      	b.n	8006e6a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5e:	e004      	b.n	8006e6a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f96d 	bl	8007142 <USBD_CtlError>
  }
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	885b      	ldrh	r3, [r3, #2]
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	4b41      	ldr	r3, [pc, #260]	; (8006f8c <USBD_SetConfig+0x118>)
 8006e86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e88:	4b40      	ldr	r3, [pc, #256]	; (8006f8c <USBD_SetConfig+0x118>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d904      	bls.n	8006e9a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f955 	bl	8007142 <USBD_CtlError>
 8006e98:	e075      	b.n	8006f86 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d002      	beq.n	8006eaa <USBD_SetConfig+0x36>
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d023      	beq.n	8006ef0 <USBD_SetConfig+0x7c>
 8006ea8:	e062      	b.n	8006f70 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006eaa:	4b38      	ldr	r3, [pc, #224]	; (8006f8c <USBD_SetConfig+0x118>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01a      	beq.n	8006ee8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006eb2:	4b36      	ldr	r3, [pc, #216]	; (8006f8c <USBD_SetConfig+0x118>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2203      	movs	r2, #3
 8006ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006ec4:	4b31      	ldr	r3, [pc, #196]	; (8006f8c <USBD_SetConfig+0x118>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff f9e8 	bl	80062a0 <USBD_SetClassConfig>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d104      	bne.n	8006ee0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f932 	bl	8007142 <USBD_CtlError>
            return;
 8006ede:	e052      	b.n	8006f86 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f9f6 	bl	80072d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006ee6:	e04e      	b.n	8006f86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f9f2 	bl	80072d2 <USBD_CtlSendStatus>
        break;
 8006eee:	e04a      	b.n	8006f86 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006ef0:	4b26      	ldr	r3, [pc, #152]	; (8006f8c <USBD_SetConfig+0x118>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d112      	bne.n	8006f1e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006f00:	4b22      	ldr	r3, [pc, #136]	; (8006f8c <USBD_SetConfig+0x118>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006f0a:	4b20      	ldr	r3, [pc, #128]	; (8006f8c <USBD_SetConfig+0x118>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff f9e4 	bl	80062de <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f9db 	bl	80072d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006f1c:	e033      	b.n	8006f86 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006f1e:	4b1b      	ldr	r3, [pc, #108]	; (8006f8c <USBD_SetConfig+0x118>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d01d      	beq.n	8006f68 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff f9d2 	bl	80062de <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006f3a:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <USBD_SetConfig+0x118>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006f44:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <USBD_SetConfig+0x118>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff f9a8 	bl	80062a0 <USBD_SetClassConfig>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d104      	bne.n	8006f60 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f8f2 	bl	8007142 <USBD_CtlError>
            return;
 8006f5e:	e012      	b.n	8006f86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f9b6 	bl	80072d2 <USBD_CtlSendStatus>
        break;
 8006f66:	e00e      	b.n	8006f86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f9b2 	bl	80072d2 <USBD_CtlSendStatus>
        break;
 8006f6e:	e00a      	b.n	8006f86 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f8e5 	bl	8007142 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006f78:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <USBD_SetConfig+0x118>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff f9ad 	bl	80062de <USBD_ClrClassConfig>
        break;
 8006f84:	bf00      	nop
    }
  }
}
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	2000020c 	.word	0x2000020c

08006f90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	88db      	ldrh	r3, [r3, #6]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d004      	beq.n	8006fac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f8cc 	bl	8007142 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006faa:	e022      	b.n	8006ff2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	dc02      	bgt.n	8006fbc <USBD_GetConfig+0x2c>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	dc03      	bgt.n	8006fc2 <USBD_GetConfig+0x32>
 8006fba:	e015      	b.n	8006fe8 <USBD_GetConfig+0x58>
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d00b      	beq.n	8006fd8 <USBD_GetConfig+0x48>
 8006fc0:	e012      	b.n	8006fe8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3308      	adds	r3, #8
 8006fcc:	2201      	movs	r2, #1
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f920 	bl	8007216 <USBD_CtlSendData>
        break;
 8006fd6:	e00c      	b.n	8006ff2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	2201      	movs	r2, #1
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f918 	bl	8007216 <USBD_CtlSendData>
        break;
 8006fe6:	e004      	b.n	8006ff2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f8a9 	bl	8007142 <USBD_CtlError>
        break;
 8006ff0:	bf00      	nop
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700a:	3b01      	subs	r3, #1
 800700c:	2b02      	cmp	r3, #2
 800700e:	d81e      	bhi.n	800704e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	88db      	ldrh	r3, [r3, #6]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d004      	beq.n	8007022 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f891 	bl	8007142 <USBD_CtlError>
        break;
 8007020:	e01a      	b.n	8007058 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f043 0202 	orr.w	r2, r3, #2
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	330c      	adds	r3, #12
 8007042:	2202      	movs	r2, #2
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f8e5 	bl	8007216 <USBD_CtlSendData>
      break;
 800704c:	e004      	b.n	8007058 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f876 	bl	8007142 <USBD_CtlError>
      break;
 8007056:	bf00      	nop
  }
}
 8007058:	bf00      	nop
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	885b      	ldrh	r3, [r3, #2]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d106      	bne.n	8007080 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f929 	bl	80072d2 <USBD_CtlSendStatus>
  }
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007098:	3b01      	subs	r3, #1
 800709a:	2b02      	cmp	r3, #2
 800709c:	d80b      	bhi.n	80070b6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	885b      	ldrh	r3, [r3, #2]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d10c      	bne.n	80070c0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f90f 	bl	80072d2 <USBD_CtlSendStatus>
      }
      break;
 80070b4:	e004      	b.n	80070c0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f842 	bl	8007142 <USBD_CtlError>
      break;
 80070be:	e000      	b.n	80070c2 <USBD_ClrFeature+0x3a>
      break;
 80070c0:	bf00      	nop
  }
}
 80070c2:	bf00      	nop
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781a      	ldrb	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	785a      	ldrb	r2, [r3, #1]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	3302      	adds	r3, #2
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	3303      	adds	r3, #3
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	4413      	add	r3, r2
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	3304      	adds	r3, #4
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b29a      	uxth	r2, r3
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	3305      	adds	r3, #5
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	b29b      	uxth	r3, r3
 8007114:	4413      	add	r3, r2
 8007116:	b29a      	uxth	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	3306      	adds	r3, #6
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	b29a      	uxth	r2, r3
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	3307      	adds	r3, #7
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	021b      	lsls	r3, r3, #8
 800712e:	b29b      	uxth	r3, r3
 8007130:	4413      	add	r3, r2
 8007132:	b29a      	uxth	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	80da      	strh	r2, [r3, #6]

}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	bc80      	pop	{r7}
 8007140:	4770      	bx	lr

08007142 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800714c:	2180      	movs	r1, #128	; 0x80
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fc64 	bl	8007a1c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007154:	2100      	movs	r1, #0
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fc60 	bl	8007a1c <USBD_LL_StallEP>
}
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d032      	beq.n	80071e0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f834 	bl	80071e8 <USBD_GetLen>
 8007180:	4603      	mov	r3, r0
 8007182:	3301      	adds	r3, #1
 8007184:	b29b      	uxth	r3, r3
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	b29a      	uxth	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	75fa      	strb	r2, [r7, #23]
 8007194:	461a      	mov	r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	4413      	add	r3, r2
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	7812      	ldrb	r2, [r2, #0]
 800719e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80071a0:	7dfb      	ldrb	r3, [r7, #23]
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	75fa      	strb	r2, [r7, #23]
 80071a6:	461a      	mov	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4413      	add	r3, r2
 80071ac:	2203      	movs	r2, #3
 80071ae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80071b0:	e012      	b.n	80071d8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	60fa      	str	r2, [r7, #12]
 80071b8:	7dfa      	ldrb	r2, [r7, #23]
 80071ba:	1c51      	adds	r1, r2, #1
 80071bc:	75f9      	strb	r1, [r7, #23]
 80071be:	4611      	mov	r1, r2
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	440a      	add	r2, r1
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	75fa      	strb	r2, [r7, #23]
 80071ce:	461a      	mov	r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4413      	add	r3, r2
 80071d4:	2200      	movs	r2, #0
 80071d6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e8      	bne.n	80071b2 <USBD_GetString+0x4e>
    }
  }
}
 80071e0:	bf00      	nop
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80071f4:	e005      	b.n	8007202 <USBD_GetLen+0x1a>
  {
    len++;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	3301      	adds	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
    buf++;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3301      	adds	r3, #1
 8007200:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1f5      	bne.n	80071f6 <USBD_GetLen+0xe>
  }

  return len;
 800720a:	7bfb      	ldrb	r3, [r7, #15]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr

08007216 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	60f8      	str	r0, [r7, #12]
 800721e:	60b9      	str	r1, [r7, #8]
 8007220:	4613      	mov	r3, r2
 8007222:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2202      	movs	r2, #2
 8007228:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800722c:	88fa      	ldrh	r2, [r7, #6]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007232:	88fa      	ldrh	r2, [r7, #6]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	2100      	movs	r1, #0
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 fc75 	bl	8007b2e <USBD_LL_Transmit>

  return USBD_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	4613      	mov	r3, r2
 800725a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	2100      	movs	r1, #0
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 fc63 	bl	8007b2e <USBD_LL_Transmit>

  return USBD_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	4613      	mov	r3, r2
 800727e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2203      	movs	r2, #3
 8007284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007288:	88fa      	ldrh	r2, [r7, #6]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007290:	88fa      	ldrh	r2, [r7, #6]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	2100      	movs	r1, #0
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fc68 	bl	8007b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	60b9      	str	r1, [r7, #8]
 80072b8:	4613      	mov	r3, r2
 80072ba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072bc:	88fb      	ldrh	r3, [r7, #6]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	2100      	movs	r1, #0
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 fc56 	bl	8007b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b082      	sub	sp, #8
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2204      	movs	r2, #4
 80072de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072e2:	2300      	movs	r3, #0
 80072e4:	2200      	movs	r2, #0
 80072e6:	2100      	movs	r1, #0
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fc20 	bl	8007b2e <USBD_LL_Transmit>

  return USBD_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2205      	movs	r2, #5
 8007304:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007308:	2300      	movs	r3, #0
 800730a:	2200      	movs	r2, #0
 800730c:	2100      	movs	r1, #0
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fc30 	bl	8007b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007324:	2200      	movs	r2, #0
 8007326:	4912      	ldr	r1, [pc, #72]	; (8007370 <MX_USB_DEVICE_Init+0x50>)
 8007328:	4812      	ldr	r0, [pc, #72]	; (8007374 <MX_USB_DEVICE_Init+0x54>)
 800732a:	f7fe ff5f 	bl	80061ec <USBD_Init>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007334:	f7f9 f898 	bl	8000468 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007338:	490f      	ldr	r1, [pc, #60]	; (8007378 <MX_USB_DEVICE_Init+0x58>)
 800733a:	480e      	ldr	r0, [pc, #56]	; (8007374 <MX_USB_DEVICE_Init+0x54>)
 800733c:	f7fe ff81 	bl	8006242 <USBD_RegisterClass>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007346:	f7f9 f88f 	bl	8000468 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800734a:	490c      	ldr	r1, [pc, #48]	; (800737c <MX_USB_DEVICE_Init+0x5c>)
 800734c:	4809      	ldr	r0, [pc, #36]	; (8007374 <MX_USB_DEVICE_Init+0x54>)
 800734e:	f7fe fee1 	bl	8006114 <USBD_CDC_RegisterInterface>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007358:	f7f9 f886 	bl	8000468 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800735c:	4805      	ldr	r0, [pc, #20]	; (8007374 <MX_USB_DEVICE_Init+0x54>)
 800735e:	f7fe ff89 	bl	8006274 <USBD_Start>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007368:	f7f9 f87e 	bl	8000468 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800736c:	bf00      	nop
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20000134 	.word	0x20000134
 8007374:	20000210 	.word	0x20000210
 8007378:	20000020 	.word	0x20000020
 800737c:	20000124 	.word	0x20000124

08007380 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007384:	2200      	movs	r2, #0
 8007386:	4905      	ldr	r1, [pc, #20]	; (800739c <CDC_Init_FS+0x1c>)
 8007388:	4805      	ldr	r0, [pc, #20]	; (80073a0 <CDC_Init_FS+0x20>)
 800738a:	f7fe fed9 	bl	8006140 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800738e:	4905      	ldr	r1, [pc, #20]	; (80073a4 <CDC_Init_FS+0x24>)
 8007390:	4803      	ldr	r0, [pc, #12]	; (80073a0 <CDC_Init_FS+0x20>)
 8007392:	f7fe feee 	bl	8006172 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8007396:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007398:	4618      	mov	r0, r3
 800739a:	bd80      	pop	{r7, pc}
 800739c:	200008d4 	.word	0x200008d4
 80073a0:	20000210 	.word	0x20000210
 80073a4:	200004d4 	.word	0x200004d4

080073a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 80073ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr
	...

080073b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	6039      	str	r1, [r7, #0]
 80073c2:	71fb      	strb	r3, [r7, #7]
 80073c4:	4613      	mov	r3, r2
 80073c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	2b23      	cmp	r3, #35	; 0x23
 80073cc:	d84a      	bhi.n	8007464 <CDC_Control_FS+0xac>
 80073ce:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <CDC_Control_FS+0x1c>)
 80073d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d4:	08007465 	.word	0x08007465
 80073d8:	08007465 	.word	0x08007465
 80073dc:	08007465 	.word	0x08007465
 80073e0:	08007465 	.word	0x08007465
 80073e4:	08007465 	.word	0x08007465
 80073e8:	08007465 	.word	0x08007465
 80073ec:	08007465 	.word	0x08007465
 80073f0:	08007465 	.word	0x08007465
 80073f4:	08007465 	.word	0x08007465
 80073f8:	08007465 	.word	0x08007465
 80073fc:	08007465 	.word	0x08007465
 8007400:	08007465 	.word	0x08007465
 8007404:	08007465 	.word	0x08007465
 8007408:	08007465 	.word	0x08007465
 800740c:	08007465 	.word	0x08007465
 8007410:	08007465 	.word	0x08007465
 8007414:	08007465 	.word	0x08007465
 8007418:	08007465 	.word	0x08007465
 800741c:	08007465 	.word	0x08007465
 8007420:	08007465 	.word	0x08007465
 8007424:	08007465 	.word	0x08007465
 8007428:	08007465 	.word	0x08007465
 800742c:	08007465 	.word	0x08007465
 8007430:	08007465 	.word	0x08007465
 8007434:	08007465 	.word	0x08007465
 8007438:	08007465 	.word	0x08007465
 800743c:	08007465 	.word	0x08007465
 8007440:	08007465 	.word	0x08007465
 8007444:	08007465 	.word	0x08007465
 8007448:	08007465 	.word	0x08007465
 800744c:	08007465 	.word	0x08007465
 8007450:	08007465 	.word	0x08007465
 8007454:	08007465 	.word	0x08007465
 8007458:	08007465 	.word	0x08007465
 800745c:	08007465 	.word	0x08007465
 8007460:	08007465 	.word	0x08007465
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8007464:	bf00      	nop
	}

	return (USBD_OK);
 8007466:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop

08007474 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	481b      	ldr	r0, [pc, #108]	; (80074f0 <CDC_Receive_FS+0x7c>)
 8007482:	f7fe fe76 	bl	8006172 <USBD_CDC_SetRxBuffer>

	if (priznak == 0) {
 8007486:	4b1b      	ldr	r3, [pc, #108]	; (80074f4 <CDC_Receive_FS+0x80>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d127      	bne.n	80074de <CDC_Receive_FS+0x6a>
		//return 0;

		priznak = 1;
 800748e:	4b19      	ldr	r3, [pc, #100]	; (80074f4 <CDC_Receive_FS+0x80>)
 8007490:	2201      	movs	r2, #1
 8007492:	701a      	strb	r2, [r3, #0]
		uint8_t llen = (uint8_t) *Len;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	73fb      	strb	r3, [r7, #15]
		memcpy(spi_buf, Buf, llen);
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	461a      	mov	r2, r3
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	4815      	ldr	r0, [pc, #84]	; (80074f8 <CDC_Receive_FS+0x84>)
 80074a2:	f000 fc15 	bl	8007cd0 <memcpy>
		spi_func[0] = spi_buf[6];
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <CDC_Receive_FS+0x84>)
 80074a8:	799a      	ldrb	r2, [r3, #6]
 80074aa:	4b14      	ldr	r3, [pc, #80]	; (80074fc <CDC_Receive_FS+0x88>)
 80074ac:	701a      	strb	r2, [r3, #0]
		NBUTE[0] = spi_buf[5];
 80074ae:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <CDC_Receive_FS+0x84>)
 80074b0:	795a      	ldrb	r2, [r3, #5]
 80074b2:	4b13      	ldr	r3, [pc, #76]	; (8007500 <CDC_Receive_FS+0x8c>)
 80074b4:	701a      	strb	r2, [r3, #0]
		//memcpy(NBUTE[0], spi_buf[5], 1);
		spi_OUT[0] = spi_buf[0];
 80074b6:	4b10      	ldr	r3, [pc, #64]	; (80074f8 <CDC_Receive_FS+0x84>)
 80074b8:	781a      	ldrb	r2, [r3, #0]
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <CDC_Receive_FS+0x90>)
 80074bc:	701a      	strb	r2, [r3, #0]
		spi_OUT[1] = spi_buf[1];
 80074be:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <CDC_Receive_FS+0x84>)
 80074c0:	785a      	ldrb	r2, [r3, #1]
 80074c2:	4b10      	ldr	r3, [pc, #64]	; (8007504 <CDC_Receive_FS+0x90>)
 80074c4:	705a      	strb	r2, [r3, #1]
		spi_OUT[2] = spi_buf[2];
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <CDC_Receive_FS+0x84>)
 80074c8:	789a      	ldrb	r2, [r3, #2]
 80074ca:	4b0e      	ldr	r3, [pc, #56]	; (8007504 <CDC_Receive_FS+0x90>)
 80074cc:	709a      	strb	r2, [r3, #2]
		spi_OUT[3] = spi_buf[3];
 80074ce:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <CDC_Receive_FS+0x84>)
 80074d0:	78da      	ldrb	r2, [r3, #3]
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <CDC_Receive_FS+0x90>)
 80074d4:	70da      	strb	r2, [r3, #3]
		spi_OUT[4] = spi_buf[4];
 80074d6:	4b08      	ldr	r3, [pc, #32]	; (80074f8 <CDC_Receive_FS+0x84>)
 80074d8:	791a      	ldrb	r2, [r3, #4]
 80074da:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <CDC_Receive_FS+0x90>)
 80074dc:	711a      	strb	r2, [r3, #4]

// for (tmp = 10; tmp > 0; tmp--);
//  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
// HAL_Delay(500);

	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80074de:	4804      	ldr	r0, [pc, #16]	; (80074f0 <CDC_Receive_FS+0x7c>)
 80074e0:	f7fe fe5a 	bl	8006198 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 80074e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000210 	.word	0x20000210
 80074f4:	200001ad 	.word	0x200001ad
 80074f8:	20000000 	.word	0x20000000
 80074fc:	200001a8 	.word	0x200001a8
 8007500:	200001ac 	.word	0x200001ac
 8007504:	200001a0 	.word	0x200001a0

08007508 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	6039      	str	r1, [r7, #0]
 8007512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2212      	movs	r2, #18
 8007518:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800751a:	4b03      	ldr	r3, [pc, #12]	; (8007528 <USBD_FS_DeviceDescriptor+0x20>)
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	20000150 	.word	0x20000150

0800752c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	6039      	str	r1, [r7, #0]
 8007536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2204      	movs	r2, #4
 800753c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800753e:	4b03      	ldr	r3, [pc, #12]	; (800754c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	bc80      	pop	{r7}
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20000164 	.word	0x20000164

08007550 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	6039      	str	r1, [r7, #0]
 800755a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800755c:	79fb      	ldrb	r3, [r7, #7]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d105      	bne.n	800756e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	4907      	ldr	r1, [pc, #28]	; (8007584 <USBD_FS_ProductStrDescriptor+0x34>)
 8007566:	4808      	ldr	r0, [pc, #32]	; (8007588 <USBD_FS_ProductStrDescriptor+0x38>)
 8007568:	f7ff fdfc 	bl	8007164 <USBD_GetString>
 800756c:	e004      	b.n	8007578 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4904      	ldr	r1, [pc, #16]	; (8007584 <USBD_FS_ProductStrDescriptor+0x34>)
 8007572:	4805      	ldr	r0, [pc, #20]	; (8007588 <USBD_FS_ProductStrDescriptor+0x38>)
 8007574:	f7ff fdf6 	bl	8007164 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007578:	4b02      	ldr	r3, [pc, #8]	; (8007584 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	20000cd4 	.word	0x20000cd4
 8007588:	08007d04 	.word	0x08007d04

0800758c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	6039      	str	r1, [r7, #0]
 8007596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	4904      	ldr	r1, [pc, #16]	; (80075ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800759c:	4804      	ldr	r0, [pc, #16]	; (80075b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800759e:	f7ff fde1 	bl	8007164 <USBD_GetString>
  return USBD_StrDesc;
 80075a2:	4b02      	ldr	r3, [pc, #8]	; (80075ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000cd4 	.word	0x20000cd4
 80075b0:	08007d1c 	.word	0x08007d1c

080075b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	6039      	str	r1, [r7, #0]
 80075be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	221a      	movs	r2, #26
 80075c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075c6:	f000 f843 	bl	8007650 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075ca:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20000168 	.word	0x20000168

080075d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d105      	bne.n	80075f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	4907      	ldr	r1, [pc, #28]	; (800760c <USBD_FS_ConfigStrDescriptor+0x34>)
 80075ee:	4808      	ldr	r0, [pc, #32]	; (8007610 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075f0:	f7ff fdb8 	bl	8007164 <USBD_GetString>
 80075f4:	e004      	b.n	8007600 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4904      	ldr	r1, [pc, #16]	; (800760c <USBD_FS_ConfigStrDescriptor+0x34>)
 80075fa:	4805      	ldr	r0, [pc, #20]	; (8007610 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075fc:	f7ff fdb2 	bl	8007164 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007600:	4b02      	ldr	r3, [pc, #8]	; (800760c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	20000cd4 	.word	0x20000cd4
 8007610:	08007d30 	.word	0x08007d30

08007614 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	6039      	str	r1, [r7, #0]
 800761e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	4907      	ldr	r1, [pc, #28]	; (8007648 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800762a:	4808      	ldr	r0, [pc, #32]	; (800764c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800762c:	f7ff fd9a 	bl	8007164 <USBD_GetString>
 8007630:	e004      	b.n	800763c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	4904      	ldr	r1, [pc, #16]	; (8007648 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007636:	4805      	ldr	r0, [pc, #20]	; (800764c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007638:	f7ff fd94 	bl	8007164 <USBD_GetString>
  }
  return USBD_StrDesc;
 800763c:	4b02      	ldr	r3, [pc, #8]	; (8007648 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000cd4 	.word	0x20000cd4
 800764c:	08007d3c 	.word	0x08007d3c

08007650 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007656:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <Get_SerialNum+0x44>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800765c:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <Get_SerialNum+0x48>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007662:	4b0e      	ldr	r3, [pc, #56]	; (800769c <Get_SerialNum+0x4c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4413      	add	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007676:	2208      	movs	r2, #8
 8007678:	4909      	ldr	r1, [pc, #36]	; (80076a0 <Get_SerialNum+0x50>)
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 f814 	bl	80076a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007680:	2204      	movs	r2, #4
 8007682:	4908      	ldr	r1, [pc, #32]	; (80076a4 <Get_SerialNum+0x54>)
 8007684:	68b8      	ldr	r0, [r7, #8]
 8007686:	f000 f80f 	bl	80076a8 <IntToUnicode>
  }
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	1ffff7e8 	.word	0x1ffff7e8
 8007698:	1ffff7ec 	.word	0x1ffff7ec
 800769c:	1ffff7f0 	.word	0x1ffff7f0
 80076a0:	2000016a 	.word	0x2000016a
 80076a4:	2000017a 	.word	0x2000017a

080076a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	4613      	mov	r3, r2
 80076b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076ba:	2300      	movs	r3, #0
 80076bc:	75fb      	strb	r3, [r7, #23]
 80076be:	e027      	b.n	8007710 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	0f1b      	lsrs	r3, r3, #28
 80076c4:	2b09      	cmp	r3, #9
 80076c6:	d80b      	bhi.n	80076e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	0f1b      	lsrs	r3, r3, #28
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4619      	mov	r1, r3
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	440b      	add	r3, r1
 80076d8:	3230      	adds	r2, #48	; 0x30
 80076da:	b2d2      	uxtb	r2, r2
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	e00a      	b.n	80076f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	0f1b      	lsrs	r3, r3, #28
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	4619      	mov	r1, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	440b      	add	r3, r1
 80076f0:	3237      	adds	r2, #55	; 0x37
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	3301      	adds	r3, #1
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	4413      	add	r3, r2
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800770a:	7dfb      	ldrb	r3, [r7, #23]
 800770c:	3301      	adds	r3, #1
 800770e:	75fb      	strb	r3, [r7, #23]
 8007710:	7dfa      	ldrb	r2, [r7, #23]
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	429a      	cmp	r2, r3
 8007716:	d3d3      	bcc.n	80076c0 <IntToUnicode+0x18>
  }
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr

08007724 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a0d      	ldr	r2, [pc, #52]	; (8007768 <HAL_PCD_MspInit+0x44>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d113      	bne.n	800775e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007736:	4b0d      	ldr	r3, [pc, #52]	; (800776c <HAL_PCD_MspInit+0x48>)
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	4a0c      	ldr	r2, [pc, #48]	; (800776c <HAL_PCD_MspInit+0x48>)
 800773c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007740:	61d3      	str	r3, [r2, #28]
 8007742:	4b0a      	ldr	r3, [pc, #40]	; (800776c <HAL_PCD_MspInit+0x48>)
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800774e:	2200      	movs	r2, #0
 8007750:	2100      	movs	r1, #0
 8007752:	2014      	movs	r0, #20
 8007754:	f7f9 f8c5 	bl	80008e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007758:	2014      	movs	r0, #20
 800775a:	f7f9 f8de 	bl	800091a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	40005c00 	.word	0x40005c00
 800776c:	40021000 	.word	0x40021000

08007770 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007784:	4619      	mov	r1, r3
 8007786:	4610      	mov	r0, r2
 8007788:	f7fe fdbc 	bl	8006304 <USBD_LL_SetupStage>
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80077a6:	78fa      	ldrb	r2, [r7, #3]
 80077a8:	6879      	ldr	r1, [r7, #4]
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	440b      	add	r3, r1
 80077b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	4619      	mov	r1, r3
 80077be:	f7fe fdee 	bl	800639e <USBD_LL_DataOutStage>
}
 80077c2:	bf00      	nop
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b082      	sub	sp, #8
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	460b      	mov	r3, r1
 80077d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80077dc:	78fa      	ldrb	r2, [r7, #3]
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	440b      	add	r3, r1
 80077ea:	333c      	adds	r3, #60	; 0x3c
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	78fb      	ldrb	r3, [r7, #3]
 80077f0:	4619      	mov	r1, r3
 80077f2:	f7fe fe45 	bl	8006480 <USBD_LL_DataInStage>
}
 80077f6:	bf00      	nop
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe ff55 	bl	80066bc <USBD_LL_SOF>
}
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007822:	2301      	movs	r3, #1
 8007824:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	2b02      	cmp	r3, #2
 800782c:	d001      	beq.n	8007832 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800782e:	f7f8 fe1b 	bl	8000468 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007838:	7bfa      	ldrb	r2, [r7, #15]
 800783a:	4611      	mov	r1, r2
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe ff05 	bl	800664c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe febe 	bl	80065ca <USBD_LL_Reset>
}
 800784e:	bf00      	nop
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
	...

08007858 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe feff 	bl	800666a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007874:	4b04      	ldr	r3, [pc, #16]	; (8007888 <HAL_PCD_SuspendCallback+0x30>)
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	4a03      	ldr	r2, [pc, #12]	; (8007888 <HAL_PCD_SuspendCallback+0x30>)
 800787a:	f043 0306 	orr.w	r3, r3, #6
 800787e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	e000ed00 	.word	0xe000ed00

0800788c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fef9 	bl	8006692 <USBD_LL_Resume>
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80078b0:	4a28      	ldr	r2, [pc, #160]	; (8007954 <USBD_LL_Init+0xac>)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a26      	ldr	r2, [pc, #152]	; (8007954 <USBD_LL_Init+0xac>)
 80078bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80078c0:	4b24      	ldr	r3, [pc, #144]	; (8007954 <USBD_LL_Init+0xac>)
 80078c2:	4a25      	ldr	r2, [pc, #148]	; (8007958 <USBD_LL_Init+0xb0>)
 80078c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80078c6:	4b23      	ldr	r3, [pc, #140]	; (8007954 <USBD_LL_Init+0xac>)
 80078c8:	2208      	movs	r2, #8
 80078ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80078cc:	4b21      	ldr	r3, [pc, #132]	; (8007954 <USBD_LL_Init+0xac>)
 80078ce:	2202      	movs	r2, #2
 80078d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80078d2:	4b20      	ldr	r3, [pc, #128]	; (8007954 <USBD_LL_Init+0xac>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80078d8:	4b1e      	ldr	r3, [pc, #120]	; (8007954 <USBD_LL_Init+0xac>)
 80078da:	2200      	movs	r2, #0
 80078dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80078de:	4b1d      	ldr	r3, [pc, #116]	; (8007954 <USBD_LL_Init+0xac>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80078e4:	481b      	ldr	r0, [pc, #108]	; (8007954 <USBD_LL_Init+0xac>)
 80078e6:	f7f9 f9cf 	bl	8000c88 <HAL_PCD_Init>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80078f0:	f7f8 fdba 	bl	8000468 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078fa:	2318      	movs	r3, #24
 80078fc:	2200      	movs	r2, #0
 80078fe:	2100      	movs	r1, #0
 8007900:	f7fa feee 	bl	80026e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800790a:	2358      	movs	r3, #88	; 0x58
 800790c:	2200      	movs	r2, #0
 800790e:	2180      	movs	r1, #128	; 0x80
 8007910:	f7fa fee6 	bl	80026e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800791a:	23c0      	movs	r3, #192	; 0xc0
 800791c:	2200      	movs	r2, #0
 800791e:	2181      	movs	r1, #129	; 0x81
 8007920:	f7fa fede 	bl	80026e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800792a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800792e:	2200      	movs	r2, #0
 8007930:	2101      	movs	r1, #1
 8007932:	f7fa fed5 	bl	80026e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800793c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007940:	2200      	movs	r2, #0
 8007942:	2182      	movs	r1, #130	; 0x82
 8007944:	f7fa fecc 	bl	80026e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20000ed4 	.word	0x20000ed4
 8007958:	40005c00 	.word	0x40005c00

0800795c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007972:	4618      	mov	r0, r3
 8007974:	f7f9 fa87 	bl	8000e86 <HAL_PCD_Start>
 8007978:	4603      	mov	r3, r0
 800797a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f94e 	bl	8007c20 <USBD_Get_USB_Status>
 8007984:	4603      	mov	r3, r0
 8007986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007988:	7bbb      	ldrb	r3, [r7, #14]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	4608      	mov	r0, r1
 800799c:	4611      	mov	r1, r2
 800799e:	461a      	mov	r2, r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	70fb      	strb	r3, [r7, #3]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70bb      	strb	r3, [r7, #2]
 80079a8:	4613      	mov	r3, r2
 80079aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079ba:	78bb      	ldrb	r3, [r7, #2]
 80079bc:	883a      	ldrh	r2, [r7, #0]
 80079be:	78f9      	ldrb	r1, [r7, #3]
 80079c0:	f7f9 fbdc 	bl	800117c <HAL_PCD_EP_Open>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 f928 	bl	8007c20 <USBD_Get_USB_Status>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079f8:	78fa      	ldrb	r2, [r7, #3]
 80079fa:	4611      	mov	r1, r2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7f9 fc1a 	bl	8001236 <HAL_PCD_EP_Close>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 f909 	bl	8007c20 <USBD_Get_USB_Status>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a36:	78fa      	ldrb	r2, [r7, #3]
 8007a38:	4611      	mov	r1, r2
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7f9 fcc2 	bl	80013c4 <HAL_PCD_EP_SetStall>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f8ea 	bl	8007c20 <USBD_Get_USB_Status>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a74:	78fa      	ldrb	r2, [r7, #3]
 8007a76:	4611      	mov	r1, r2
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7f9 fd03 	bl	8001484 <HAL_PCD_EP_ClrStall>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 f8cb 	bl	8007c20 <USBD_Get_USB_Status>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	da0c      	bge.n	8007ace <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ab4:	78fb      	ldrb	r3, [r7, #3]
 8007ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aba:	68f9      	ldr	r1, [r7, #12]
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	440b      	add	r3, r1
 8007ac8:	3302      	adds	r3, #2
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	e00b      	b.n	8007ae6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ace:	78fb      	ldrb	r3, [r7, #3]
 8007ad0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ad4:	68f9      	ldr	r1, [r7, #12]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	440b      	add	r3, r1
 8007ae0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007ae4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bc80      	pop	{r7}
 8007aee:	4770      	bx	lr

08007af0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7f9 fb0f 	bl	8001132 <HAL_PCD_SetAddress>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f880 	bl	8007c20 <USBD_Get_USB_Status>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b086      	sub	sp, #24
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	72fb      	strb	r3, [r7, #11]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b50:	893b      	ldrh	r3, [r7, #8]
 8007b52:	7af9      	ldrb	r1, [r7, #11]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	f7f9 fbfe 	bl	8001356 <HAL_PCD_EP_Transmit>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 f85d 	bl	8007c20 <USBD_Get_USB_Status>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	607a      	str	r2, [r7, #4]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	460b      	mov	r3, r1
 8007b82:	72fb      	strb	r3, [r7, #11]
 8007b84:	4613      	mov	r3, r2
 8007b86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b96:	893b      	ldrh	r3, [r7, #8]
 8007b98:	7af9      	ldrb	r1, [r7, #11]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	f7f9 fb93 	bl	80012c6 <HAL_PCD_EP_Receive>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 f83a 	bl	8007c20 <USBD_Get_USB_Status>
 8007bac:	4603      	mov	r3, r0
 8007bae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007bb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3718      	adds	r7, #24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7f9 fba9 	bl	8001328 <HAL_PCD_EP_GetRxCount>
 8007bd6:	4603      	mov	r3, r0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007be8:	4b02      	ldr	r3, [pc, #8]	; (8007bf4 <USBD_static_malloc+0x14>)
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr
 8007bf4:	200011c4 	.word	0x200011c4

08007bf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]

}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr

08007c0a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr

08007c20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d817      	bhi.n	8007c64 <USBD_Get_USB_Status+0x44>
 8007c34:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <USBD_Get_USB_Status+0x1c>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007c4d 	.word	0x08007c4d
 8007c40:	08007c53 	.word	0x08007c53
 8007c44:	08007c59 	.word	0x08007c59
 8007c48:	08007c5f 	.word	0x08007c5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c50:	e00b      	b.n	8007c6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c52:	2302      	movs	r3, #2
 8007c54:	73fb      	strb	r3, [r7, #15]
    break;
 8007c56:	e008      	b.n	8007c6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c5c:	e005      	b.n	8007c6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c5e:	2302      	movs	r3, #2
 8007c60:	73fb      	strb	r3, [r7, #15]
    break;
 8007c62:	e002      	b.n	8007c6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c64:	2302      	movs	r3, #2
 8007c66:	73fb      	strb	r3, [r7, #15]
    break;
 8007c68:	bf00      	nop
  }
  return usb_status;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop

08007c78 <memset>:
 8007c78:	4603      	mov	r3, r0
 8007c7a:	4402      	add	r2, r0
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d100      	bne.n	8007c82 <memset+0xa>
 8007c80:	4770      	bx	lr
 8007c82:	f803 1b01 	strb.w	r1, [r3], #1
 8007c86:	e7f9      	b.n	8007c7c <memset+0x4>

08007c88 <__libc_init_array>:
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	2600      	movs	r6, #0
 8007c8c:	4d0c      	ldr	r5, [pc, #48]	; (8007cc0 <__libc_init_array+0x38>)
 8007c8e:	4c0d      	ldr	r4, [pc, #52]	; (8007cc4 <__libc_init_array+0x3c>)
 8007c90:	1b64      	subs	r4, r4, r5
 8007c92:	10a4      	asrs	r4, r4, #2
 8007c94:	42a6      	cmp	r6, r4
 8007c96:	d109      	bne.n	8007cac <__libc_init_array+0x24>
 8007c98:	f000 f828 	bl	8007cec <_init>
 8007c9c:	2600      	movs	r6, #0
 8007c9e:	4d0a      	ldr	r5, [pc, #40]	; (8007cc8 <__libc_init_array+0x40>)
 8007ca0:	4c0a      	ldr	r4, [pc, #40]	; (8007ccc <__libc_init_array+0x44>)
 8007ca2:	1b64      	subs	r4, r4, r5
 8007ca4:	10a4      	asrs	r4, r4, #2
 8007ca6:	42a6      	cmp	r6, r4
 8007ca8:	d105      	bne.n	8007cb6 <__libc_init_array+0x2e>
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb0:	4798      	blx	r3
 8007cb2:	3601      	adds	r6, #1
 8007cb4:	e7ee      	b.n	8007c94 <__libc_init_array+0xc>
 8007cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cba:	4798      	blx	r3
 8007cbc:	3601      	adds	r6, #1
 8007cbe:	e7f2      	b.n	8007ca6 <__libc_init_array+0x1e>
 8007cc0:	08007d70 	.word	0x08007d70
 8007cc4:	08007d70 	.word	0x08007d70
 8007cc8:	08007d70 	.word	0x08007d70
 8007ccc:	08007d74 	.word	0x08007d74

08007cd0 <memcpy>:
 8007cd0:	440a      	add	r2, r1
 8007cd2:	4291      	cmp	r1, r2
 8007cd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cd8:	d100      	bne.n	8007cdc <memcpy+0xc>
 8007cda:	4770      	bx	lr
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ce2:	4291      	cmp	r1, r2
 8007ce4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ce8:	d1f9      	bne.n	8007cde <memcpy+0xe>
 8007cea:	bd10      	pop	{r4, pc}

08007cec <_init>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	bf00      	nop
 8007cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf2:	bc08      	pop	{r3}
 8007cf4:	469e      	mov	lr, r3
 8007cf6:	4770      	bx	lr

08007cf8 <_fini>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr

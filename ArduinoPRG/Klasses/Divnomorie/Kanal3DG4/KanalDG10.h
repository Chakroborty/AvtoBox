// ---------------------------------------------------------------------------

#ifndef KanalDG10H
#define KanalDG10H
#include "HMC700.h"
#include "UsbDeviceManager.h"
// ---------------------------------------------------------------------------
class KanalDG10 {
public:
	KanalDG10(int Mod_kanalNum, int Blok_kanalNum, double Polosa);
	~KanalDG10();
	void WriteFregIN(double freqCR, int Kanal);
	
	int LoadKL(int sw);
	// ********************************************************************************
	int KanalNum_B_Blok;
	int KanalNum_B_Mod;
	// ********************************************************************************
	double FrGet2;
	double FregIN;
	double FrGet1;
	// ********************************************************************************
	int PC1_Kluch;
	int PC2_Kluch;
	int Pres_UPR_Kluch;
	int AMP_POn_Kluch;
	bool AmpSET;
    int LNA;


	int AMP_SW1_Kluch;
	int AMP_SW2_Kluch;
	// int AMP_SW3_Kluch;
	int AMP_SW3_Bolshe105;
	// ********************************************************************************

	void ATT1_SET(int DB);

	int LoadATT(int div);
	void ATT2_SET(int DB);
	DWORD LoadGET1H();
	DWORD LoadGET2H();

	
	// ********************************************************************************
    double FreqFout();
protected:
	
   //	void WriteFrPC1(double freqPC1);
	void PC1_2440(void);
	double Freal;
	int ATT_pervi; 	//Аттенюатор HMC939
	int ATT_vtoroi;	//Аттенюатор HMC274
	int upr221;		//Выбор полосового фильтра пресел
	int upr1311;	//Выбор входного диапазона
	int upr25;		//гетеродин
	int PC4;		//Нижний/Боковой
	

	// ********************************************************************************
private:
	double fregCR;
	double freqPC1;
	double Fsint2;

	double Fpc1;
	double FsigPC1;
	double FsigPC2;
	double PolosaPC2;

	// ********************************************************************************
	enum AdresModul {

		Modul1 = 0x0,
		Modul2 = 0x1 << 28,
		Modul3 = 0x2 << 28,
		Modul4 = 0x3 << 28,
		Modul5 = 0x4 << 28,
		Modul6 = 0x5 << 28,
		Obsh = 0xD << 28
	};

	enum PCH3 {
		UPR1_36 =   0, //000  развернуть
		UPR1_610 =  1, //100
		UPR1_1012 = 2, //010
		UPR1_1216 = 3, //110
		UPR1_1618 = 4, //001
		UPR2_0 =  15,  //1111  15 развернуть 1111 15       биты перевернуты
		UPR2_2 =  7,   //1110  14 развернуть 0111 7
		UPR2_4 =  11,  //1101  13 развернуть 1011 11
		UPR2_8 =  13,  //1011  11 развернуть 1101 13
		UPR2_16 = 14   //0111  7  развернуть 1110 14

	};
        //***********************************************
//			unsigned char Mirror(unsigned char C){
		//функция Зеркального отображения бит в байте
//		unsigned char Result = 0;
//		for(int i = 0;i<8;i++){
//		Result += (unsigned char)pow(2,7-i)*(C%2);
//		C /= 2;
//		}
//		return Result;
//		}

//b = ((b >> 4) & 15) | ((b & 15) << 4);
//b = ((b >> 2) & 51) | ((b & 51) << 2);
//b = ((b >> 1) & 85) | ((b & 85) << 1);
//Имеется в виду, что 15=0b00001111, 51=0b00110011, 85=0b01010101.
//*********************************************

	enum Get1
	{
	 VER1 = 0,
	 Nig1 = 1
	};
	enum Get
	{
	 VER = 2,
	 Nig = 1
	};

	enum Pres {			//Тбл Выбор диапазона
		UPR2_34 = 7,	//111 Диапазон 3-4 ГГц – вх1 развернуть 111 7
		UPR2_46 = 5,	//101 Диапазон 4-6 ГГц – вх1 развернуть 101 5
		UPR2_68 = 3,	//110 Диапазон 6-8 ГГц – вх2 развернуть 011 3
		UPR2_810 = 1,	//100 Диапазон 8-10 ГГц – вх2 развернуть 001 1
		UPR2_1012 = 6,	//011 Диапазон 10-12 ГГц – вх2 развернуть 110 6
		UPR2_1214 = 4,	//001 Диапазон 12-14 ГГц – вх2 развернуть 100 4
		UPR2_1416 = 2,	//010 Диапазон 14-16 ГГц – вх2 развернуть 010 2
		UPR2_1618 = 0,	//000 Диапазон 16-18 ГГц – вх2 развернуть 000 0
		UPR3_0 =  31,  //11111  развернуть 11111 31
		UPR3_1 =  30,  //11110 30 развернуть 01111 15
		UPR3_2 =  29,  //11101 29 развернуть 10111 23
		UPR3_4 =  27,  //11011 27 развернуть 11011 27
		UPR3_8 =  23,  //10111 23 развернуть 11101 29
		UPR3_16 = 15   //01111 15 развернуть 11110 30
	};

	

	enum AdrRegATT {
		Ch1_Amp_Att1  = 0,
		Ch1_Amp_Att2  = 0x1<<20,
		Ch1_Amp_Att3  = 0x2<<20,
		Ch1_Amp_Att4  = 0x3<<20,
		Ch2_Amp_Att1  = 0x4<<20,
		Ch2_Amp_Att2  = 0x5<<20,
		Ch2_Amp_Att3  = 0x6<<20,
		Ch2_Amp_Att4  = 0x7<<20,
		Ch1_Pres_Att  = 0x8<<20,
		Ch2_Pres_Att  = 0x9<<20,
		Ch1_Pch1_Att1 = 0xA<<20,
		Ch1_Pch1_Att2 = 0xB<<20,
		Ch2_Pch1_Att1 = 0xC<<20,
		Ch2_Pch1_Att2 = 0xD<<20,
	};

	enum KluchPrec {
		Pr_105_175 = 0X194 << 7,
		Pr_175_315 = 0X10C << 7,
		Pr_315_525 = 0X2C << 7,
		Pr_525_805 = 0X64 << 7,
		Pr_805_1215 = 0X144 << 7,
		Pr_1215_1410 = 0XB4 << 7,
		Pr_1410_1620 = 0XDB << 7,
		Pr_1620_1830 = 0XDF << 7,
		Pr_1830_2040 = 0XD9 << 7, //011011001
		Pr_2040_2320 = 0XDD << 7, //011011101
		Pr_2320_2600 = 0XDA << 7, //011011010
		Pr_2600_2880 = 0XDE << 7, //011011110
		Pr_2880_3230 = 0XD8 << 7  //011011000
	};

	enum KluchPC2 {
		PC2_32_105 = 0x4 << 12,
		PC2_105_175_OB = 0x0 << 12,
		PC2_105_1215 = 0x9 << 12,
		PC2_1215_1815 = 0xA << 12,
		PC2_1815_3200 = 0xA << 12
	};

	enum KluchPC1 {
		PC1_32_105 = 0,
		PC1_105_175_OB = 0,
		PC1_105_1215 = 0x78 << 9,
		PC1_1215_1815 = 0x72 << 9,
		PC1_1815_3200 = 0x75 << 9
	};

	enum KluchAmplSW2 {
		SW2_32_50 = 0x4 << 13,
		SW2_50_70 = 0x2 << 13,
		SW2_70_105 = 0x1 << 13
	};

	enum KluchAmplSW1 {
		SW1_15_32 = 0,
		SW1_15_25 = 0x5 << 13,
		SW1_25_5 = 0x4 << 13,
		SW1_5_9 = 0x3 << 13,
		SW1_9_16 = 0x2 << 13,
		SW1_16_32 = 0x1 << 13
	};

	enum KluchAmplSW3 {
		SW3_32_105 = 1 << 15,
		SW3_105_3200 = 0,
		SW3_LNA_ON = 1 << 14,
		SW3_LNA_Off = 0
	};

};

#endif
